#include macros.dta
(eyetoy
   (iop_modules
      (iop/eyetoy.irx
         "maxcam=1"
         "pack=0"
         "samprate=0"
         "micsize=0"
         "framesize=37"))
   (usb_load 3))
(mem
   (heaps
      #ifdef HX_EE
      (main
         (size 20950000))
      (rnd
         (size 4125000)
         (handle TRUE))
      #endif
      #ifdef HX_GC
      (main
         (size 16800000))
      #endif
      #ifdef HX_XBOX
      (main
         (size 32000000))
      #endif
      #ifdef HX_PC
      (main
         (size 47240000))
      #endif)
   (pool
      (big_hunk 3150000)
      (small_hunk 50000)))
(joypad
   #ifdef HX_EE
   (ignore 1 2 3 5 6 7)
   #else
   (ignore 4 5 6 7)
   #endif
   (hold_ms 400)
   (repeat_ms 75))
(ui
   (rnd_extension kr)
   (shared_rnd_files krui/common.kr krui/common_char.kr krui/common_docked.kr krui/common_parameters.kr)
   (use_joypad TRUE)
   (create
      #include ../krui/ui.dta)
   #include ../krui/sfx.dta
   #include ../krui/global.dta)
(namespaces
   (main 10007 100000)
   (ui 6000 60000)
   (arena 4001 40000)
   (krui 5009 40000)
   (anims 257 1025))
(locale krui/eng/char.dta krui/eng/locale.dta)
(synth
   #include synth.dta)
(spew)
(rnd
   (title
      "Karaoke Revolution 4")
   (show_timers FALSE)
   (overlays
      (game
         (lines 3)
         (showing FALSE))
      (camtest
         (lines 1)
         (showing FALSE))
      (arena
         (lines 3))
      (massive
         (lines 6)
         (color 0 0 1 0.2)
         (showing FALSE))
      (xtl_alloc
         (lines 2)
         (showing FALSE)))
   (hdtv_splash_delay 5.0))
#define CHEATS_ALLOWED
({&&
      {meta is_active}
      {!
         {ui in_transition}}
      {ui current_screen}
      {{ui current_screen}
         allow_cheats}})
(long_cheats
   ((kPad_Square kPad_L1 kPad_Circle kPad_DRight kPad_Square kPad_DDown)
      {meta_cheat unlock_all song})
   ((kPad_Square kPad_DDown kPad_Circle kPad_DLeft kPad_R1 kPad_Square)
      {meta_cheat unlock_all_outfits})
   ((kPad_Circle kPad_L1 kPad_Square kPad_Circle kPad_DUp kPad_R1)
      {meta_cheat unlock_all char})
   ((kPad_Square kPad_L1 kPad_DLeft kPad_Square kPad_DDown kPad_R1)
      {meta_cheat unlock_all trophy})
   ((kPad_DDown kPad_DUp kPad_L1 kPad_R1 kPad_Circle kPad_Square)
      {if
         CHEATS_ALLOWED
         {set
            $cheshire_cat
            {! $cheshire_cat}}
         {play_sfx
            {if_else $cheshire_cat cheat cheat_off}}})
   ((kPad_Circle kPad_Square kPad_DRight kPad_DLeft kPad_L1 kPad_R1)
      {if
         CHEATS_ALLOWED
         {set
            $muerte
            {! $muerte}}
         {play_sfx
            {if_else $muerte cheat cheat_off}}})
   ((kPad_Square kPad_Circle kPad_R1 kPad_L1 kPad_DLeft kPad_DRight)
      {if
         CHEATS_ALLOWED
         {set
            $big_eyes
            {! $big_eyes}}
         {play_sfx
            {if_else $big_eyes cheat cheat_off}}})
   ((kPad_Circle kPad_R1 kPad_Square kPad_DRight kPad_L1 kPad_DLeft)
      {if
         CHEATS_ALLOWED
         {if_else
            {&&
               $singer_mat_cheat
               {== $singer_mat char_glass.mat}}
            {do
               {set $singer_mat_cheat 0}
               {play_sfx cheat_off}}
            {do
               {set $singer_mat_cheat 1}
               {set $singer_mat char_glass.mat}
               {set $singer_show_eyes 0}
               {play_sfx cheat}}}})
   ((kPad_Circle kPad_DLeft kPad_R1 kPad_L1 kPad_Square kPad_DRight)
      {if
         CHEATS_ALLOWED
         {if_else
            {&&
               $singer_mat_cheat
               {== $singer_mat char_oilslick.mat}}
            {do
               {set $singer_mat_cheat 0}
               {play_sfx cheat_off}}
            {do
               {set $singer_mat_cheat 1}
               {set $singer_mat char_oilslick.mat}
               {set $singer_show_eyes 1}
               {play_sfx cheat}}}})
   ((kPad_DLeft kPad_L1 kPad_DRight kPad_Square kPad_R1 kPad_Circle)
      {if
         CHEATS_ALLOWED
         {if_else
            {&&
               $singer_mat_cheat
               {== $singer_mat char_t2.mat}}
            {do
               {set $singer_mat_cheat 0}
               {play_sfx cheat_off}}
            {do
               {set $singer_mat_cheat 1}
               {set $singer_mat char_t2.mat}
               {set $singer_show_eyes 1}
               {play_sfx cheat}}}})
   ((kPad_Circle kPad_R1 kPad_Square kPad_DLeft kPad_L1 kPad_DRight)
      {if
         CHEATS_ALLOWED
         {if_else
            {&&
               $singer_mat_cheat
               {== $singer_mat char_wraith.mat}}
            {do
               {set $singer_mat_cheat 0}
               {play_sfx cheat_off}}
            {do
               {set $singer_mat_cheat 1}
               {set $singer_mat char_wraith.mat}
               {set $singer_show_eyes 0}
               {play_sfx cheat}}}})
   ((kPad_DRight kPad_Square kPad_L1 kPad_R1 kPad_DLeft kPad_Circle)
      {if
         CHEATS_ALLOWED
         {set $singer_mat_cheat 0}
         {set $cheshire_cat 0}
         {set $muerte 0}
         {set $big_eyes 0}
         {play_sfx cheat_off}}))
(quick_cheats
   (right
      (kPad_DUp
         {if_else
            {meta is_active}
            {meta_cheat toggle_translucent_char}
            {the_game toggle_auto_play}})
      (kPad_DLeft
         {if_else
            {meta is_active}
            {meta_cheat unlock_all ''}
            {the_game change_excitement -0.1}})
      (kPad_DRight
         {the_game change_excitement 0.1})
      (kPad_DDown
         {set
            $arena.camtest
            {! $arena.camtest}})
      (kPad_Select
         {if
            {exists the_hud}
            {the_hud mode_hack}})
      (kPad_Start
         {if
            {!
               {meta is_active}}
            {rnd save_objects arena.rnd arena}})
      (kPad_L3
         {do
            {level mute_cheat}
            {the_crowd_audio mute_cheat}})
      (kPad_Square
         {meta print_current_screen})
      (kPad_Tri
         {meta_cheat no_mic_cheat})
      (kPad_Circle
         {set
            $arena.facetest
            {! $arena.facetest}})
      (kPad_R3
         {rnd toggle_overlay xtl_alloc})
      (kPad_X
         {rnd toggle_overlay arena}
         {rnd toggle_overlay game})
      (kPad_RStickUp
         {if_else
            {exists level}
            {level shuttle_cheat}
            {meta_cheat medley_cheat}})
      (kPad_RStickDown
         {if
            {meta is_active}
            {meta_cheat challenge_cheat}}))
   #ifdef HX_GC
   (left
      (kPad_LStickDown
         {the_game win_cheat 0})
      (kPad_LStickLeft
         {the_game win_cheat 3000})
      (kPad_LStickRight
         {the_game win_cheat 15000})
      (kPad_LStickUp
         {the_game win_cheat 35000})
      (kPad_RStickUp
         {the_game win_cheat 50000})
      (kPad_RStickDown
         {char_sys
            walk_to
            singer0
            kAnimNow
            {mod
               {'+'
                  {char_sys get_spot singer0}
                  1}
               4}})
      (kPad_RStickRight
         {do
            {char_model_mgr print_char}
            {set
               $outfit_names
               {- 1 $outfit_names}}
            {char_model_mgr refresh_buttons}})
      (kPad_RStickLeft
         {if
            {exists singer0}
            {singer0
               set
               debug
               {if_else
                  {&&
                     {singer0 has debug}
                     {==
                        {singer0 get debug}
                        anims}}
                  nothing
                  anims}}}))
   #endif
   (keyboard
      (/
         {the_hud toggle_safe_zone})
      (h
         {the_hud toggle_hud_draw})
      (t
         {if_else
            {exists camtest_next_shots}
            {camtest_next_shots}
            {print
               "Not in camtest mode\n"}})
      (r
         {if_else
            {exists camtest_pick_shot}
            {camtest_pick_shot}
            {print
               "Not in camtest mode\n"}})
      (=
         {do
            {set
               $leveldata.boost_cheat
               {! $leveldata.boost_cheat}}
            {print
               "CHEAT: crowd boost cheat: "
               $leveldata.boost_cheat
               "\n"}})
      (j
         {char_sys
            walk_to
            singer0
            kAnimNow
            {mod
               {-
                  {char_sys get_spot singer0}
                  1}
               4}})
      (k
         {char_sys
            walk_to
            singer0
            kAnimNow
            {mod
               {'+'
                  {char_sys get_spot singer0}
                  1}
               4}})
      (KB_UP
         {the_game mod_param 1})
      (KB_DOWN
         {the_game mod_param -1})
      (y
         {the_game reg_param meter_factor 5.0e-2})
      (u
         {the_game reg_skill_param slop 5})
      (i
         {the_game reg_skill_param pitch_margin 0.1})
      (o
         {the_game reg_skill_param hit_multiplier 0.1})
      (p
         {the_game reg_skill_param note_length_factor 0.1})
      (g
         {the_hud show_next_song 'secret lover'})
      (6
         {meta launch stadium endless kRuleDuet kDuetCoop})
      (7
         {meta launch stadium endless kRuleDuet kDuetCoop})
      (8
         {meta launch stadium endless kRuleDuet kDuetSingOff})
      (9
         {meta launch stadium endless kRuleDuet kDuetKnockOut})
      (0
         {meta launch stadium endless kRuleQuickplay})
      (1
         {the_crowd_audio test_transient 0 0})
      (2
         {the_crowd_audio test_transient 1 0})
      (3
         {the_crowd_audio test_transient 2 0})
      (4
         {the_crowd_audio test_transient 3 0})
      (5
         {the_crowd_audio test_transient 4 0})
      (!
         {the_crowd_audio test_transient 0 1})
      ('@'
         {the_crowd_audio test_transient 1 1})
      (#
         {the_crowd_audio test_transient 2 1})
      ('$'
         {the_crowd_audio test_transient 3 1})
      ('%'
         {the_crowd_audio test_transient 4 1})
      (b
         {the_crowd_audio toggle_tick cheat_click})
      (P
         {do
            {char_model_mgr print_char}
            {set
               $outfit_names
               {- 1 $outfit_names}}
            {char_model_mgr refresh_buttons}})
      (a
         {arena
            set_showing
            {!
               {arena showing}}})
      (KB_F1
         {the_game win_cheat 0})
      (KB_F2
         {the_game win_cheat 3000})
      (KB_F3
         {the_game win_cheat 15000})
      (KB_F4
         {the_game win_cheat 35000})
      (KB_F5
         {the_game win_cheat 50000})
      (KB_F6
         {if
            {exists singer0}
            {singer0
               set
               debug
               {if_else
                  {&&
                     {singer0 has debug}
                     {==
                        {singer0 get debug}
                        anims}}
                  nothing
                  anims}}})
      (KB_F7
         {if
            {exists singer1}
            {singer1
               set
               debug
               {if_else
                  {&&
                     {singer1 has debug}
                     {==
                        {singer1 get debug}
                        anims}}
                  nothing
                  anims}}})
      (KB_F8
         {set
            $char_sys.show_walk_points
            {- 1 $char_sys.show_walk_points}})))
(timer
   hud
   (budget 1.7)
   game
   (budget 1)
   arena
   (budget 6)
   charsys
   (budget 8)
   cpu
   (budget 16.7)
   gs
   (budget 16.7))
(krui
   #include krui.dta)
(meta
   #include meta.dta)
(db
   #include db.dta)
(game
   #include game.dta
   (autoload_ltf FALSE))
(arena
   #include arena.dta)
(charsys
   #include ../charsys/charsys.dta)
(kara
   (skip_meta FALSE)
   (demo FALSE)
   (demo_mag FALSE))
(metamusic
   #include ../sfx/metamusic.dta)
(mc
   #include mc.dta)
(minigame
   #ifdef DEMO
   #else
   #include minigame.dta
   #endif)
(unlocks
   #include unlocks.dta)
(kaspro
   (events chorus force_set_change bridge verse venue_bonus clap_off gtr_solo_1 gtr_solo_2 gtr_solo_off)
   (required_events)
   (paired_events
      (gtr_on gtr_off)
      (drum_on drum_off)
      (bass_on bass_off)
      (keys_on keys_off)
      (dj_on dj_off)
      (dance_on dance_off)
      (adlib_on adlib_off)
      (keys_solo_1 keys_solo_off)))
(xbox_volume_correction 0.8)
#merge ../../../system/run/config/default.dta