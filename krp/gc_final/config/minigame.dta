#include macros.dta
#include ../minigames/stagedive/anims_macros.dta
#include ../minigames/collector/anims_macros.dta
#include ../minigames/pong/anims_macros.dta
(spew)
(synth
   (mic_iop_modules
      (iop/lgaud.irx
         "rpc=0"
         "maxstream=0")
      ('iop/synmic_%.irx'))
   (mic
      (gain 0.1)
      (volume 0.9)
      (fx TRUE)
      (dma TRUE)
      (compressor TRUE 0.7))
   (mics 2))
(CalibrationByRange
   (rnd_file
      "minigames/oldart/boxy.rnd")
   (view
      "mincali.view")
   (pitches1 60 72)
   (pitches2 48 60)
   (pitches3 55 67))
(pong
   (Calibration
      (rnd_file
         "minigames/oldart/boxy.rnd")
      (view
         "minitest_menu.view")
      (samples
         (Sample1
            "High")
         (Sample2
            "Mid")
         (Sample3
            "Low")))
   (song_bpm 155)
   (rnd_file
      "minigames/pong/pong.rnd")
   (view
      "venue.view")
   (rnd_file_hud
      "minigames/pong/pong_hud.rnd")
   (view_hud
      "hudpong.view")
   (Male_Crd
      "minigames/pong/crowd_male.rnd"
      ArchPong)
   (Female_Crd
      "minigames/pong/crowd_female.rnd"
      ArchPongFemale)
   (filter 0.75)
   (bg
      (file
         "minigames/pong/surfrock")
      (bank
         "minigames/pong/pong")
      (instrument 3))
   (paddle0
      (view
         "01player.view")
      (kDamping 50.0)
      (kAccel 500.0)
      (Angle 5 -28.65 -90))
   (paddle1
      (view
         "02player.view")
      (kDamping 50)
      (kAccel 500.0)
      (Angle -5.78 28.65 90))
   (ActorFrames
      (idle 0 30)
      (idle 40 55)
      (runLeft 60 72)
      (runRight 80 92)
      (win 150 180)
      (lose 100 140))
   (paddle_pos 5.0e-2)
   (paddleLength 8.0)
   (PerspectiveShift 4.0)
   (ball
      (mesh
         "ball.mesh"))
   (MusicSpeeds 1 1.075 1.15 1.22)
   (TimeValueForTimeDec 5)
   (start_wait 2.0)
   (friction -0.17)
   (maxScore 10)
   (score_text
      "pong_score.text")
   (game_over_text 'FFE0B0"pong_gameover.text"')
   (Diff0
      (NumCrowd 4)
      (PointThreshold 2 4 6 9)
      (BallVelocities 35 40 45 50)
      (BallVelIncOnHit 3)
      (BaseMissRate 0.15)
      (MissRateInc 0.2)
      (MissMin 2.5)
      (MissMax 3.25)
      (RsponseRangeMin 0.6)
      (RsponseRangeMax 0.9))
   (Diff1
      (NumCrowd 3)
      (PointThreshold 2 4 6 9)
      (BallVelocities 45 50 55 60)
      (BallVelIncOnHit 3)
      (BaseMissRate 5.0e-2)
      (MissRateInc 0.11)
      (MissMin 2)
      (MissMax 2.75)
      (RsponseRangeMin 0.6)
      (RsponseRangeMax 0.8))
   (Diff2
      (NumCrowd 3)
      (PointThreshold 2 4 6 9)
      (BallVelocities 65 70 75 80)
      (BallVelIncOnHit 3)
      (BaseMissRate 3.0e-2)
      (MissRateInc 3.0e-2)
      (MissMin 2)
      (MissMax 2.75)
      (RsponseRangeMin 0.25)
      (RsponseRangeMax 0.45))
   (Diff3
      (NumCrowd 2)
      (PointThreshold 2 4 6 9)
      (BallVelocities 75 80 85 90)
      (BallVelIncOnHit 3)
      (BaseMissRate 1.0e-2)
      (MissRateInc 1.3e-2)
      (MissMin 1.25)
      (MissMax 1.75)
      (RsponseRangeMin 0.15)
      (RsponseRangeMax 0.35))
   (pitches1 60 72)
   (pitches2 55 67)
   (pitches3 48 60)
   (pitchmatch 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72)
   (anims PONG_ANIMS)
   (archetypes
      (PongArch
         (namespace 256 4096)
         (rnd
            "minigames/pong/crowd_male.rnd")
         (bone.servo
            PONG_CHANNELS
            (use_delta 1))
         (main.drv
            (anims 'ui::pong.cset'))
         (Heads
            "m_crowd_head1.mesh"
            "m_crowd_head2.mesh")
         (TorsoMats
            "player1_body1.mat"
            "player1_body2.mat")
         (Parts
            "M_crowd-pants.mesh"
            "M_crowd-pants.1.mesh"
            "M_crowd-pants.2.mesh"
            "M_crowd-torso.mesh"
            "M_crowd-torso.1.mesh"
            "M_crowd-torso.2.mesh"
            "M_crowd-torso.3.mesh"
            "M_crowd-torso.4.mesh"
            "M_crowd-torso.5.mesh"))
      (PongArchFemale
         (namespace 256 4096)
         (rnd
            "minigames/pong/crowd_female.rnd")
         (bone.servo
            PONG_CHANNELS
            (use_delta 1))
         (main.drv
            (anims 'ui::pong.cset'))
         (Heads
            "fm_crowd_head1.mesh"
            "fm_crowd_head2.mesh")
         (TorsoMats
            "player2_body1.mat"
            "player2_body2.mat")
         (Parts
            "FM_crowd-pants2.mesh"
            "FM_crowd-pants2.1.mesh"
            "FM_crowd-pants2.2.mesh"
            "FM_crowd-torso2.mesh"
            "FM_crowd-torso2.1.mesh"
            "FM_crowd-torso2.2.mesh"
            "FM_crowd-torso2.3.mesh"
            "FM_crowd-torso2.4.mesh"
            "FM_crowd-torso2.5.mesh")))
   (BirdFreq 600 1200)
   (BirdSpeed 20))
(Collector
   (Calibration
      (rnd_file
         "minigames/oldart/boxy.rnd")
      (view
         "minitest_menu.view")
      (samples
         (Sample1
            "High")
         (Sample2
            "Mid")
         (Sample3
            "Low")))
   (rnd_file
      "minigames/collector/collector.rnd")
   (view
      "venue.view")
   (rnd_file_hud
      "minigames/collector/collector_hud.rnd")
   (view_hud
      "hudcollector.view")
   (char_file
      "minigames/collector/player.rnd")
   (song_bpm 90)
   (bg
      (BGLevel0
         "minigames/collector/level1")
      (BGLevel1
         "minigames/collector/level1")
      (BGLevel2
         "minigames/collector/level1")
      (BGLevel3
         "minigames/collector/level2")
      (BGLevel4
         "minigames/collector/level2")
      (BGLevel5
         "minigames/collector/level2")
      (BGLevel6
         "minigames/collector/level3")
      (BGLevel7
         "minigames/collector/level3")
      (BGLevel8
         "minigames/collector/level3")
      (BGLevel9
         "minigames/collector/level4")
      (bank
         "minigames/collector/collector")
      (instrument 3))
   (filter 0.75)
   (Player
      (View
         "player.view")
      (kDamping 40.0)
      (kAccel 125.0))
   (ItemRadius 14)
   (ActorFrames
      (idle 0 71)
      (idle 80 104)
      (runLeft 110 326))
   (pitches1 60 72)
   (pitches2 54 66)
   (pitches3 48 60)
   (Timer 60)
   (PointThresholds 3000 6000 9000 14000 20000 27000 30000 35000 40000 10000000)
   (TimerBonus 0 0 5 4 4 4 3 3 3 3)
   (NumObstacles 1 3 1 1 3 1 1 5 1 10)
   (ObjQuickAppe 1 1 1 1 1 1 1 1 1 1)
   (ObjLife 8 8 6 6 4 2 3 2 1 3)
   (TimeWarn 5)
   (PickupSingTime 0)
   (ObjFlashTime 2)
   (ValidPlacments 0 4 6 8 9)
   (BGSpeed 1 1.05 1.1 1.15 1.2 1.25 1.3 1.35 1.4 1.45)
   (Objects
      "mc_obj_letter.view"
      "mc_obj_flowers.view"
      "mc_obj_envelope.view"
      "mc_obj_chocolates.view")
   (PointsPerObject 500 500 600 600 700 700 7 8 9 10)
   (Clock
      "mc_obj_watch.view")
   (ClockChance 0 0 100 10 10 10 100 10 0 0)
   (ClockPoints 350)
   (Bonus
      "mc_obj_cd.view")
   (BonusChance 0 0 0 100 10 5 0 10 0 100)
   (BonusTimeLife 6 6 6 20 4 4 4 4 4 3)
   (BonusPoints 200)
   (SwitchObj
      "mc_obj_swirly.view")
   (SwitchChance 0 5 0 0 5 5 0 20 100 0)
   (SwitchTimeLife 6 6 6 6 4 2 3 2 1 6)
   (SwitchPoints 850)
   (archetypes
      (CollectorArch
         (namespace 256 4096)
         (rnd
            "minigames/collector/player.rnd")
         (bone.servo
            COLLECTOR_CHANNELS
            (use_delta 1))
         (handlers
            (preload
               {main.drv
                  set_anims
                  {$this find_or_load COLLECTOR_ANIMS}})))))
(CollectorHarmony
   (Box
      (Mesh
         "obj_obstacle01.mesh")
      (Size 16 30 30)
      (Level0
         (Box0 0.5 -5.0e-2 0)
         (Box1 5.0e-2 -5.0e-2 0)
         (Box2 0.95 -5.0e-2 0))
      (Level1)
      (Level2
         (Box0 -0.1 0.5 1)
         (Box0 1.1 0.5 1)
         (Box0 0.5 0.65 0))
      (Level3
         (Box0 0.65 0.5 1)
         (Box0 0.35 0.5 1)
         (Box0 0.5 1.1 0)))
   (Timer 50)
   (PointThresholds 10 20 30 100)
   (TimerBonus 3 2 1 0)
   (NumObstacles 1 1 1 1)
   (ObjQuickMove 4 4 4 4)
   (ObjQuickAppe 2 2 2 2)
   (ObjLife 5 4 3 2)
   (TimeWarn 5)
   (PickupSingTime 2)
   (ObjFlashTime 2)
   (ValidPlacments 0 4 6 8 9)
   (BGSpeed 1 1.1 1.2 1.3))
(YoDude
   (Calibration
      (rnd_file
         "minigames/oldart/boxy.rnd")
      (view
         "minitest_menu.view")
      (samples
         (Sample1
            "High")
         (Sample2
            "Low")))
   (song_bpm 120)
   (view
      "stagedive.view")
   (rnd_file_hud
      "minigames/stagedive/stagedive_hud.rnd")
   (view_hud
      "stagedive_hud.view")
   (DudeFile
      "minigames/stagedive/dude.rnd")
   (YoFile
      "minigames/stagedive/yo.rnd")
   (RockFile
      "minigames/stagedive/rock.rnd")
   (bg
      (file
         "minigames/stagedive/stagedive")
      (bank
         "minigames/stagedive/stagedive")
      (instrument 3))
   (pitches1 60 67)
   (pitches2 48 55)
   (PitchThreshold 1.5)
   (Timer 60)
   (PointMult 1000)
   (WarnTime 5)
   (SoundWaitTweak 5.0e-2)
   (LaunchWaitTweak 5.0e-2)
   (SinglePlay
      (PointThresholds 0 3000 10000 20000)
      (JumperSpeeds 1.0 1.2 1.4 1.6)
      (SpawnMod 2)
      (BaseRunnerSpeed 1.2)
      (RunnerSpawnTiming 1 0.5 0.3 0.15))
   (TwoPlay
      (PointThresholds 0 3000 10000 20000)
      (JumperSpeeds 1.0 1.2 1.4 1.6)
      (SpawnMod 2)
      (BaseRunnerSpeed 1.2)
      (RunnerSpawnTiming 1 0.5 0.3 0.15))
   (Dudes
      "yo"
      "dude"
      "rock")
   (DudesBubbles
      "Yo!"
      "Dude!"
      "Rock!")
   (RunnerPitches1 60 64 67)
   (RunnerPitches2 48 52 55)
   (anims DUDE_ANIMS)
   (archetypes
      (yo
         (namespace 256 4096)
         (rnd
            "minigames/stagedive/yo.rnd")
         (bone.servo
            DUDE_CHANNELS
            (use_delta 1))
         (main.drv
            (anims 'main::dude.cset')))
      (dude
         (namespace 256 4096)
         (rnd
            "minigames/stagedive/dude.rnd")
         (anims DUDE_ANIMS)
         (bone.servo
            DUDE_CHANNELS
            (use_delta 1))
         (main.drv
            (anims 'main::dude.cset')))
      (rock
         (namespace 256 4096)
         (rnd
            "minigames/stagedive/rock.rnd")
         (bone.servo
            DUDE_CHANNELS
            (use_delta 1))
         (main.drv
            (anims 'main::dude.cset')))))
(calibration
   (pong
      (ranges
         (low mid high))
      (samples
         (file3
            "minigames/calibration/low_scale")
         (file2
            "minigames/calibration/mid_scale")
         (file1
            "minigames/calibration/high_scale")))
   (mem_collector
      (ranges
         (low mid high))
      (samples
         (file3
            "minigames/calibration/low_scale")
         (file2
            "minigames/calibration/mid_scale")
         (file1
            "minigames/calibration/high_scale")))
   (yo_dude_rock
      (ranges
         (low high))
      (samples
         (file2
            "minigames/calibration/low_scale")
         (file1
            "minigames/calibration/high_scale"))))
#define MINIGAME_PAUSE_SCREEN
((pause_screen
      {if_else
         {the_db is_challenge}
         {if_else
            {platform has_mic_gain}
            minigame_krc_pause
            minigame_krc_pause_nogain}
         {if_else
            {platform has_mic_gain}
            minigame_pause
            minigame_pause_nogain}}))
#define ONEMIC_MINIGAME_DATA
((num_players 1)
   (select_screen minigame_select_onemic)
   (username_screen minigame_username_onemic)
   (controller_setup_screen minigame_controllersetup_onemic)
   (difficulty_screen minigame_difficulty_onemic)
   (loading_screen enter_minigame_onemic)
   (ready_screen
      {if_else
         {platform has_mic_gain}
         minigame_ready_onemic
         minigame_ready_nogain_onemic})
   (mic_screen checkmic_pause_onemic)
   MINIGAME_PAUSE_SCREEN)
#define TWOMIC_MINIGAME_DATA
((num_players 2)
   (select_screen minigame_select_twomic)
   (username_screen minigame_username_twomic)
   (controller_setup_screen minigame_controllersetup_twomic)
   (difficulty_screen minigame_difficulty_twomic)
   (loading_screen enter_minigame_twomic)
   (ready_screen
      {if_else
         {platform has_mic_gain}
         minigame_ready_twomic
         minigame_ready_nogain_twomic})
   (mic_screen checkmic_pause_twomic)
   MINIGAME_PAUSE_SCREEN)
#define PONG_DATA
((name pong)
   (difficulty TRUE))
#define COLLECTOR_DATA
((name mem_collector)
   (difficulty FALSE))
#define YO_DUDE_DATA
((name yo_dude_rock)
   (difficulty FALSE))
(ui
   (pong
      ONEMIC_MINIGAME_DATA
      PONG_DATA
      (button pong.btn)
      (results_screen results_pong1p)
      (preview_image
         "venue_minigame_pong.png"))
   (pong2p
      TWOMIC_MINIGAME_DATA
      PONG_DATA
      (button pong2p.btn)
      (results_screen results_pong2p)
      (coop FALSE)
      (preview_image
         "venue_minigame_pong.png"))
   (collector
      TWOMIC_MINIGAME_DATA
      COLLECTOR_DATA
      (button collector.btn)
      (results_screen results_collector)
      (coop TRUE)
      (preview_image
         "venue_minigame_mc.png"))
   (YoDudePR
      ONEMIC_MINIGAME_DATA
      YO_DUDE_DATA
      (button yodude.btn)
      (results_screen results_yodude1p)
      (preview_image
         "venue_minigame_stagedive-1.png"))
   (YoDude2PR
      TWOMIC_MINIGAME_DATA
      YO_DUDE_DATA
      (button yodude2p.btn)
      (results_screen results_yodude2p)
      (coop FALSE)
      (preview_image
         "venue_minigame_stagedive-2.png")))