#ifdef HX_XBOX
(first_screen TITLE_SCREEN)
#else
#ifdef DEMO
(first_screen TITLE_SCREEN)
#else
(first_screen bootup_load)
#endif
#endif
(no_mic_cheat FALSE)
(attract_mode
   (Male03 american vegas)
   (Male02 drive beach)
   (Male05 idont cowboybar)
   (Male07 crazysmith mall)
   (Male04 playthat largeclub)
   (Male01 takeon beach)
   (Female06 crazy vegas)
   (Female03 fly rooftop)
   (Female02 foryou beach)
   (Female07 ilove largeclub)
   (Female01 material mall)
   (Female05 piecesof vegas)
   (Female04 gameof beach)
   (Female02 iwillalways rooftop))
#define PLATFORM_PS2_BUTTONS
((button_resource
      "krui/common_button_ps2.kr")
   (buttons
      (select
         (enums kPad_X)
         (mat
            "ps2_x.mat"))
      (back
         (enums kPad_Tri kPad_Select)
         (mat
            "ps2_tri.mat"))
      (random
         (enums kPad_Circle)
         (mat
            "ps2_circle.mat"))
      (toggle
         (enums kPad_Circle)
         (mat
            "ps2_circle.mat"))
      (mic
         (enums kPad_Square)
         (mat
            "ps2_square.mat"))
      (vox
         (enums kPad_Tri)
         (mat
            "ps2_tri.mat"))
      (music
         (enums kPad_Circle)
         (mat
            "ps2_circle.mat"))
      (earpiece
         (enums kPad_X)
         (mat
            "ps2_x.mat"))
      (exit
         (enums kPad_Square)
         (mat
            "ps2_square.mat"))
      (remove
         (enums kPad_Square)
         (mat
            "ps2_square.mat"))
      (reset
         (enums kPad_Circle)
         (mat
            "ps2_circle.mat"))
      (rotate_left
         (enums kPad_L1)
         (mat
            "ps2_l1.mat"))
      (rotate_right
         (enums kPad_R1)
         (mat
            "ps2_r1.mat"))
      (left
         (enums kPad_DLeft)
         (mat
            "ps2_left.mat"))
      (right
         (enums kPad_DRight)
         (mat
            "ps2_right.mat"))
      (kb_enter
         (enums kPad_Circle)
         (mat
            "ps2_circle.mat"))
      (kb_space
         (enums kPad_Square)
         (mat
            "ps2_square.mat"))
      (kb_shift
         (enums kPad_R2)
         (mat
            "ps2_r2.mat"))
      (kb_back
         (enums kPad_L2)
         (mat
            "ps2_l2.mat"))
      (kb_cursor_left
         (enums kPad_L1)
         (mat
            "ps2_l1.mat"))
      (kb_cursor_right
         (enums kPad_R1)
         (mat
            "ps2_r1.mat"))))
#define PLATFORM_PS2_MESSAGES
((demo_loading
      {localize demo_loading_ps2})
   (controller_loss_onemic
      {localize controller_loss_ps2})
   (controller_loss_twomic
      {localize controller_loss_ps2})
   (controller_status_onemic
      {localize controller_status_ps2})
   (controller_status_twomic
      {localize controller_status_ps2})
   (mic_loss_onemic
      {localize mic_loss_ps2_onemic})
   (mic_loss_twomic
      {localize mic_loss_ps2_twomic})
   (mic_status_onemic
      {localize mic_status_ps2})
   (mic_status_twomic
      {localize mic_status_ps2}))
(platforms
   (pc
      (eyetoy TRUE)
      (eyetoy_video FALSE)
      (earpiece FALSE)
      (mic_gain TRUE)
      (ddr_demo TRUE)
      (controller_setup FALSE)
      (num_controllers 2)
      PLATFORM_PS2_BUTTONS
      PLATFORM_PS2_MESSAGES
      (first_marketing_screen marketing_ps2green)
      (second_marketing_screen marketing_ps2orange))
   (ps2
      (eyetoy TRUE)
      (eyetoy_video TRUE)
      (earpiece TRUE)
      (mic_gain TRUE)
      (ddr_demo TRUE)
      (controller_setup FALSE)
      (num_controllers 2)
      PLATFORM_PS2_BUTTONS
      PLATFORM_PS2_MESSAGES
      (first_marketing_screen marketing_ps2green)
      (second_marketing_screen marketing_ps2orange))
   (xbox
      (button_resource
         "krui/common_button_xb.kr")
      (eyetoy FALSE)
      (eyetoy_video FALSE)
      (earpiece FALSE)
      (mic_gain FALSE)
      (ddr_demo TRUE)
      (controller_setup TRUE)
      (num_controllers 4)
      (buttons
         (select
            (enums kPad_X)
            (mat
               "xbox_a.mat"))
         (back
            (enums kPad_Tri kPad_Select)
            (mat
               "xbox_b.mat"))
         (random
            (enums kPad_Circle)
            (mat
               "xbox_y.mat"))
         (toggle
            (enums kPad_Circle)
            (mat
               "xbox_y.mat"))
         (exit
            (enums kPad_Square)
            (mat
               "xbox_x.mat"))
         (mic
            (enums kPad_Square)
            (mat
               "xbox_x.mat"))
         (vox
            (enums kPad_Tri)
            (mat
               "xbox_b.mat"))
         (music
            (enums kPad_Circle)
            (mat
               "xbox_y.mat"))
         (earpiece
            (enums kPad_X)
            (mat
               "xbox_a.mat"))
         (remove
            (enums kPad_Square)
            (mat
               "xbox_x.mat"))
         (reset
            (enums kPad_Circle)
            (mat
               "xbox_y.mat"))
         (rotate_left
            (enums kPad_L1)
            (mat
               "xbox_l.mat"))
         (rotate_right
            (enums kPad_R1)
            (mat
               "xbox_r.mat"))
         (left
            (enums kPad_DLeft)
            (mat
               "xbox_left.mat"))
         (right
            (enums kPad_DRight)
            (mat
               "xbox_right.mat"))
         (kb_enter
            (enums kPad_Circle)
            (mat
               "xbox_y.mat"))
         (kb_space
            (enums kPad_Square)
            (mat
               "xbox_x.mat"))
         (kb_back
            (enums kPad_L1)
            (mat
               "xbox_l.mat"))
         (kb_shift
            (enums kPad_R1)
            (mat
               "xbox_r.mat"))
         (kb_cursor_left
            (enums kPad_L2)
            (mat
               "xbox_white.mat"))
         (kb_cursor_right
            (enums kPad_R2)
            (mat
               "xbox_black.mat")))
      (demo_loading
         {localize demo_loading_xbox})
      (controller_loss_onemic
         {sprintf
            {localize controller_loss_xbox_onemic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}})
      (controller_loss_twomic
         {sprintf
            {localize controller_loss_xbox_twomic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}
            {'+'
               1
               {controller_mgr get_mic_port 1}}})
      (controller_status_onemic
         {sprintf
            {localize controller_status_xbox_onemic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}})
      (controller_status_twomic
         {sprintf
            {localize controller_status_xbox_twomic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}
            {'+'
               1
               {controller_mgr get_mic_port 1}}})
      (mic_loss_onemic
         {sprintf
            {localize mic_loss_xbox_onemic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}})
      (mic_loss_twomic
         {sprintf
            {localize mic_loss_xbox_twomic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}
            {'+'
               1
               {controller_mgr get_mic_port 1}}})
      (mic_status_onemic
         {sprintf
            {localize mic_status_xbox_onemic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}})
      (mic_status_twomic
         {sprintf
            {localize mic_status_xbox_twomic}
            {'+'
               1
               {controller_mgr get_mic_port 0}}
            {'+'
               1
               {controller_mgr get_mic_port 1}}})
      (first_marketing_screen marketing_xboxgreen)
      (second_marketing_screen marketing_xboxorange))
   (gc
      (button_resource
         "krui/common_button_gc.kr")
      (eyetoy FALSE)
      (eyetoy_video FALSE)
      (earpiece FALSE)
      (mic_gain FALSE)
      (ddr_demo FALSE)
      (controller_setup FALSE)
      (num_controllers 4)
      (buttons
         (select
            (enums kPad_X)
            (mat
               "gc_a.mat"))
         (back
            (enums kPad_Tri)
            (mat
               "gc_b.mat"))
         (random
            (enums kPad_Circle)
            (mat
               "gc_x.mat"))
         (toggle
            (enums kPad_Circle)
            (mat
               "gc_x.mat"))
         (exit
            (enums kPad_Square)
            (mat
               "gc_y.mat"))
         (remove
            (enums kPad_Square)
            (mat
               "gc_y.mat"))
         (reset
            (enums kPad_Circle)
            (mat
               "gc_x.mat"))
         (rotate_left
            (enums kPad_L1)
            (mat
               "gc_l.mat"))
         (rotate_right
            (enums kPad_R1)
            (mat
               "gc_r.mat"))
         (left
            (enums kPad_DLeft)
            (mat
               "gc_left.mat"))
         (right
            (enums kPad_DRight)
            (mat
               "gc_right.mat"))
         (mic
            (enums kPad_Square)
            (mat
               "gc_x.mat"))
         (vox
            (enums kPad_Tri)
            (mat
               "gc_b.mat"))
         (music
            (enums kPad_Circle)
            (mat
               "gc_y.mat"))
         (earpiece
            (enums kPad_X)
            (mat
               "gc_a.mat"))
         (kb_enter
            (enums kPad_Circle)
            (mat
               "gc_x.mat"))
         (kb_space
            (enums kPad_Square)
            (mat
               "gc_y.mat"))
         (kb_back
            (enums kPad_L1)
            (mat
               "gc_l.mat"))
         (kb_shift
            (enums kPad_R1)
            (mat
               "gc_r.mat"))
         (kb_cursor_left
            (enums -1)
            (mat
               ""))
         (kb_cursor_right
            (enums -1)
            (mat
               "")))
      (controller_loss_onemic
         {localize controller_loss_gc})
      (controller_loss_twomic
         {localize controller_loss_gc})
      (controller_status_onemic
         {localize controller_status_gc})
      (controller_status_twomic
         {localize controller_status_gc})
      (mic_loss_onemic
         {localize mic_loss_gc_onemic})
      (mic_loss_twomic
         {localize mic_loss_gc_twomic})
      (mic_status_onemic
         {localize mic_status_gc})
      (mic_status_twomic
         {localize mic_status_gc})))