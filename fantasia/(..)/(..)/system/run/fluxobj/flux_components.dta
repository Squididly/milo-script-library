#include flux_macros.dta
(WorldSelectTileCom
   (description
      "Handles the actuation message from WorldSelectCom.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (is_unlocked
         bool
         (read_only TRUE)
         (help
            "The world is currently locked but visible in the world select."))
      (is_revealed
         bool
         (read_only TRUE)
         (help
            "The world has been revealed in the world select."))
      (discovery_level
         symbol
         (disk_prop)
         (list $flux_worlds_with_null)
         (help
            "The discovery level to go to."))
      (can_select
         bool
         (help
            "Is this tile selectable in the world select?"))
      (select
         script
         (script
            {$this select})))
   (events_in
      (focus
         (editor
            (has_focus
               bool
               (help
                  "The tile has gained focus.")))
         (help
            "Called by CarouselSelector to indicate focus."))
      (select
         (help
            "Inform the tile that it should actuate itself.")))
   (events_out
      (selected
         (help
            "Sent when the tile has been selected."))))
(ApplicationStateCom
   (description
      "Handles the suspend and activation events from the system.")
   (user_can_add disk)
   (required_classes UIScreen))
(CarouselSelectorCom
   (description
      "Coordinates a set of object along a spline and provides a way to navigate them.")
   (user_can_add disk)
   (editor
      (spline
         object
         (class Spline)
         (disk_prop)
         (help
            "The spline for the tiles to follow."))
      (spline_as_line
         bool
         (no_test)
         (disk_prop)
         (help
            "Treat the spline as a line by using its first and last control points for more accuracy."))
      (spline_length
         float
         (read_only TRUE)
         (help
            "The length of the set spline."))
      (scroll_position
         float
         (read_only TRUE)
         (help
            "The scrolling position in tile space."))
      (is_stopped
         bool
         (read_only TRUE)
         (help
            "The carousel is not moving at all - neither paging nor spinning via scroll_velocity."))
      (focal_tile
         object
         (class Draw)
         (components
            (SplineMovementCom))
         (read_only TRUE)
         (disk_prop)
         (help
            "The tile currently nearest to the focal point."))
      (focal_index
         int
         (read_only TRUE)
         (help
            "The index of the focal tile."))
      (tiles
         (indent
            (data_provider
               object
               (class CarouselDataProvider)
               (disk_prop)
               (help
                  "A provider for the tiles and associated data."))
            (tiles
               (array
                  object
                  (class Draw)
                  (components
                     (SplineMovementCom)))
               (read_only TRUE)
               (disk_prop)
               (help
                  "The tiles to navigate between."))
            (focal_point
               float
               (range 0.0 1.0)
               (slider)
               (disk_prop)
               (help
                  "The position along the spline to center the tiles."))
            (fill_spline
               bool
               (disk_prop)
               (help
                  "Automatically widen tile width to evenly distribute tiles on spline if not enough tiles."))))
      (scrolling
         (indent
            (scroll_velocity
               float
               (no_test serialize)
               (help
                  "The velocity to move the tiles along the spline."))
            (scroll_friction
               float
               (range 0.0 10.0)
               (slider)
               (disk_prop)
               (help
                  "The friction coefficient to apply to the velocity over time."))
            (friction_enabled
               bool
               (no_test serialize)
               (help
                  "Apply friction to the scroll velocity over time."))
            (terminal_velocity
               float
               (disk_prop)
               (help
                  "The maximum velocity the selector may scroll. 0 is no limit."))))
      (paging
         (indent
            (paginate
               bool
               (disk_prop)
               (help
                  "Indicates if the selector should never be stopped in between tiles and instead move to the nearest one to the focal point."))
            (paging_velocity_threshold
               float
               (disk_prop)
               (alias
                  "Velocity Threshold")
               (help
                  "The scrolling speed to activate paging at."))
            (paging_ease_time
               float
               (disk_prop)
               (alias
                  "Ease Time")
               (help
                  "The factor of acceleration to use when accelerating toward a target page."))
            (paging_ease_time_per_tile
               bool
               (disk_prop)
               (alias
                  "Apply Ease Time Per Tile")
               (help
                  "Specifies whether the ease time is applied per-tile or per-paging operation."))
            (paging_ease_function
               int
               (disk_prop)
               (list EASING_TYPES)
               (alias
                  "Easing Function")
               (help
                  "The easing function to use when paging."))
            (paging_ease_param_1
               float
               (disk_prop)
               (alias
                  "Easing Param 1")
               (help
                  "A parameter for the selected easing function (may be ignored)."))
            (paging_ease_param_2
               float
               (disk_prop)
               (alias
                  "Easing Param 2")
               (help
                  "A parameter for the selected easing function (may be ignored)."))))
      (settling
         (indent
            (settling_window_size
               float
               (disk_prop)
               (alias
                  "Window Size")
               (help
                  "Distance to each side of a tile that begins slowing the carousel down while settling. 0 uses tile width"))
            (max_settle_deceleration
               float
               (disk_prop)
               (alias
                  "Max Deceleration")
               (help
                  "The fastest that the carousel will decelerate when trying to settle on a tile. 0 is no limit."))
            (max_settle_acceleration
               float
               (disk_prop)
               (alias
                  "Max Acceleration")
               (help
                  "The fastest that the carousel will accelerate trying to settle on a tile."))))
      (testing
         (indent
            (select
               script
               (alias
                  "Select")
               (script
                  {$this select}))
            (page_forward
               script
               (alias
                  "Page Forward")
               (script
                  {$this page_forward}))
            (page_back
               script
               (alias
                  "Page Back")
               (script
                  {$this page_back}))
            (page_to_start
               script
               (alias
                  "Page To Start")
               (script
                  {$this
                     page_to
                     [starting_tile]})))))
   (events_in
      (page_forward
         (help
            "Page the selector forward to the next tile."))
      (page_back
         (help
            "Page the selector backward to the previous tile."))
      (page_to
         (editor
            (index
               int
               (help
                  "The tile index to page to.  May be negative to indicate counting from the last tile (-1 is last)")))
         (help
            "Page the selector to the tile at the specified index in the shortest direction."))
      (settle_on
         (editor
            (index
               int
               (help
                  "The tile index to settle on.  May be negative to indicate counting from the last tile (-1 is last)")))
         (help
            "Uses the carousel's current velocity to attempt to settle on a tile, using max_settle_acceleration."))
      (stop_on
         (editor
            (index
               int
               (help
                  "The tile index to stop on.  May be negative to indicate counting from the last tile (-1 is last)")))
         (help
            "Stops an already-moving carousel on a tile. Velocity should be set before calling this."))
      (select
         (help
            "Select the current focal tile."))))
(CarouselObjectCom
   (description
      "Provides control of a CarouselSelector via cursor.")
   (user_can_add disk)
   (editor
      (co_carousel
         object
         (components
            (CarouselObjectCom))
         (read_only TRUE)
         (help
            "The parent carousel."))
      (co_velocity
         float
         (read_only TRUE)
         (help
            "The velocity of the page on the carousel."))
      (co_has_focus
         bool
         (read_only TRUE)
         (help
            "Does this object currently have focus in the carousel?"))
      (co_distance_to_focal
         float
         (read_only TRUE)
         (help
            "The normalized distance to the edge in the carousel. [0..1]"))
      (co_ignore_focus
         bool
         (help
            "Should this tile be ignore by the carousel for focus purposes? This includes paging."))))
(CarouselControlCom
   (description
      "Provides control of a CarouselSelector via cursor.")
   (user_can_add disk)
   (editor
      (engage_com
         object
         (components
            (DiscoveryRecordEngageCom))
         (disk_prop)
         (help
            "The RecordEngagementCom to use for interaction."))
      (active
         bool
         (help
            "Pay attention to engagement com."))
      (movement_scale
         float
         (help
            "Amount to scale the cursor movement by."))
      (braking_threshold
         float
         (help
            "The average speed that the cursor must fall below to begin braking while engaged."))
      (braking_force
         float
         (range 0.0 1000.0)
         (help
            "The amount of braking force to apply while braking the scroll velocity.")))
   (events_in
      (select
         (help
            "Perform a selection on the controlled carousel."))))
(WorldSelectPagingCom
   (description
      "Allows paging the World Select to a specific world tile.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (page_to_level
         symbol
         (list $flux_worlds_with_null)
         (no_test serialize)
         (help
            "On change, this property will cause the WorldSelect to begin paging."))
      (jump_to_level
         symbol
         (list $flux_worlds_with_null)
         (no_test serialize)
         (help
            "When set, this property will cause the world select to jump to the specified world."))
      (toggle_reveal
         script
         (script
            {$this toggle_focal_revealed})
         (help
            "Toggles the reveal state of the focused tile (does not save to profile)."))
      (reveal_all
         script
         (script
            {$this reveal_all})
         (help
            "Sets all tiles to be revealed (does not save to profile)."))
      (conceal_all
         script
         (script
            {$this conceal_all})
         (help
            "Sets all tiles to be concealed (does not save to profile)."))
      (reset_reveal_all
         script
         (script
            {$this reset_reveal_all})
         (help
            "Resets the reveal state of the tiles to the stored profile value.")))
   (events_in
      (page_to_world
         (editor
            (world
               symbol
               (list $flux_worlds_with_null)
               (help
                  "The world to page to.")))
         (help
            "Pages the WorldSelect to the given tile if it exists."))
      (page_to_world_over_duration
         (editor
            (world
               symbol
               (list $flux_worlds_with_null)
               (help
                  "The world to page to."))
            (num_seconds
               float
               (help
                  "The number of seconds that the paging takes.")))
         (help
            "Pages the WorldSelect to the given tile over the specified duration, if it exists."))
      (reveal
         (editor
            (world
               symbol
               (list $flux_worlds_with_null)
               (help
                  "The world to reveal.")))
         (help
            "Reveal the given world select tile."))
      (reveal_all
         (help
            "Sets all tiles to be revealed (does not save to profile)."))
      (conceal_all
         (help
            "Sets all tiles to be concealed (does not save to profile)."))
      (reset_reveal_all
         (help
            "Resets the reveal state of the tiles to the stored profile value."))))
(LevelSelectScreenCom
   (description
      "Component to coordinate level select lists")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor))
(GestureBeatmatchDirectorCom
   (description
      "Component to add to a scene to direct a gesture beatmatch episode")
   (user_can_add disk)
   (required_classes UIScreen)
   (editor
      (song
         object
         (class Song)
         (help
            "The song to base gameplay on")
         (no_test))
      (song_name
         symbol
         (list
            {song_mgr get_song_list TRUE})
         (no_test)
         (history FALSE)
         (help
            "Name of the song to be loaded dynamically")
         (no_test))
      (load_song
         script
         (script
            {$this load_song})
         (custom_history)
         (help
            "Load the specified song")
         (no_test))
      (slots_enabled
         bitfield
         (list FLUX_TARGET_SLOTS_ENABLED)
         (no_test)
         (history FALSE)
         (help
            "You must have at least 1 slot enabled"))
      (manipulators_enabled
         bitfield
         (list MANIPULATOR_TYPES_ENABLED)
         (no_test)
         (history FALSE)
         (help
            "Which manipulators have been unlocked"))
      (slot
         int
         (list FLUX_TARGET_SLOTS_OPTIONAL)
         (help
            "current authored slot")
         (no_test)
         (history FALSE))
      (part
         int
         (list FLUX_TARGET_PARTS)
         (help
            "current authored stem")
         (no_test)
         (history FALSE))
      (sync_song_cues
         script
         (script
            {$this sync_song})
         (custom_history))
      (start_song
         script
         (script
            {$this start_song FALSE})
         (custom_history))
      (start_song_builder
         script
         (script
            {$this start_song TRUE})
         (custom_history))
      (moving_target_draw_debug
         bool
         (no_test)
         (help
            "Draw flight paths for active moving targets"))
      (score
         int
         (help
            "Player score")
         (no_test))
      (success_rate
         float
         (no_test)
         (help
            "Fraction of targets hit"))
      (stars
         int
         (no_test)
         (help
            "Success rate rating (0-6)"))
      (multiplier
         int
         (help
            "How much base scores are multiplied by")
         (no_test))
      (streak
         int
         (help
            "How many hits in a row the player has")
         (no_test))
      (phrase_progress
         float
         (no_test)
         (help
            "What fraction of cues have been hit in the current phrase?"))
      (section_progress
         float
         (no_test)
         (help
            "What fraction of cues have been hit in the current section?"))
      (color_id
         int
         (list FLUX_TARGET_COLORS)
         (read_only TRUE)
         (no_test)
         (help
            "Color of currently selected slot"))
      (num_players
         int
         (range 1 2)
         (help
            "How many players? (1 or 2)"))
      (song_title
         string
         (read_only TRUE)
         (help
            "Loaded song's title"))
      (song_artist
         string
         (read_only TRUE)
         (help
            "Loaded song's artist"))
      (mix_1_description
         string
         (read_only TRUE)
         (help
            "Blue mix's description"))
      (mix_2_description
         string
         (read_only TRUE)
         (help
            "Pink mix's description"))
      (mix_3_description
         string
         (read_only TRUE)
         (help
            "Green mix's description"))
      (has_current_goal
         bool
         (read_only TRUE)
         (help
            "Is there a goal we're working on?"))
      (current_goal_title
         symbol
         (read_only TRUE)
         (help
            "Title token of current goal"))
      (current_goal_description
         string
         (read_only TRUE)
         (help
            "Description of current goal"))
      (current_goal_mix
         int
         (list FLUX_TARGET_MIXES_OPTIONAL)
         (read_only TRUE)
         (help
            "Which mix will be unlocked by the current goal"))
      (current_goal_mix_name
         string
         (read_only TRUE)
         (help
            "name of the mix that will be unlocked by the current goal"))
      (current_goal_tutorial
         symbol
         (read_only TRUE)
         (help
            "which tutorial popup to show for the current goal"))
      (current_goal_tutorial_vo
         symbol
         (read_only TRUE)
         (help
            "which tutorial vo to play for the current goal"))
      (current_goal_progress
         string
         (read_only TRUE)
         (help
            "Goal counter text"))
      (current_goal_complete
         bool
         (read_only TRUE)
         (help
            "Is this goal finished?"))
      (unlocked_slot
         int
         (list FLUX_TARGET_SLOTS_OPTIONAL)
         (help
            "slot that was just unlocked (usually none)")
         (no_test)
         (history FALSE))
      (song_builder_state
         int
         (list SONG_BUILDER_STATES)
         (read_only TRUE)
         (no_test)
         (help
            "state of the song builder"))
      (finished_song
         bool
         (read_only TRUE)
         (help
            "has the song ended"))
      (target_pool
         object
         (class EntityPool)
         (help
            "EntityPool of Targets"))
      (target_goal_pool
         object
         (class EntityPool)
         (help
            "EntityPool of destination lines"))
      (push_target_goal_pool
         object
         (class EntityPool)
         (help
            "EntityPool of z-push destination lines"))
      (choice_entity
         object
         (class Entity)
         (components
            (ChoiceTargetCom))
         (help
            "Entity to use for choice cues"))
      (moving_target_gravity
         float
         (range -250.0 -1.0)
         (help
            "Gravity for moving target flight path, MUST BE NEGATIVE."))
      (moving_target_time_warp
         float
         (range 1.0 10.0)
         (help
            "Higher values make targets hang in the air longer."))
      (jump_to_manipulator_1
         script
         (script
            {$this jump_to_manipulator 0}))
      (jump_to_manipulator_2
         script
         (script
            {$this jump_to_manipulator 1}))
      (force_stay_in_manipulator
         bool
         (no_test)
         (history FALSE))
      (forced_choice_player
         int
         (list
            (-1 0 1))
         (no_test)
         (history FALSE)
         (help
            "force one player to get the choices"))
      (forced_choice
         int
         (list FLUX_TARGET_SLOTS_OPTIONAL)
         (no_test)
         (history FALSE)
         (help
            "force a certain choice to be picked regardless of autoplay setting"))
      (forced_autoplay
         int
         (list FLUX_AUTOPLAY_MODES)
         (no_test)
         (history FALSE)
         (help
            "force autoplay temporarily")))
   (events_in
      (start_song
         (editor
            (use_songbuilder
               bool
               (help
                  "Should we show songbuilder?")))
         (help
            "start the song"))
      (song_exit
         (help
            "Send this event when the outro sequence is complete and it's time to go to the next screen"))
      (release_hedron_points
         (help
            "Send this event when animating hedron points into main score"))
      (request_tutorial
         (editor
            (tutorial
               symbol
               (help
                  "name of the tutorial to show"))
            (show_in_multiplayer
               bool
               (help
                  "should this be shown in multiplayer?"))
            (show_past_initial_phase
               bool
               (help
                  "should this be shown in scout phase?")))
         (help
            "Show a JIT tutorial tip")))
   (events_out
      (TARGET_HIT)
      (TARGET_PASS)
      (choice_hit
         (editor
            (slot_chosen
               int
               (list FLUX_TARGET_SLOTS)
               (no_test))))
      (choice_pass)
      (phrase_finished
         (editor
            (success
               bool
               (help
                  "Was the phrase completed?")))
         (help
            "A phrase has just been completed"))
      (section_end_hit
         (help
            "The final cue of a section was just hit"))
      (section_end_pass
         (help
            "The final cue of a section was just missed"))
      (pulse_intro
         (help
            "Play the pulse intro"))
      (song_start
         (help
            "The song has begun (the real song, not songbuilder)"))
      (song_end
         (help
            "The song is over, go on to the postgame screen"))
      (sustain_begin)
      (sustain_failed)
      (sustain_success)
      (hedron_begin
         (help
            "A hedron has just come up"))
      (hedron_failed
         (help
            "A hedron was just failed"))
      (hedron_success
         (help
            "A hedron was been completed but points have not been awarded yet"))
      (mix_unlocked
         (editor
            (unlocked_mix
               int
               (list FLUX_TARGET_MIXES)
               (no_test)
               (help
                  "Type of the mix unlocked"))
            (unlocked_mix_name
               string
               (help
                  "Name of the mix unlocked")))
         (help
            "The player has unlocked a mix and can now choose it"))
      (goal_achieved
         (editor
            (goal_achieved
               string
               (help
                  "What goal the player just achieved")))
         (help
            "The player has just achieved a goal that does not unlock a mix"))))
(GBMGesturesCom
   (description
      "Component to add to a scene to detect beatmatch gestures")
   (user_can_add TRUE)
   (required_classes UIScreen Entity)
   (editor
      (smoothing
         (indent
            (pos_data_smoothing float)
            (pos_trend_smoothing float))
         (help
            "Value smoothing parameters"))))
(HandDistGestureCom
   (description
      "Component that exposes information about the distance between the players hands, normalized by arm length")
   (user_can_add TRUE)
   (required_classes Scene Entity)
   (editor
      (hand_dist_smoothing
         float
         (range 0.0 1.0)
         (help
            "From 0 to 1, the amount of smoothing to apply to hand dist outputs. 0 is no smoothing, and 1 is totally smoothed"))
      (hand_dist_x
         float
         (no_test)
         (help
            "The X distance between hands.  Normalized by a single arm length, so values between 0 and 2 should be reasonable"))
      (hand_dist_y
         float
         (no_test)
         (help
            "The Y distance between hands.  Normalized by a single arm length, so values between 0 and 2 should be reasonable"))
      (hand_dist_z
         float
         (no_test)
         (help
            "The Z distance between hands.  Normalized by a single arm length, so values between 0 and 2 should be reasonable"))
      (hand_dist
         float
         (no_test)
         (help
            "The total distance between hands, for convenience.  normalized by a single arm length, so values between 0 and 2 should be reasonable"))))
(RadialHandsGestureCom
   (description
      "Implements a radial gesture interface, exposing position of hands as an angle/radius relative to a circle centered around the chest area")
   (user_can_add TRUE)
   (required_classes Scene Entity PhysCursorController)
   (editor
      ('RadialHands Inputs'
         (indent
            (chest_center
               float
               (range 0.0 1.0)
               (help
                  "From 0 to 1, where we place the center of the circle along the spine.  0 is at the hip center, and 1 is at the neck"))
            (chest_h_offset
               float
               (range 0.0 1.0)
               (help
                  "from 0 to 1, the center point of the circle is offset horizontally for each hand. 0 is on the spine, 1 a full shoulder width offset"))
            (rhand_smoothing
               float
               (range 0.0 1.0)
               (help
                  "Smoothing applied to right hand angle output, 0 being no smoothing, and 1 being maximum smoothing"))
            (lhand_smoothing
               float
               (range 0.0 1.0)
               (help
                  "Smoothing applied to left hand angle output, 0 being no smoothing, and 1 being maximum smoothing"))
            (rhand_radii_smoothing
               float
               (range 0.0 1.0)
               (help
                  "Smoothing applied to right hand radii output, 0 being no smoothing, and 1 being maximum smoothing"))
            (lhand_radii_smoothing
               float
               (range 0.0 1.0)
               (help
                  "Smoothing applied to left hand radii output, 0 being no smoothing, and 1 being maximum smoothing"))
            (hand_radii_gain
               float
               (range 0.1 4.0)
               (read_only $this is_forced_hand_radii_gain)
               (help
                  "Increases or decreased the distance the needs to move from circle center to push the hand radii outputs through their range"))))
      ('RadialHands Outputs'
         (indent
            (rhand_angle
               float
               (range 0.0 360.0)
               (no_test)
               (help
                  "in degrees, the angle around the circle for the right hand. 0 starts at positive y, going clockwise"))
            (lhand_angle
               float
               (range 0.0 360.0)
               (no_test)
               (help
                  "in degrees, the angle around the circle for the left hand. 0 starts at positive y, going clockwise"))
            (rhand_radii
               float
               (range 0.0 1)
               (no_test)
               (help
                  "from 0 to 1, how far the right hand is from the center of the circle.  1 is a full arm's length..."))
            (lhand_radii
               float
               (range 0.0 1)
               (no_test)
               (help
                  "from 0 to 1, how far the left hand is from the center of the circle.  1 is a full arm's length..."))
            (rhand_angular_velocity
               float
               (no_test)
               (help
                  "In degrees/second, how fast is our right hand spinning? (unsmoothed)"))
            (lhand_angular_velocity
               float
               (no_test)
               (help
                  "In degrees/second, how fast is our left hand spinning? (unsmoothed)"))
            (rhand_radial_velocity
               float
               (no_test)
               (help
                  "How fast is our left hand moving radially? (unsmoothed)"))
            (lhand_radial_velocity
               float
               (no_test)
               (help
                  "How fast is our left hand moving radially? (unsmoothed)"))))))
(PhysicsTrackingCom
   (description
      "Component that allows a rigidbody to track a position and velocity linearly and rotationally")
   (user_can_add TRUE)
   (required_classes RigidBody)
   (editor
      (track_position
         bool
         (help
            "Should the rigid body track a position?"))
      (target_position
         VECTOR3
         (help
            "What position is tracked?"))
      (target_pos_trans
         object
         (class Trans)
         (help
            "Optional Trans to track the position of.  Will use the 'target_position' property if this is not specified"))
      (target_velocity
         VECTOR3
         (help
            "What velocity is tracked?"))
      (position_kp
         float
         (help
            "Scales how much force does the object get pulled with towards its target position"))
      (position_kd
         float
         (help
            "Scales how much force does the object get pulled with towards its target velocity"))
      (output_pos_arrival
         bool
         (help
            "Should we output when we arrive within a threshold distance of the destination?"))
      (arrive_dist_thresh
         float
         (hide
            {!
               [output_pos_arrival]})
         (help
            "When we are within this distance of destination, we say we've arrived"))
      (arrive_settle_time
         float
         (units
            "secs")
         (hide
            {!
               [output_pos_arrival]})
         (help
            "How many seconds do we need to be within arrival distance threshold to say we've arrived.  Should ensure we're settled at the destination rather than passing through it"))
      (has_pos_arrived
         bool
         (hide
            {!
               [output_pos_arrival]})
         (read_only TRUE)
         (no_test)
         (help
            "Are we close to our destination? (within the arrive_dist_thresh)"))
      (track_rotation
         bool
         (help
            "Should the rigid body track a rotation?"))
      (target_rotation
         QUAT
         (help
            "What rotation is tracked?"))
      (target_rot_trans
         object
         (class Trans)
         (help
            "Optional trans to track the rotation of.  Will use 'target_rotation' property if this is not specified."))
      (target_angular_velocity
         VECTOR3
         (help
            "What angular velocity is tracked?"))
      (rotation_kp
         float
         (help
            "Scales how much force does the object get pulled with towards its target rotation"))
      (rotation_kd
         float
         (help
            "Scales how much force does the object get pulled with towards its target angular velocity"))
      (use_world_xfm
         bool
         (help
            "Should these targets be in world coordinates? (As opposed to relative to the containing entity's parent)"))
      (axes_scale
         VECTOR3
         (help
            "Scale factor to forces applied on each world axis"))
      (project_to_normal
         bool
         (help
            "Enable mode where we project any forces onto a vector supplied by the user"))
      (normal_to_project_onto
         VECTOR3
         (help
            "The normalized vector to project any forces onto, cancelling any component in the force NOT in this direction")))
   (events_out
      (on_position_arrive
         (help
            "Have we arrived within a threshold distance of our destination?"))))
(DiscoveryKinectInputCom
   (description
      "Component that provides filtered Kinect data")
   (user_can_add TRUE)
   (required_classes Scene UIScreen)
   (editor
      (has_skeleton
         bool
         (read_only TRUE)
         (no_test)
         (help
            "True if the Kinect currently sees a skeleton that it can track, false otherwise."))
      (input_context
         int
         (list DISCOVERY_INPUT_CONTEXT_ENUM)
         (read_only TRUE)
         (no_test)
         (help
            "The active input context; this defines what gestures we'll look for."))
      ('Hand position'
         (indent
            (handedness
               int
               (list SKELETON_HANDS)
               (read_only TRUE)
               (no_test)
               (help
                  "What is our current cursor hand?"))
            (rhand_down
               bool
               (read_only TRUE)
               (no_test)
               (help
                  "True if the player's right hand is lowered, false otherwise."))
            (lhand_down
               bool
               (read_only TRUE)
               (no_test)
               (help
                  "True if the player's left hand is lowered, false otherwise."))
            ('Raw hand position'
               (indent
                  (rhand_raw_x
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "The raw x-coordinate of the player's right hand in the right hand frame coordinate system."))
                  (rhand_raw_y
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "The raw y-coordinate of the player's right hand in the right hand frame coordinate system."))
                  (rhand_raw_z
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "The raw z-coordinate of the player's right hand in the right hand frame coordinate system."))
                  (lhand_raw_x
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "The raw x-coordinate of the player's left hand in the left hand frame coordinate system."))
                  (lhand_raw_y
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "The raw y-coordinate of the player's left hand in the left hand frame coordinate system."))
                  (lhand_raw_z
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "The raw z-coordinate of the player's left hand in the left hand frame coordinate system."))
                  (hand_separation_distance
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "Distance between the two hands."))
                  (lhand_noise_ratio
                     float
                     (read_only TRUE)
                     (help
                        "How noisy we see the left hand. Bigger means more noisy."))
                  (rhand_noise_ratio
                     float
                     (read_only TRUE)
                     (help
                        "How noisy we see the right hand. Bigger means more noisy."))))
            ('Smoothed hand position'
               (indent
                  (rhand_x
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "X coordinate of the player's right hand, normalized to a player-scaled square"))
                  (rhand_y
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "Y coordinate of the player's right hand (kinect space, so up/down), normalized to a player-scaled square"))
                  (rhand_z
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "-1 to 1, Z coordinate of the player's right hand (kinect space, so in/out), relative to their hip Z"))
                  (lhand_x
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "X coordinate of the player's left hand, normalized to a player-scaled square"))
                  (lhand_y
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "Y coordinate of the player's left hand (kinect space, so up/down), normalized to a player-scaled square"))
                  (lhand_z
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "-1 to 1, Z coordinate of the player's left hand (kinect space, so in/out), relative to their hip Z"))))
            ('Screenspace hand position'
               (indent
                  (rhand_screen_x
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "0 to 1, Screenspace x coordinate of right hand."))
                  (rhand_screen_y
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "0 to 1, Screenspace y coordinate of right hand."))
                  (lhand_screen_x
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "0 to 1, Screenspace x coordinate of left hand."))
                  (lhand_screen_y
                     float
                     (read_only TRUE)
                     (no_test)
                     (help
                        "0 to 1, Screenspace y coordinate of left hand."))))))
      (Playspace
         (indent
            (lock_playspace
               bool
               (help
                  "is tracking the players position in the playspace locked?  when true, none of the playspace properties will update"))
            (playspace_lr
               float
               (read_only TRUE)
               (no_test)
               (help
                  "Player's left/right position, normalized to [0,1] within playspace shape"))
            (playspace_lr_raw
               float
               (read_only TRUE)
               (no_test)
               (help
                  "Unsmoothed version of player's x coordinate relative to camera, normalzied [0..1] within playspace"))
            (playspace_lr_abs
               float
               (read_only TRUE)
               (no_test)
               (help
                  "Player's x coordinate relative to the camera, in meters"))))
      ('Player body state'
         (indent
            (crouch
               float
               (read_only TRUE)
               (no_test)
               (help
                  "How much the player is crouching [0,1], where 0 is standing upright"))
            (sitting_lean_angle
               float
               (read_only TRUE)
               (no_test)
               (help
                  "How much is the player leaning while sitting (degrees)"))
            (sitting_lean_input
               float
               (read_only TRUE)
               (no_test)
               (help
                  "How much is the player input from leaning (-1 to 1)"))
            (sitting_position
               float
               (read_only TRUE)
               (no_test)
               (help
                  "What is the target position from sitting lean (-1 to 1)"))))))
(ScreenspacePosCom
   (description
      "A trans that always positions itself in the specified screenspace region")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (screen_rect_x
         float
         (range -0.5 1.5)
         (help
            "From 0 to 1, the horizontal origin of the screen rectangle we will move within"))
      (screen_rect_y
         float
         (range -0.5 1.5)
         (help
            "From 0 to 1, the vertical origin of the screen rectangle we will move within"))
      (screen_rect_width
         float
         (range -0.5 1.5)
         (help
            "From 0 to 1, the width of the screen rectangle we will move within"))
      (screen_rect_height
         float
         (range -0.5 1.5)
         (help
            "From 0 to 1, the height of the screen rectangle we will move within"))
      (target_x
         float
         (range 0.0 1.0)
         (help
            "from 0 to 1, where to position ourselves horizontally within the screen rectangle"))
      (target_y
         float
         (range 0.0 1.0)
         (help
            "from 0 to 1, where to position ourselves vertially within the screen rectangle"))
      (target_depth
         float
         (help
            "The depth relative to the camera that we place ourselves, in world coordinates."))
      (debug_draw_screensp_com
         bool
         (no_test)
         (alias 'Debug Draw')
         (help
            "visualize the screen region that our target will move through"))
      (use_projected_distance_screensp_com
         bool
         (alias 'Use Projected Distance')
         (help
            "Are we feeding in a distance from the camera plane (as opposed to vector distance from the camera)"))))
(OutputScreenspacePosCom
   (description
      " A component that outputs the current screenspace position of any trans its added to")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (screen_pos_x
         float
         (read_only TRUE)
         (no_test)
         (help
            "Normalized (0..1) screenspace x position of the trans we're attached to"))
      (screen_pos_y
         float
         (read_only TRUE)
         (no_test)
         (help
            "Normalized (0..1) screenspace y position of the trans we're attached to"))))
(RootDirPositionerCom
   (description
      "Always positions this object at the position of an object in the root dir that is specified by name.")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (trans_name
         string
         (help
            "Name of object in root dir to parent to and take the transform of."))))
(RecordPlayMgrSamplerCom
   (description
      "Adds this sampler to the list of samplers used in the RecordPlayMgr.")
   (user_can_add TRUE)
   (required_classes FusionSampler)
   (editor))
(RayCastReceiverCom
   (description
      "Receives a callback when struck by CameraRayCast")
   (user_can_add TRUE)
   (required_classes Entity RigidBody)
   (editor
      (is_hit
         bool
         (help
            "Has this entity been struck by a ray?")
         (no_test))
      (hit_pos
         VECTOR3
         (help
            "Where did the hit happen? World coordinates")
         (no_test))
      (hit_pos_local
         VECTOR3
         (help
            "Where did the hit happen? Local coordinates")
         (no_test))
      (hit_normal
         VECTOR3
         (help
            "What is the normal of the hit? World coordinates")
         (no_test))
      (align_with_hit_trans
         object
         (class Trans)
         (help
            "An optional trans to position and align with hit position + normal"))))
(CameraRayCastReceiverCom
   (description
      "Receives a callback when struck by CameraRayCast")
   (user_can_add TRUE)
   (required_classes Entity RigidBody)
   (editor
      (screen_velocity
         VECTOR2
         (help
            "How fast was the cursor moving in screen space?")
         (no_test))
      (screen_speed
         float
         (help
            "How fast was the cursor moving in screen space?")
         (no_test))
      (screen_angle
         float
         (help
            "In which direction was the cursor moving in screen space (degrees CCW from +x [-180,180))")
         (no_test))
      (crcrc_use_local_xfm
         bool
         (help
            "Do we give this information in local coordinates?")))
   (events_out
      (on_rigidbody_activate)
      (on_rigidbody_deactivate)))
(HandFlailCom
   (description
      "Component to detect hand movment")
   (user_can_add disk)
   (required_classes Scene Entity)
   (editor
      (movement_threshold
         float
         (help
            "How much movement do we need to be declared moving"))
      (movement_cooldown
         float
         (help
            "How long do we need to be still to change to not moving (seconds)"))
      (movement_warmup
         float
         (help
            "How long do we need to be moving to change to moving (seconds)"))
      (accumulator_decay_rate
         float
         (help
            "How much does the accumulator decay per second without movement?"))
      (accumulator_grow_rate
         float
         (help
            "How much does the accumulator grow per second with movement?"))
      (minimum_hand_speed
         float
         (help
            "BOTH hands must be above this speed to be called moving"))
      (accumulator_max
         float
         (help
            "Where should we clamp the accumulator?  No clamping if <= 0"))
      (movement
         float
         (read_only TRUE)
         (help
            "How much movement is detected right now?"))
      (is_moving
         bool
         (read_only TRUE)
         (help
            "Are we moving? Considers threshold and cooldown/warmup timers"))
      (accumulator
         float
         (help
            "How much movement have we accumulated?")
         (no_test)))
   (events_in
      (reset
         (help
            "Resets the component"))))
(LayerRndGroupCom
   (description
      "Component to put entities in a layer into a RndGroup so they can be shown/hidden")
   (user_can_add TRUE)
   (required_classes Scene)
   (editor
      (layer_groups
         (array
            (struct
               (layer_name
                  symbol
                  (list
                     {$this get_layer_names})
                  (help
                     "What is the name of the layer in question?"))
               (layer_showing
                  bool
                  (help
                     "Is this layer showing?")
                  (hide
                     {==
                        {$this
                           get
                           (layer_groups
                              {elem $editor_prop_path 1}
                              layer_group)}
                        ''}))
               (layer_group
                  object
                  (class Group)
                  (help
                     "Into which group do we stuff this layer's objects?"))))))
   (events_in
      (set_layer_showing
         (editor
            (layer_name
               symbol
               (list
                  {[target]
                     get_controlled_layer_names})
               (help
                  "The name of the layer to hide or show"))
            (showing
               bool
               (help
                  "True if we should show the layer, false if we should hide it"))))))
(PhysSensorForceFieldCom
   (description
      "Component that applies force to objects in a sensor")
   (user_can_add TRUE)
   (required_classes PhysicsSensor)
   (editor
      (type_physsensorforcefield
         int
         (list SENSOR_FORCE_FIELD_TYPES)
         (alias
            "Force Field Type")
         (help
            "What type of force field is this?"))
      (magnitude_physsensorforcefield
         float
         (alias
            "Magnitude")
         (hide
            {!=
               [type_physsensorforcefield]
               kForceField_Radial})
         (help
            "How strong of a force do we apply (positive is push, negative is pull)"))
      (min_distance_physsensorforcefield
         float
         (alias
            "Min Distance")
         (hide
            {!=
               [type_physsensorforcefield]
               kForceField_Radial})
         (help
            "What is the smallest distance for which we continue to increase force?"))
      (constant_force_physsensorforcefield
         VECTOR3
         (alias
            "Constant Force")
         (hide
            {!=
               [type_physsensorforcefield]
               kForceField_Constant})
         (help
            "What is the smallest distance for which we continue to increase force?"))
      (apply_local_physsensorforcefield
         bool
         (alias
            "Apply Force To Local Axes?")
         (hide
            {!=
               [type_physsensorforcefield]
               kForceField_Constant})
         (help
            "Is force applied along local axes of sensor or world axes?"))
      (axes_scale_physsensorforcefield
         VECTOR3
         (alias
            "Axes Scale")
         (hide
            {!=
               [type_physsensorforcefield]
               kForceField_Radial})
         (help
            "Scale factor to forces applied on each world axis"))))
(RhythmDetectorCom
   (description
      "Component which detects rhythm in a player's motions.")
   (user_can_add TRUE)
   (required_classes Scene Entity)
   (editor
      (movement_rating
         float
         (no_test)
         (help
            "How much the player is moving."))
      (rhythm_rating
         float
         (no_test)
         (help
            "How 'on-the-beat' the player is."))
      (beats_per_loop
         int
         (help
            "How many beats are in one loop of the beat provider."))
      (num_beats_to_cover
         float
         (help
            "num_beats_to_cover."))
      (beat_fold
         int
         (help
            "beat_fold."))
      (tolerance_factor
         float
         (help
            "tolerance_factor."))
      (dir_x
         float
         (help
            "dir_x.")
         (no_test))
      (dir_y
         float
         (help
            "dir_y.")
         (no_test))
      (dir_z
         float
         (help
            "dir_z.")
         (no_test)))
   (events_in
      (start_recording
         (help
            "Start recording."))
      (stop_recording
         (help
            "Stop recording.")))
   (events_out))
(ManipulatorCom
   (description
      "Component that manages manipulatable objects in a scene")
   (user_can_add TRUE)
   (required_classes Scene UIScreen)
   (editor
      (mpr_enabled
         bool
         (alias
            "enabled")
         (help
            "Is this component polling?"))
      (mpr_min_rotation_separation
         float
         (alias
            "minimum rotation separation")
         (help
            "What is the minimum distance the player's hands must be separated to update rotation?"))
      (mpr_min_scale_separation
         float
         (alias
            "min hand dist")
         (help
            "In shoulder widths, the minimum distance between the hands"))
      (mpr_max_scale_separation
         float
         (alias
            "max hand dist")
         (help
            "In shoulder widths, the maximum distance between the hands"))
      (mpr_min_engage_time
         float
         (alias
            "Min Engage Time")
         (help
            "Minimum time (in secs) that you must be engaged for before disengage is allowed.  to avoid accidental disengage"))
      (mpr_disengage_hold_time
         float
         (alias
            "Hold Time to Disengage")
         (help
            "Time (in secs) your hands must remain extended to enter disengage"))
      (mpr_position_scale
         VECTOR3
         (alias
            "position scale")
         (help
            "How much do we scale the output position?"))
      (mpr_position_offset
         VECTOR3
         (alias
            "position offset")
         (help
            "How much is the 'center' of the manipulation space offset from the center of the player's spine?"))
      (mpr_shake_scale
         float
         (alias
            "shake scale")
         (help
            "How much do we scale our output shake?"))
      (mpr_manipulatable
         object
         (class Trans)
         (alias
            "manipulated object")
         (help
            "what object is being manipulated?"))
      (mpr_state
         int
         (list FLUX_MANIPULATOR_STATE)
         (alias
            "state")
         (help
            "What state are we in?")
         (no_test))
      (mpr_stable_stretch_threshold
         float
         (alias
            "stable stretch threshold")
         (help
            "How lenient are we when determining stretch stability?"))
      (mpr_reset_stretch
         float
         (alias
            "reset stretch")
         (help
            "How much do we stretch when not receiving Kinect data?")
         (no_test))
      (mpr_disengage_zthresh
         float
         (alias
            "Disengage ZThresh")
         (help
            "0 to 1, how extended arms need to be to disengage"))
      (mpr_warning_zthresh
         float
         (alias
            "Warning ZThresh")
         (help
            "0 to 1, how extended arms need to begin warning about being close to a disengage"))
      (mpr_stretch_z_bonus
         float
         (alias
            "Stretch ZBonus")
         (help
            "0 to 1, increasing this makes it easier to disenage when hands are apart"))
      (mpr_disengage_amount
         float
         (alias
            "disengage progress")
         (help
            "0 to 1, how far along our disengagement is")
         (read_only TRUE)
         (no_test))
      (mpr_warning_progress
         float
         (alias
            "warning progress")
         (help
            "0 to 1, how close to STARTING a disengage are we")
         (read_only TRUE)
         (no_test)))
   (events_out
      (manipulator_engage)
      (manipulator_disengage)
      (manipulator_preengage)
      (manipulator_postengage)
      (on_preengage_complete)
      (manipulator_disengage_quit)
      (manipulator_disengage_complete))
   (events_in
      (engage)
      (disengage)
      (disengage_complete)
      (pre_engage)
      (post_engage)))
(ManipulatableCom
   (description
      "Component that should be attatched to objects that can be manipulated")
   (user_can_add disk)
   (required_classes Trans)
   (editor
      (mpl_use_standard_disengage
         bool
         (alias
            "Use Standard Disengage")
         (help
            "Should this manipulator use the standard push manip forward to disengage?"))
      (mpl_rotation_enabled
         bool
         (alias
            "rotation enabled")
         (help
            "Do we allow rotation to be updated?"))
      (mpl_position_enabled
         bool
         (alias
            "position enabled")
         (help
            "Do we allow position to be updated?"))
      (mpl_scale_enabled
         bool
         (alias
            "scale enabled")
         (help
            "Do we allow scale to be updated?"))
      (mpl_rotation_mode
         int
         (list FLUX_MANIPULATION_MODE)
         (alias
            "rotation smoothing mode")
         (help
            "How do we smooth rotation?"))
      (mpl_position_mode
         int
         (list FLUX_MANIPULATION_MODE)
         (alias
            "position smoothing mode")
         (help
            "How do we smooth position?"))
      (mpl_scale_mode
         int
         (list FLUX_MANIPULATION_MODE)
         (alias
            "scale smoothing mode")
         (help
            "How do we smooth scale?"))
      (mpl_state
         int
         (list FLUX_MANIPULATABLE_STATE)
         (alias
            "state")
         (help
            "What state are we in?")
         (no_test))
      (mpl_disengaged_pos
         object
         (class Trans)
         (alias
            "disengaged pos")
         (help
            "Where do we center our disengagement?"))
      (mpl_engaged_dist
         float
         (alias
            "engaged distance")
         (help
            "How far does this get positioned from the camera? (Modulated by static scale)"))
      (mpl_engage_time
         float
         (alias
            "engage time")
         (disk_prop)
         (help
            "How long does it take to engage the manipulator?"))
      (mpl_disengage_time
         float
         (alias
            "disengage time")
         (disk_prop)
         (help
            "How long does it take to disengage the manipulator?"))
      (mpl_scale_min
         float
         (alias
            "scaling minimum")
         (help
            "What is the smallest scale we can apply?")
         (hide
            {!=
               [mpl_scale_enabled]
               TRUE}))
      (mpl_scale_max
         float
         (alias
            "scaling maximum")
         (help
            "What is the largest scale we can apply?")
         (hide
            {!=
               [mpl_scale_enabled]
               TRUE}))
      (mpl_disengaged_to_engaged_lerp
         float
         (alias
            "disengaged to engaged lerp")
         (help
            "When disengaged, lerps our position towards the engaged position. 1.0 means fully in engaged position.")
         (range 0.0 1.0)
         (slider)
         (no_test))
      (Smoothing
         (indent
            (mpl_phys_rotation_kp
               float
               (alias
                  "rotation kp")
               (hide
                  {!=
                     [mpl_rotation_mode]
                     kManipulationMode_Physics}))
            (mpl_phys_rotation_kd
               float
               (alias
                  "rotation kd")
               (hide
                  {!=
                     [mpl_rotation_mode]
                     kManipulationMode_Physics}))
            (mpl_smoothing_rotation
               float
               (alias
                  "rotation smoothing")
               (hide
                  {!=
                     [mpl_rotation_mode]
                     kManipulationMode_SimpleSmooth}))
            (mpl_phys_position_kp
               float
               (alias
                  "position kp")
               (hide
                  {!=
                     [mpl_position_mode]
                     kManipulationMode_Physics}))
            (mpl_phys_position_kd
               float
               (alias
                  "position kd")
               (hide
                  {!=
                     [mpl_position_mode]
                     kManipulationMode_Physics}))
            (mpl_smoothing_position
               float
               (alias
                  "position smoothing")
               (hide
                  {!=
                     [mpl_position_mode]
                     kManipulationMode_SimpleSmooth}))
            (mpl_phys_scale_kp
               float
               (alias
                  "scale kp")
               (hide
                  {!=
                     [mpl_scale_mode]
                     kManipulationMode_Physics}))
            (mpl_phys_scale_kd
               float
               (alias
                  "scale kd")
               (hide
                  {!=
                     [mpl_scale_mode]
                     kManipulationMode_Physics}))
            (mpl_smoothing_scale
               float
               (alias
                  "scale smoothing")
               (help
                  "0 to 1, 0 is tons of smoothing, 1 is no smoothing")
               (hide
                  {!=
                     [mpl_scale_mode]
                     kManipulationMode_SimpleSmooth}))))
      (Output
         (indent
            (mpl_out_position
               VECTOR3
               (alias
                  "out position")
               (no_test)
               (read_only TRUE))
            (mpl_out_velocity
               VECTOR3
               (alias
                  "out velocity")
               (no_test)
               (read_only TRUE))
            (mpl_out_rotation
               VECTOR3
               (alias
                  "out rotation")
               (no_test)
               (help
                  "x, y, and z rotation of the manip, in degrees")
               (read_only TRUE))
            (mpl_out_ang_vel
               VECTOR3
               (alias
                  "out angular velocity")
               (no_test)
               (read_only TRUE))
            (mpl_out_ang_speed
               float
               (alias
                  "out angular speed")
               (no_test)
               (read_only TRUE))
            (mpl_target_scale
               float
               (alias
                  "target scale")
               (help
                  "0 to 1, Unsmoothed target scale we're trying to achieve")
               (no_test)
               (read_only TRUE))
            (mpl_out_scale
               float
               (alias
                  "out scale")
               (help
                  "0 to 1, Current smoothed scale (i.e. distance between hands)")
               (no_test)
               (read_only TRUE))
            (mpl_out_shake
               float
               (alias
                  "out shake")
               (no_test)
               (read_only TRUE))
            (mpl_disengage_progress
               float
               (alias
                  "disengage progress")
               (no_test)
               (help
                  "How disengaged are we, 0 to 1"))
            (mpl_warning_progress
               float
               (alias
                  "warning progress")
               (no_test)
               (help
                  "How close to BEGINING to disengage are we, 0 to 1")))))
   (events_out
      (manipulatable_disengage)
      (manipulatable_engaged)
      (manipulatable_preengaged)
      (manipulatable_postengaged)
      (on_preengage_complete)
      (manipulatable_disengage_quit)
      (manipulatable_disengage_complete)
      (manipulatable_disengage_progressed
         (help
            "after you toss it back, and its moved all the back to its starting position")))
   (events_in
      (mpl_set_stretch
         (editor
            (stretch
               float
               (help
                  "What stretch do we want the manipulatable to reach?")
               (range 0.0 1.0))))))
(DiscoveryCursorSurfaceCom
   (description
      "Component attached to an entity with a rigidbody that should function as a collision surface for the discovery cursor")
   (user_can_add TRUE)
   (required_classes Entity RigidBody SculptableCollisionSurface)
   (editor
      (surface_type
         int
         (list FLUX_DISC_SURFACE_TYPE)
         (help
            "What type of surface is this?"))))
(DiscoveryCursorCom
   (description
      "Component attached to the discovery cursor")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (world_cursor
         object
         (class RigidBody)
         (disk_prop)
         (help
            "What is the world cursor object?"))
      (use_spring_physics
         bool
         (disk_prop)
         (help
            "True if the world cursor should be moved with spring physics, false if it should just move directly to the target position."))
      (depth_ray_caster
         object
         (disk_prop)
         (class DiscoveryCursorRayCaster)
         (no_test uniqueness)
         (help
            "What is the raycaster we're using to determine our depth?"))
      (world_ray_caster
         object
         (disk_prop)
         (class RayCasterBase)
         (help
            "What is the raycaster we're casting through the world cursor?"))
      (target_position
         VECTOR3
         (disk_prop)
         (no_test serialize copy uniqueness))
      (cursor_visible
         bool
         (disk_prop)
         (no_test serialize copy uniqueness))
      (cursor_hand
         int
         (list SKELETON_HANDS)
         (read_only TRUE)
         (help
            "The hand that's currently controlling the cursor."))
      ('Movement Smoothing Parameters'
         (indent
            (low_speed_threshold
               float
               (help
                  "The speed, in world space units, at which the cursor uses the 'low speed' smoothing parameters."))
            (high_speed_threshold
               float
               (help
                  "The speed, in world space units, at which the cursor uses the 'high speed' smoothing parameters."))
            (low_speed_smoothing
               float
               (range 0.0 1.0)
               (slider)
               (help
                  "The smoothing value used to smooth the cursor's position when it's moving at low speeds. The closer this is to 1.0, the faster the position approaches the raw Kinect data."))
            (high_speed_smoothing
               float
               (range 0.0 1.0)
               (slider)
               (help
                  "The smoothing value used to smooth the cursor's position when it's moving at high speeds. The closer this is to 1.0, the faster the position approaches the raw Kinect data."))
            (low_speed_trend_smoothing
               float
               (range 0.0 1.0)
               (slider)
               (help
                  "The smoothing value used to smooth the cursor's predicted velocity when it's moving at low speeds. The closer this is to 1.0, the faster the predicted velocity approaches the raw velocity."))
            (high_speed_trend_smoothing
               float
               (range 0.0 1.0)
               (slider)
               (help
                  "The smoothing value used to smooth the cursor's predicted velocity when it's moving at high speeds. The closer this is to 1.0, the faster the predicted velocity approaches the raw velocity."))
            (noise_threshold
               float
               (help
                  "The maximum frame-to-frame distance, in world space units, that is considered noise. If the distance between the cursor's position and the current hand position is less than this distance, the data is smoothed even more."))
            (num_frames_to_predict
               float
               (help
                  "The number of frames into the future that the cursor's position is predicted based on its velocity trend. This can (and probably should) be a fraction of a frame."))
            (depth_min_noise_threshold
               float
               (help
                  "The minimum frame-to-frame depth distance that's considered noise. Any change in depth smaller than this distance is ignored."))
            (depth_max_noise_threshold
               float
               (help
                  "The maximum frame-to-frame depth distance that's considered noise. Any chnage in depth larger than this doesn't have extra noise smoothing applied."))
            (depth_velocity_jitter_threshold
               float
               (help
                  "The frame-to-frame change in in depth velocity that's considered jitter. Any change in depth velocity greater than this has extra jitter smoothing applied to it."))))
      ('Movement State'
         (indent
            (raw_hand_speed
               float
               (read_only TRUE)
               (help
                  "The player's raw hand speed, in in-world meters per second."))
            (normalized_hand_speed
               float
               (read_only TRUE)
               (help
                  "The player's hand speed, normalized to the specified low/high speed range."))
            (cursor_speed
               float
               (read_only TRUE)
               (help
                  "The cursor's current speed, in in-game meters per second."))
            (cursor_screen_space_speed
               float
               (read_only TRUE)
               (help
                  "The cursor's speed in screen-space units. This is independent of the level's scale."))
            (position_jitter_on
               bool
               (read_only TRUE)
               (help
                  "True if position jitter was detected this frame."))
            (depth_jitter_on
               bool
               (read_only TRUE)
               (help
                  "True if depth jitter was detected this frame."))))
      ('Display Movement Smoothing State'
         (indent
            (displayed_raw_hand_speed
               float
               (read_only TRUE)
               (help
                  "The maximum raw hand speed, in world space units, that occurred in the last second."))
            (displayed_normalized_hand_speed
               float
               (read_only TRUE)
               (help
                  "The maximum normalized hand speed that occurred in the last second. This is the hand speed normalized to the [low_speed_threshold] and [high_speed_threshold] range."))
            (displayed_position_smoothing
               float
               (read_only TRUE)
               (help
                  "The largest position smoothing parameter value that was used in the last second."))
            (displayed_trend_smoothing
               float
               (read_only TRUE)
               (help
                  "The largest trend smoothing parameter value that was used in the last second.")))))
   (events_out
      (on_sharp_cursor_direction_change
         (help
            "Fired when the cursor's direction has changed sharply."))))
(DiscoveryEngagableCom
   (description
      "Component attached to the engagable discovery objects by variants of EngagementCom")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (dec_disengage_delay_seconds
         float
         (alias
            "disengage delay seconds")
         (help
            "How long we stay engaged when the cursor moves away."))
      (dec_is_engagable
         bool
         (alias
            "is available")
         (help
            "Is this object available for interaction?")
         (no_test)
         (read_only TRUE))
      (dec_is_primed
         bool
         (alias
            "is primed")
         (help
            "Is this object currently hovered over? (one or two hands), exclusive")
         (read_only
            {$this is_proxy})
         (no_test))
      (dec_is_hovered
         bool
         (alias
            "is hovered (old)")
         (help
            "!! Deprecated in favor of is_primed !!")
         (read_only TRUE)
         (no_test))
      (dec_is_engaged
         bool
         (alias
            "is engaged")
         (help
            "Is this object being engaged? (two hands over)")
         (read_only
            {$this is_proxy})
         (no_test))
      (dec_engagable_after_activation
         object
         (class Entity)
         (alias
            "engagable after activation")
         (help
            "Is there another engagable we should engage with once this one is activated?")
         (instance_prop)))
   (events_out
      (dec_activate)))
(DiscoveryManipulatorCom
   (description
      "Component for music manipulators in Discovery")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (dmc_manipulator_type
         int
         (list MANIPULATOR_TYPES_OPTIONAL)
         (alias
            "manipulator type")
         (help
            "which type of manipulator do we summon?"))
      (dmc_sampler
         object
         (class FusionSampler)
         (hide
            {&&
               {!=
                  [dmc_manipulator_type]
                  kManipulator_SpaceJam}
               {!=
                  [dmc_manipulator_type]
                  kManipulator_BeatWheel}
               {!=
                  [dmc_manipulator_type]
                  kManipulator_Rope}
               {!=
                  [dmc_manipulator_type]
                  kManipulator_MusicBox}})
         (alias
            "sampler")
         (help
            "Which sampler does our manipulator use?"))
      (dmc_midi_file
         file
         (ext
            "MIDI Files"
            "mid")
         (hide
            {&&
               {!=
                  [dmc_manipulator_type]
                  kManipulator_MusicBox}
               {!=
                  [dmc_manipulator_type]
                  kManipulator_Rope}})
         (alias
            "midi file")
         (help
            "Which midi file does our manipulator use?"))
      (dmc_sj_x_slots
         int
         (hide
            {!=
               [dmc_manipulator_type]
               kManipulator_SpaceJam})
         (alias
            "num x slots"))
      (dmc_sj_y_slots
         int
         (hide
            {!=
               [dmc_manipulator_type]
               kManipulator_SpaceJam})
         (alias
            "num y slots"))
      (dmc_sj_beats_per_measure
         int
         (hide
            {!=
               [dmc_manipulator_type]
               kManipulator_SpaceJam})
         (alias
            "beats per measure"))
      (dmc_mr_depth_anim
         object
         (class PropAnim)
         (hide
            {!=
               [dmc_manipulator_type]
               kManipulator_Rope})
         (alias
            "depth anim"))
      (dmc_mr_pan_anim
         object
         (class PropAnim)
         (hide
            {!=
               [dmc_manipulator_type]
               kManipulator_Rope})
         (alias
            "pan anim"))
      (dmc_completed
         bool
         (alias
            "completed")
         (help
            "Have we been completed in this scene?")
         (read_only TRUE))))
(ZoomEngagementCom
   (description
      "Component for zoom engagement")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (zoom_engage_progress
         float
         (help
            "0 to 1, how close the player is to engaging the zoom-in."))
      (zoom_engage_progress_smoothing
         float
         (help
            "How much we smooth the engage progress. [0,1]. Bigger means more smooth.")
         (disk_prop))
      (zoom_progress
         float
         (help
            "0 to 1, how close are we to activating the zoom"))
      (zoom_target
         object
         (class Trans)
         (instance_prop)
         (help
            "The target that's zoomed into by this engagable. If the target goes off camera while the zoom is engaged, the zoom disengages."))
      (should_trigger_camera_zoom
         bool
         (instance_prop)
         (help
            "True if the a camera zoom should be triggered when this zoom engagable is activated, false otherwise."))))
(ZoomOutEngagementCom
   (description
      "Component for zoom out engagement")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (is_left_hand_zoom_out_primed
         bool
         (help
            "True if the player's left hand is in the zoom out primed position."))
      (is_right_hand_zoom_out_primed
         bool
         (help
            "True if the player's right hand is in the zoom out primed position."))
      (zoom_out_progress
         float
         (help
            "0 to 1, how close are we to activating the zoom out"))
      (prompting_for_engage_gesture
         bool
         (read_only TRUE)
         (no_test)
         (help
            "When true, we want to be actively prompting player to begin zooming out of the node.  Used for node exit..."))))
(DiscoverySceneCom
   (description
      "Component that directs the discovery scene")
   (user_can_add TRUE)
   (required_classes Scene)
   (editor
      (dsc_auto_save_on_exit
         bool
         (help
            "True if the Discovery scene should autosave on exit, false otherwise."))
      (dsc_cursor
         object
         (class Entity)
         (help
            "The primary Discovery cursor."))
      (dsc_cam_manager
         object
         (class DiscoveryCamManager))
      (dsc_current_engagable
         object
         (class Entity)
         (read_only TRUE)
         (no_test))
      (dsc_scene_phase
         int
         (no_test)
         (help
            "The phase that the scene is currently in. Currently, 0 is the Yen Sid phase, and 1 is the Scout phase."))
      (dsc_conductor_mode_engagable
         object
         (class Entity)
         (components
            (ConductorModeEngagementCom)))
      (dsc_visited
         bool
         (read_only TRUE)
         (help
            "Has this scene been visited in the current phase?"))
      (dsc_completed
         bool
         (read_only TRUE)
         (help
            "Has this scene been completed in the current phase?"))
      (wwise_enter_pulse_event
         symbol
         (list
            {$this dsc_get_event_names})
         (help
            "Wwise event to play on pulse enter"))
      (wwise_exit_pulse_event
         symbol
         (list
            {$this dsc_get_event_names})
         (help
            "Wwise event to play on pulse exit"))
      (scene_music_sound
         object
         (class Sound)
         (help
            "The Sound object the plays the discovery scene music.  This will be stopped / started as you enter/exit Pulse"))
      (enter_pulse_stop_sound_delay
         float
         (units secs)
         (help
            "The # of seconds to wait after posting the 'wwise_enter_pulse_event' to explicitly stop the scene music sound")))
   (events_in
      (enter_pulse)
      (exit_pulse)
      (set_visited
         (help
            "Marks the scene as visited in the current phase."))
      (set_completed
         (help
            "Marks the scene as completed in the current phase."))))
(PulseBgSceneCom
   (description
      "Component that controls the animation of the background scene behind pulse")
   (user_can_add TRUE)
   (required_classes Scene)
   (editor
      (song
         object
         (class Song)
         (help
            "The song to test with")
         (no_test))
      (song_name
         symbol
         (list
            {do
               ($songs
                  {array 0})
               {push_back $songs ''}
               {foreach
                  $song
                  {song_mgr get_song_list}
                  {do
                     ($scene
                        {song_mgr get_data $song bg_scene})
                     {if
                        {&&
                           $scene
                           {==
                              {file_absolute_path
                                 {file_root}
                                 $scene}
                              [path_name]}}
                        {push_back $songs $song}}}}
               $songs})
         (no_test)
         (history FALSE)
         (help
            "Name of the song to be loaded dynamically")
         (no_test))
      (load_song
         script
         (script
            {$this load_song})
         (custom_history)
         (help
            "Load the specified song")
         (no_test))
      (sync_anims
         script
         (script
            {$this sync_anims})
         (custom_history))
      (groups
         (array
            object
            (class Group))
         (help
            "Which group contains the scene for the each slot"))
      (slot
         int
         (list FLUX_TARGET_SLOTS)
         (help
            "current authored slot")
         (no_test)
         (history FALSE))))
(PulseBgAnimCom
   (description
      "Attached to pulse background camera animation for a slot")
   (user_can_add TRUE)
   (required_classes PropAnim)
   (editor
      (slot
         int
         (list FLUX_TARGET_SLOTS_OPTIONAL)
         (help
            "Which slot is authored in this propanim")
         (hide propanim))))
(TargetPaintableCom
   (description
      "Placed on objects in the world that want to be target painted by the cursor")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (enable_tpaint_ui
         bool
         (disk_prop)
         (alias
            "Enable UI")
         (help
            "Is the target paint UI enabled for this target?  Disable this if you are using target painting for specialized purposes, like just its audio playback capabilities"))
      (reticle_attach_pt
         object
         (class Trans)
         (disk_prop)
         (alias
            "Reticle Attach Pt")
         (hide
            {!
               [enable_tpaint_ui]})
         (help
            "Optional trans to use as the point the reticle will appear over. If not specified, we use the pivot of the entity we're on"))
      (desired_reticle_size
         float
         (alias
            "Desired Reticle Size")
         (range 1.0e-2 10.0)
         (slider)
         (hide
            {!
               [enable_tpaint_ui]})
         (help
            "desired reticle size, expressed as a multiple of my entity's screen size")
         (disk_prop))
      (quantization_mode
         int
         (list BEAT_QUANTIZATIONS_INC_CUSTOM)
         (alias
            "Start Quantization")
         (help
            "Where on the musical grid do we snap the start of this sample (i.e when it echoes)"))
      (custom_quantization_ticks
         int
         (alias
            "Custom Quantization (ticks)")
         (hide
            {!=
               [quantization_mode]
               kQuantize_Custom})
         (help
            "If you selected custom for your 'Beat Quantization', this is the quantization used expressed in ticks (note: 480 ticks per beats)"))
      (specify_duration
         bool
         (alias
            "Specify Duration?")
         (help
            "Do we want to specify a duration for this target, to leave room for its sample to play out before another one can play?"))
      (duration_length
         int
         (list
            (BEAT_QUANTIZATIONS_BASE))
         (alias
            "Duration Length")
         (hide
            {!
               [specify_duration]})
         (help
            "When this target plays, other targets must wait this long before they can play.  Designed to allow longer samples to play out fully"))
      (min_quantization_secs
         float
         (alias
            "Min Quantization Time (secs)")
         (range 0.0 3.0)
         (slider)
         (help
            "If you want to make sure the target doesn't 'burst' too quickly, you can set this time in secs.  Note that it will still quantize to beats, 8ths, etc, but this might make it wait several intervals"))
      (anticipation_time
         float
         (alias
            "Anticipation Time (secs)")
         (range 0.0 3.0)
         (slider)
         (help
            "The # of seconds in advance of the normal echo to receive a special 'anticipation echo' event, mostly to trigger animations that have a bit of anticipation baked in.  Note, we will guaruntee that this time will elapse after painting, extending when echo will happen to make room."))
      (souvenir_tag
         symbol
         (list
            {elem
               {find $syscfg target_painting souvenir_tags}
               1})
         (alias
            "Souvenir Tag")
         (help
            "An identifier for this target that is sent out when this target echoes, primarily used to drive souvenir anims on the backplane")
         (inline_script
            'Edit DTA'
            (help
               "Edit the DTA file containing the souvenir tags")
            (script
               {$this edit_dta})
            (no_test)))
      (goldify_property
         prop_ref
         (allow_read_only_props FALSE)
         (allowed_prop_types
            (float))
         (help
            "A 0..1 float property we will ramp up when we're painted to 'goldify' the object")
         (require_complete_ref FALSE)
         (disk_prop))
      (target_record_state
         int
         (list DISCOVERY_RECORDABLE_STATES)
         (alias
            "Record State")
         (read_only TRUE)
         (no_test)
         (help
            "If involved in a recording interaction, this mirrors the state of the recorder (off, recording, or playback)"))
      (target_is_recorded
         bool
         (alias
            "Is Recorded?")
         (no_test)
         (help
            "Has this target been captured in a recording?"))
      (target_painted
         bool
         (alias
            "Target Painted?")
         (read_only TRUE)
         (no_test)
         (help
            "Is the target painted, waiting to do its echo burst?"))
      (target_paint_idx
         int
         (alias
            "Painted Order #")
         (read_only TRUE)
         (no_test)
         (help
            "(starting at 1) If part of a group, this # is assigned in the order each target is painted. -1 if not currently painted"))
      (target_chain_idx
         int
         (alias
            "Painted Chain #")
         (read_only TRUE)
         (no_test)
         (help
            "(starting at 1) Similar to the Painted Order #, only is the order this target was painted in the full chain (even though currently it could be smaller because some have burst)."))
      (group_chain_length
         int
         (alias
            "Group Chain Length")
         (read_only TRUE)
         (no_test)
         (help
            "The length of the chain on my target paint group. (0 if nothing is painted, and climbing from there)"))
      (test_target_paint
         script
         (script
            {$this paint_target 0})
         (no_test))
      (test_target_release
         script
         (script
            {$this release_target})
         (no_test)))
   (events_in
      (paint_target
         (editor
            (slot_num
               int
               (default 0)
               (help
                  "The slot number assoicated with the note we should play when this target echoes.  It will be passed back when on_target_echoed is called"))))
      (release_target))
   (events_out
      (on_target_painted
         (help
            "Called when target is hit by cursor, and reticle shows.  Its now queued up to 'echo' to the beat later."))
      (on_target_echoed
         (editor
            (echoed_slot_num
               int
               (default 0)
               (help
                  "The slot number of note we played/should play for the this target.  Same number set when target was painted")))
         (help
            "Called when this target does its quantized burst and the reticle goes away."))
      (on_anticipation_echo
         (editor
            (anticipate_slot_num
               int
               (default 0)
               (help
                  "The slot number of note we played/should play for the this target.  Same number set when target was painted")))
         (help
            "Called prior to normal echo, for things like animations that want to start in advance of when music will play"))
      (on_target_released
         (help
            "Called when a target loses its reticle.  This could be because it just 'echoed' or it was forcefully released.  Better to play sounds with the 'on_target_echoed' event"))
      (on_other_target_painted
         (help
            "called when another target in the same group has been painted by the cursor"))
      (on_all_targets_released
         (help
            "called when all targets in the same group have been released"))))
(TargetPaintRecorderCom
   (description
      "Placed on TargetPaintGroups to add recording functionality")
   (user_can_add TRUE)
   (required_classes TargetPaintGroup)
   (tab properties)
   (group
      "TargetPaint Recording")
   (editor
      (tpr_record_state
         int
         (list DISCOVERY_RECORDABLE_STATES)
         (alias
            "Record State")
         (help
            "Control the state of the recorder - off, recording, playback"))
      (tpr_recording_window_size
         float
         (units
            "beats")
         (alias
            "Recording Window Size")
         (help
            "total number of beats a recording can span"))
      (tpr_enable_cursor_recording
         bool
         (alias
            "Enable Cursor Recording?")
         (help
            "Do we record and playback cursor position"))
      (tpr_audio_only_playback
         bool
         (alias
            "Audio Only Playback?")
         (help
            "Turns on/off a mode where we only play back recorded audio, and don't try to paint/echo the actual targets. Only applies when 'record_state' = playback"))
      (tpr_invalidate_on_record
         bool
         (alias
            "Invalidate On Record?")
         (help
            "Once you enter record mode, a recording can no longer be played back to its targets (though audio-only mode still works).  useful for targets that go away when you exit playback"))
      (tpr_use_backplane_optimization
         bool
         (alias
            "Use Backplane Optimization?")
         (help
            "If true (the default), we disable all samplers on individual targets when playing back audio on the backplane.  We will use the sampler on our target paint group exclusively for the backplane.  Set false to still use target samplers anyways..."))
      (tpr_has_recorded_data
         bool
         (alias
            "Has Recorded Data?")
         (read_only TRUE)
         (help
            "Have we recorded any events?")))
   (events_in
      (clear_recording
         (help
            "Force recording data, if any, to be erased")))
   (events_out
      (audio_only_echo
         (editor
            (audio_only_echo_note
               int
               (help
                  "the 'slot num' of the note played for this echo"))
            (audio_only_target_idx
               int
               (help
                  "Which target in our TargetPaintGroup's target list is this?"))
            (audio_only_souvenir_tag
               symbol
               (list
                  {elem
                     {find $syscfg target_painting souvenir_tags}
                     1})
               (help
                  "The souvenir tag associated with the target")))
         (help
            "Called when an echo occurs (i.e sound is played) in audio only playback mode"))
      (audio_only_anticipation_echo
         (editor
            (audio_only_ant_echo_note
               int
               (help
                  "the 'slot num' of the note played for this echo"))
            (audio_only_ant_target_idx
               int
               (help
                  "Which target in our TargetPaintGroup's target list is this?"))
            (audio_only_souvenir_tag
               symbol
               (list
                  {elem
                     {find $syscfg target_painting souvenir_tags}
                     1})
               (help
                  "The souvenir tag associated with the target")))
         (help
            "Called when an anticipation echo occurs (i.e some time preceding when sound is played) in audio only playback mode"))
      (on_recording_cleared
         (help
            "Recording was just cleared"))))
(TargetPaintSamplerCom
   (description
      "Adds low-latency fusion sampler functionality to target paint interactions")
   (user_can_add disk)
   (required_classes TargetPaintGroup Entity Trans)
   (editor
      (tps_sampler
         object
         (class FusionSampler)
         (disk_prop)
         (alias
            "Sampler")
         (help
            "Fusion sampler to play")
         (hide
            {!=
               [tps_clip_player]
               ''}))
      (tps_channel
         int
         (alias
            "Channel")
         (help
            "The channel # on the sampler that we play notes to")
         (hide
            {!=
               [tps_clip_player]
               ''}))
      (tps_transposer
         object
         (class Transposer)
         (disk_prop)
         (alias
            "Transposer")
         (help
            "Transposer to convert notes to follow different key/scale on the fly")
         (hide
            {!=
               [tps_clip_player]
               ''}))
      (tps_clip_player
         object
         (class MidiClipPlayer)
         (disk_prop)
         (alias
            "Clip Player")
         (help
            "MidiClipPlayer to play through. If a Clip Player is specified, the Fusion Sampler, channel, and Transposer specified here are ignored."))
      (tps_mute
         bool
         (alias
            "Mute?")
         (no_test)
         (help
            "Mute and unmute playback.  Not saved..."))
      (tps_enabled
         bool
         (read_only TRUE)
         (alias
            "Enabled?")
         (help
            "Are we communicating with the sampler?"))))
(TargetPaintReticleCom
   (description
      "Placed on entity containing target paint reticle art assets, to communicate states from the system to flows that drive the visuals.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (tpr_state
         int
         (list TPAINT_RETICLE_STATES)
         (read_only TRUE)
         (alias
            "State")
         (help
            "State of the reticle UI"))
      (tpr_echo_progress
         float
         (read_only TRUE)
         (alias
            "Echo Progress")
         (help
            "0 to 1, progress towards echoing"))))
(TargetPaintRibbonCom
   (description
      "Placed on entity containing target paint ribbon art assets, to communicate states from the system to flows that drive the visuals.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (ribbon_style
         int
         (read_only TRUE)
         (alias
            "Ribbon Style")
         (help
            "DEPRECATED - NO LONGER WORKS. Requested ribbon style for this asset"))))
(TargetPaintMgrCom
   (description
      "Central manager for the cursor target painting system that handles things like stamping reticles on targets, generating ribbons, etc.")
   (user_can_add TRUE)
   (required_classes Scene)
   (editor
      (reticle_pool
         object
         (class EntityPool)
         (help
            "An EntityPool used to spawn target paint reticles."))
      (echo_pool
         object
         (class EntityPool)
         (help
            "An EntityPool used to spawn target paint echo visuals"))
      (ribbon_pool
         object
         (class EntityPool)
         (help
            "An EntityPool used to spawn ribbons for target paint groups.  Its assumed I can find a RndRibbon inside..."))
      (see_tuning_params
         script
         (alias
            "See Tuning Params")
         (script
            {forge edit_object target_paint_tuning})
         (help
            "A shortcut to the object that configures tuning params for target painting")))
   (events_out
      (on_target_painted
         (help
            "Did a target just get painted?  Will only happen if the target is getting a reticle.  If UI is disabled, then no event is sent."))))
(TransSpinnerCom
   (description
      "Procedurally spin a Trans, applying impulses and decaying velocity")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (magnetize_presets
         (array
            (struct
               (Keyframe!
                  script
                  (script
                     {$this
                        capture_magnet_transform
                        {elem $editor_prop_path 1}})
                  (help
                     "Capture current transform of object into this keyframe"))
               (transform
                  TRANSFORM
                  (help
                     "the actual rotational preset"))
               (Preview
                  script
                  (script
                     {$this
                        force_magnet_preset
                        {elem $editor_prop_path 1}})
                  (help
                     "Snap current rotation to this preset"))))
         (alias
            "Magnetize Presets")
         (help
            "The spinner can magnetize towards different rotations, keyframed here"))
      (auto_magnetize
         bool
         (alias
            "Auto Magnetize")
         (help
            "If enabled, will try to make sure we always stop on one of the magnet preset rotations."))
      (spin_decay_rate
         float
         (alias
            "Spin Decay Rate")
         (help
            "Spin velocity on all axes decays at this rate (in degrees per sec)"))
      (max_spin_rate
         float
         (alias
            "Max Spin Rate")
         (help
            "Maximum speed for spin, in degrees per sec"))
      (angle_limits_min
         VECTOR3
         (alias
            "Angle Limits Min")
         (help
            "Set min limits (in degrees) on rotation in all 3 axes.  The trans will 'bounce' in the opposite direction when it hits a limit."))
      (angle_limits_max
         VECTOR3
         (alias
            "Angle Limits Max")
         (help
            "Set max limits (in degrees) on rotation in all 3 axes.  The trans will 'bounce' in the opposite direction when it hits a limit."))
      (angle_limit_bounciness
         float
         (alias
            "Angle Limit Bounciness")
         (range 0.0 1.0)
         (slider)
         (help
            "When we bounce off an angle limit, how much speed is retained/lost?  0 we lose all velocity, 1 we retain all velocity (perfectly elastic)"))
      (cur_spin_rate
         VECTOR3
         (alias
            "Cur Spin Rate")
         (read_only TRUE)
         (no_test)
         (help
            "Output of current spin rate.  To change, use Flow Commands to apply impulses"))
      (cur_spin_speed
         float
         (alias
            "Cur Spin Speed")
         (read_only TRUE)
         (no_test)
         (help
            "Current spin rate as an overall speed."))
      (Testing
         (indent
            (test_impulse
               float
               (alias
                  "Test Impulse Amount")
               (no_test)
               (help
                  "The amount to impulse velocity with when using test buttons below"))
            (test_apply_to_pitch
               bool
               (alias
                  "Apply Impulse To Pitch?")
               (no_test)
               (help
                  "Does the test impulse affect the pitch axis of rotation?"))
            (test_apply_to_yaw
               bool
               (alias
                  "Apply Impulse To Yaw?")
               (no_test)
               (help
                  "Does the test impulse affect the pitch axis of rotation?"))
            (test_apply_to_roll
               bool
               (alias
                  "Apply Impulse To Roll?")
               (no_test)
               (help
                  "Does the test impulse affect the pitch axis of rotation?"))
            ('Add Spin Impulse!'
               script
               (no_test)
               (help
                  "Apply impulse for testing purposes. Use the flow commands for in-game response.")
               (script
                  {$this
                     add_spin_impulse
                     [test_impulse]
                     [test_apply_to_pitch]
                     [test_apply_to_yaw]
                     [test_apply_to_roll]}))
            ('Force Stop!'
               script
               (script
                  {$this force_stop_spin})
               (no_test)
               (help
                  "Forces spinning to stop immediately"))
            ('Reset Rotation'
               script
               (no_test)
               (help
                  "reset rotation to 0,0,0")
               (script
                  {$this reset_xfm}))
            ('Snap To Closest Preset'
               script
               (no_test)
               (help
                  "Snap to closest magnet preset")
               (script
                  {$this force_closest_magnet_preset}))
            ('Snap To Preditced Preset'
               script
               (no_test)
               (help
                  "Snaps to the closest magnet preset to where we'll stop given current velocity/decay")
               (script
                  {$this force_predicted_magnet_preset}))
            ('Snap To Preditced Rot'
               script
               (no_test)
               (help
                  "Snaps to the predicted rotation we'll stop at given current velocity/decay")
               (script
                  {$this force_predicted_rot})))))
   (events_in
      (add_spin_impulse
         (alias
            "Add Spin Impulse")
         (editor
            (impulse_amount
               float
               (help
                  "The amount to impulse spin velocity by, in degrees per sec"))
            (apply_to_pitch
               bool
               (default TRUE)
               (help
                  "Does this impulse affect the pitch axis of rotation?"))
            (apply_to_yaw
               bool
               (default FALSE)
               (help
                  "Does this impulse affect the yaw axis of rotation?"))
            (apply_to_roll
               bool
               (default FALSE)
               (help
                  "Does this impulse affect the roll axis of rotation?")))
         (help
            "Apply a spin impulse on one or more axes"))
      (add_rotation_delta
         (alias
            "Add Rotation Delta")
         (editor
            (pitch_delta
               float
               (default 0.0)
               (help
                  "Delta to apply to pitch axis, in degrees"))
            (yaw_delta
               float
               (default 0.0)
               (help
                  "Delta to apply to yaw axis, in degrees"))
            (roll_delta
               float
               (default 0.0)
               (help
                  "Delta to apply to roll axis, in degrees")))
         (help
            "Manually apply a delta to the rotation on one or more axes"))
      (force_stop_spin
         (help
            "forces spinning to halt immediately"))))
(DiscoveryUnlockableCom
   (description
      "Attached to Discovery entities which can be locked or unlocked by scene state")
   (user_can_add disk)
   (required_classes Object)
   (editor
      (duc_unlock_parent
         object
         (class Object)
         (components
            (DiscoveryUnlockableCom))
         (alias
            "unlock parent")
         (instance_prop)
         (help
            "Do get our unlock/available state straight from another unlockable?"))
      (duc_available_parent
         object
         (class Object)
         (components
            (DiscoveryUnlockableCom))
         (alias
            "available parent")
         (instance_prop)
         (help
            "Do get our unlock/available state straight from another unlockable?"))
      (duc_unlocked
         bool
         (alias
            "unlocked")
         (read_only TRUE)
         (help
            "Is this object unlocked?  It may freely unlock and relock.")
         (no_test))
      (duc_available
         bool
         (alias
            "available")
         (read_only TRUE)
         (help
            "Is this object available?  It may freely become available and unavailable.")
         (no_test))
      ('Unlock Conditions'
         (indent
            (duc_can_relock
               bool
               (alias
                  "can relock?")
               (instance_prop)
               (help
                  "Can the object re-lock after being unlocked?"))
            (duc_use_progression_filter
               bool
               (alias
                  "use progression filter?")
               (instance_prop)
               (help
                  "unlocked by DiscoverySceneProgressionCom?")
               (read_only TRUE))
            (duc_progression_filter
               bool
               (alias
                  "progression filter")
               (instance_prop)
               (help
                  "DiscoverySceneProgressionCom says okay?")
               (read_only TRUE)
               (hide
                  {==
                     [duc_use_progression_filter]
                     FALSE}))
            (duc_use_portal
               bool
               (alias
                  "use portal?")
               (instance_prop)
               (help
                  "Are we unlocked by a portal?"))
            (duc_portal
               object
               (class Entity)
               (components
                  (PulseNodeCom))
               (instance_prop)
               (alias
                  "portal")
               (help
                  "Which portal?")
               (hide
                  {==
                     [duc_use_portal]
                     FALSE}))
            (duc_neighborhood_min_state
               int
               (list NEIGHBORHOOD_STATES_REDUCED)
               (alias
                  "min portal state")
               (instance_prop)
               (help
                  "At what point in a neighborhood progression do we unlock")
               (hide
                  {==
                     [duc_use_portal]
                     FALSE}))
            (duc_use_manual_unlock_filter
               bool
               (alias
                  "use manual unlock filter?")
               (instance_prop)
               (help
                  "Do we have use an externally driven unlock filter?"))
            (duc_manual_unlock_filter
               bool
               (alias
                  "manual unlock filter value")
               (instance_prop)
               (help
                  "Does this object pass manual unlock test?")
               (hide
                  {==
                     [duc_use_manual_unlock_filter]
                     FALSE})))
         (hide
            {!=
               [duc_unlock_parent]
               ''}))
      ('Available Conditions'
         (indent
            (duc_use_solo_filter
               bool
               (alias
                  "use soloing?")
               (help
                  "Do we care about soloing?"))
            (duc_soloed
               bool
               (alias
                  "soloed?")
               (read_only TRUE)
               (help
                  "Are we currently soloed?")
               (hide
                  {==
                     [duc_use_solo_filter]
                     FALSE}))
            (duc_any_soloed
               bool
               (alias
                  "any soloed?")
               (read_only TRUE)
               (help
                  "Is any object soloed?")
               (hide
                  {==
                     [duc_use_solo_filter]
                     FALSE}))
            (duc_use_camera_node
               bool
               (alias
                  "use camera")
               (instance_prop)
               (help
                  "Do we care about the camera node?"))
            (duc_camera_manager
               object
               (class DiscoveryCamManager)
               (alias
                  "camera manager")
               (instance_prop)
               (help
                  "Where's the cam man, man?")
               (read_only TRUE)
               (hide
                  {==
                     [duc_use_camera_node]
                     FALSE}))
            (duc_cam_node
               symbol
               (list
                  {if_else
                     [duc_camera_manager]
                     {[duc_camera_manager]
                        get_node_names}
                     ('')})
               (alias
                  "camera node")
               (instance_prop)
               (help
                  "In which camera node are we unlocked?")
               (hide
                  {==
                     [duc_use_camera_node]
                     FALSE}))
            (duc_use_manual_available_filter
               bool
               (alias
                  "use manual available filter?")
               (instance_prop)
               (help
                  "Do we have use an externally driven unlock filter?"))
            (duc_manual_available_filter
               bool
               (alias
                  "manual available filter value")
               (instance_prop)
               (help
                  "Does this object pass manual unlock test?")
               (hide
                  {==
                     [duc_use_manual_available_filter]
                     FALSE})))
         (hide
            {!=
               [duc_available_parent]
               ''}))
      (Editing
         (indent
            (edit_unlock_override
               script
               (script
                  {$this
                     set
                     duc_edit_overriding
                     {!
                        {$this get duc_edit_overriding}}})
               (alias
                  {if_else
                     [duc_edit_overriding]
                     "Disable Edit Unlocking"
                     "Enable Edit Unlocking"}))
            (edit_unlock
               script
               (script
                  {$this
                     set
                     duc_edit_unlock_override
                     {!
                        {$this get duc_edit_unlock_override}}})
               (alias
                  {if_else
                     [duc_edit_unlock_override]
                     "Edit: Unlock"
                     "Edit: Lock"})
               (hide
                  {==
                     [duc_edit_overriding]
                     FALSE}))
            (edit_available
               script
               (script
                  {$this
                     set
                     duc_edit_available_override
                     {!
                        {$this get duc_edit_available_override}}})
               (alias
                  {if_else
                     [duc_edit_available_override]
                     "Edit: Make Available"
                     "Edit: Make Unavailable"})
               (hide
                  {==
                     [duc_edit_overriding]
                     FALSE}))))))
(SequencerStepCom
   (description
      "Placed on entities that represent a single step or cell within a step sequencer row")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (step_quantization
         int
         (list
            (BEAT_QUANTIZATIONS_BASE))
         (alias
            "Step Quantization")
         (help
            "How is this step beat quantized?"))
      (cur_pitch
         int
         (range 0 127)
         (alias
            "Cur Pitch")
         (help
            "The pitch that will play when this step is triggered"))
      (step_toggled_on
         bool
         (alias
            "Step Toggled On?")
         (help
            "Is this step on, meaning it will play a note when it has its turn in a sequencer.  Flow commands can toggle this..."))
      (step_is_current
         bool
         (read_only TRUE)
         (alias
            "Is Step Current?")
         (no_test)
         (help
            "Is it this step's turn to play in the sequencer?"))
      (sequencer_on
         bool
         (read_only TRUE)
         (alias
            "Sequencer On")
         (no_test)
         (help
            "This step is tied to a sequencer that is on?"))
      (test_toggle_on
         script
         (script
            {$this
               force_toggled_on
               {!
                  [step_toggled_on]}})
         (help
            "Will toggle step on and off"))
      (test_is_current
         script
         (script
            {$this
               force_is_current
               {!
                  [step_is_current]}})
         (help
            "Will toggle is_step_current flag on and off"))
      (test_sequencer_on
         script
         (script
            {$this
               force_sequencer_on
               {!
                  [sequencer_on]}})
         (help
            "Will toggle seqeuncer_on flag on and off"))
      (test_trigger_step
         script
         (script
            {export
               ($this
                  on_step_triggered
                  [cur_pitch])
               FALSE})
         (help
            "Simulates triggering the step, meaning it should light up and play its sound")))
   (events_in
      (force_is_current
         (editor
            (on
               bool
               (default TRUE)
               (help
                  "turning is_current on or off")))
         (help
            "Forces the is_current flag, making the step available to play a note on its turn")))
   (events_out
      (on_step_triggered
         (editor
            (step_pitch_triggered
               int
               (default 1)
               (help
                  "The pitch that was just triggered")))
         (help
            "Called when this step should play a pitch, meaning its been toggled on and has just become current."))))
(StepSequencerRecorderCom
   (description
      "Placed on StepSequencerRow to make it record")
   (user_can_add TRUE)
   (required_classes StepSequencerRow)
   (editor
      (stepseq_num_record_beats
         float
         (help
            "Number of beats in record loop"))
      (stepseq_record_state
         int
         (list DISCOVERY_RECORDABLE_STATES)
         (no_test)))
   (events_in
      (reset_recording
         (help
            "Clears current recording"))))
(TargetGoalCom
   (description
      "Attached to an object that a Target moves towards over time")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (target_goal_auto_rotate
         bool
         (read_only TRUE)
         (alias
            "auto rotate")
         (help
            "Does this TargetGoalCom rotate itself based on the gesture it is representing?"))
      (target_goal_suffix
         int
         (list FLUX_TARGET_SUFFIXES)
         (no_test)
         (alias
            "suffix")
         (help
            "What kind of suffix (sustain/activity) does this target have?"))
      (target_goal_progress
         float
         (no_test)
         (alias
            "progress")
         (help
            "How close is the player to executing this cue (0-1)?"))
      (target_goal_suffix_progress
         float
         (no_test)
         (alias
            "suffix progress")
         (help
            "How close is the user to completing the suffix part of this target?"))
      (target_goal_suffix_activity
         float
         (no_test)
         (alias
            "suffix activity")
         (help
            "How fast is the user's hand moving during the suffix part of this target?"))
      (target_goal_time_until_ready
         float
         (no_test)
         (alias
            "time until ready")
         (help
            "Time until gesture time, in seconds"))
      (target_goal_beats_until_ready
         float
         (no_test)
         (alias
            "beats until ready")
         (help
            "Time until gesture time, in beats"))
      (target_goal_beats_until_suffix_done
         float
         (no_test)
         (alias
            "beats until suffix done")
         (help
            "Time until the suffix is complete, in beats"))
      (target_goal_time_since_activated
         float
         (no_test)
         (alias
            "time since activated")
         (help
            "Time since this was activated, in seconds"))
      (target_goal_optional
         bool
         (no_test)
         (alias
            "optional")
         (help
            "Is this for a choice gesture?"))
      (target_goal_color_id
         int
         (list FLUX_TARGET_COLORS)
         (no_test)
         (alias
            "color id")
         (help
            "Integer ID (starting from 0) for the hue of the TargetGoalCom."))
      (target_goal_effects_color
         int
         (list FLUX_TARGET_COLORS)
         (no_test)
         (alias
            "effects color")
         (help
            "Integer ID (starting from 0) for the hue of the hit effects."))
      (target_goal_shape_turn
         float
         (no_test)
         (alias
            "shape turn")
         (help
            "Angle (0--360) of the TargetGoalCom."))
      (target_goal_line_shape
         int
         (list FLUX_TARGET_SHAPES)
         (no_test)
         (alias
            "line shape")
         (help
            "The kind of shape the line is"))
      (target_goal_sustain_object_p1
         object
         (class Trans)
         (components
            (TargetSuffixCom))
         (alias
            "sustain object")
         (help
            "TargetSuffixCom for sustain suffixes")
         (disk_prop))
      (target_goal_sustain_object_p2
         object
         (class Trans)
         (components
            (TargetSuffixCom))
         (alias
            "sustain object (player 2)")
         (help
            "TargetSuffixCom for sustain suffixes")
         (disk_prop))
      (target_goal_max_hand_speed
         float
         (no_test)
         (alias
            "max hand speed")
         (help
            "What's the fastest that the hand that hit this target has moved since the hit?"))
      (target_goal_state
         int
         (list FLUX_TARGETGOAL_STATE)
         (no_test)
         (alias
            "state")
         (help
            "What is the current state of the TargetGoalCom?"))
      (target_goal_choice
         bool
         (no_test)
         (alias
            "choice")
         (help
            "Is this part of a choice gesture?"))
      (target_goal_choice_target_enable
         bool
         (no_test)
         (alias
            "choice target enable")
         (help
            "Is this a choice-enabling z-push?"))
      (target_goal_enabled
         bool
         (no_test)
         (alias
            "enabled")
         (help
            "Is the target active at all?"))
      (target_goal_phrase_position
         float
         (no_test)
         (alias
            "phrase position")
         (help
            "Position in phrase (0-1, 0 if not in phrase)"))
      (target_goal_suffix_pos_x
         float
         (no_test)
         (alias
            "suffix pos x")
         (help
            "Hand position relative to start of sustain/activity - x value"))
      (target_goal_suffix_pos_y
         float
         (no_test)
         (alias
            "suffix pos y")
         (help
            "Hand position relative to start of sustain/activity - y value"))
      (target_player_disposition
         int
         (list FLUX_TARGET_PLAYER_DISPOSITIONS)
         (no_test)
         (alias
            "Player disposition")
         (help
            "Which player or players am I assigned to?"))
      (target_goal_pre_choice_beats
         float
         (no_test)
         (alias
            "pre choice beats")
         (help
            "For choice swipes, how many beats between the z-push and the swipe?"))
      (target_goal_enable_progress
         float
         (no_test)
         (alias
            "enable progress")
         (help
            "For choice swipes, how close is the z-push to being hit?"))
      (target_goal_current_eval
         float
         (no_test)
         (alias
            "current eval")
         (help
            "What is the instantaneous evaluation of the player's gesture?")))
   (events_out
      (hit
         (editor
            (hitting_player
               int
               (list
                  (0 1))
               (help
                  "Which player just hit the target?"))))
      (pass)
      (suffix_hit)
      (suffix_pass)
      (reset
         (help
            "Note that the Target associated with this TargetGoalCom is going away"))
      (hook_up_target
         (help
            "Note that this TargetGoalCom just became associated with a Target")
         (editor
            (target
               object
               (class Target)
               (help
                  "The Target moving towards this TargetGoalCom"))
            (target_type
               symbol
               (list
                  {elem
                     {find $syscfg targets descriptions}
                     1})
               (default N_either)
               (help
                  "Symbol from targets.dta for this target"))))
      (end_phrase
         (help
            "Called when the user fails a phrase or completes it successfully")
         (editor
            (phrase_success
               bool
               (help
                  "Was the phrase completed successfully or not?"))))
      (other_cue_hit
         (help
            "A different choice cue from us was just hit"))
      (hide
         (help
            "Hide this cue"))))
(TargetDestinationCom
   (description
      "Attached to an mark that a TargetGoalCom gets attached to")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (target_destination_active
         bool
         (alias
            "active")
         (help
            "Is this TargetDestinationCom currently available for use?"))
      (target_destination_id
         int
         (alias
            "ID")
         (help
            "Unique ID for this TargetDestinationCom"))
      (target_destination_auto_rotate
         bool
         (alias
            "auto rotate")
         (help
            "Does the attached goal rotate itself based on the gesture it is representing?"))
      (target_destination_twin
         object
         (class Trans)
         (components
            (TargetDestinationCom))
         (alias
            "twin")
         (help
            "TargetDestinationCom that we are twinned to; used for bidirectional polyhedron edges")
         (instance_prop))
      (target_destination_backward_twin
         bool
         (instance_prop)
         (alias
            "is backward twin?")
         (instance_prop)
         (hide
            {!
               [target_destination_twin]}))
      (target_destination_in_hedron
         bool
         (instance_prop)
         (alias
            "in 3d shape?")
         (help
            "Is this on the edge of a 3d shape?")))
   (events_in
      (hide
         (help
            "Hide the cue at this destination"))))
(TargetSourceCom
   (description
      "Attached to an object that a Target moves from over time")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (target_source_active
         bool
         (help
            "Is this TargetSourceCom currently available for use by Targets?"))
      (target_source_id
         int
         (help
            "Unique ID for this TargetSourceCom"))))
(TargetSuffixCom
   (description
      "Suffix element of a TargetGoalCom")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (target_suffix_state
         int
         (list FLUX_TARGET_SUFFIX_STATES)
         (alias
            "state")
         (no_test)
         (help
            "Current state of the entity"))
      (target_suffix_color
         int
         (list FLUX_TARGET_COLORS)
         (alias
            "color")
         (no_test)
         (help
            "Color of the entity"))
      (target_suffix_progress
         float
         (alias
            "progress")
         (no_test)
         (help
            "How close is the user to completing the sustain/activity part of this target?"))
      (target_suffix_activity
         float
         (alias
            "activity")
         (no_test)
         (help
            "How fast is the user's hand moving during the sustain/activity part of this target?"))
      (target_suffix_pos_x
         float
         (no_test)
         (alias
            "suffix pos x")
         (help
            "Hand position relative to start of sustain/activity - x value"))
      (target_suffix_pos_y
         float
         (no_test)
         (alias
            "suffix pos y")
         (help
            "Hand position relative to start of sustain/activity - y value"))
      (target_suffix_pos_magnitude
         float
         (no_test)
         (alias
            "suffix pos magnitude")
         (help
            "Distance of hand position from zero point (1 = fail)"))
      (target_suffix_beats_until_done
         float
         (no_test)
         (alias
            "beats until suffix done")
         (help
            "Time until the suffix is complete, in beats"))))
#define INSTRUMENT_TRANSFORM
((struct
      (icon_x
         float
         (help
            "horizontal position of icon"))
      (icon_z
         float
         (help
            "vertical position of icon"))
      (icon_roll
         float
         (help
            "angle of icon"))
      (icon_scale
         float
         (help
            "scale of icon"))))
(TargetPropAnimCom
   (description
      "Attached to an animation that has keys showing the targets in the FluxSong")
   (user_can_add TRUE)
   (required_classes PropAnim)
   (editor
      (cue_data FLUX_CUE PROPANIM_ONLY)
      (cue_data2 FLUX_CUE PROPANIM_ONLY)
      (cue_data_left FLUX_CUE PROPANIM_ONLY)
      (cue_data_right FLUX_CUE PROPANIM_ONLY)
      (phrases
         bool
         (alias
            "Phrases")
         PROPANIM_ONLY)
      (player_disposition
         int
         (list FLUX_TARGET_PLAYER_AUTHORING)
         (alias
            "Player")
         PROPANIM_ONLY)
      (goal symbol PROPANIM_ONLY)
      (mix
         int
         (list FLUX_TARGET_MIXES_OPTIONAL)
         (help
            "Which mix is authored in this propanim")
         (hide propanim))
      (no_choice
         bool
         (help
            "Use this alternate authoring when choice gestures are disabled")
         (hide propanim))
      (part
         int
         (list FLUX_TARGET_PARTS)
         (alias
            "Authored Part")
         (help
            "Which part (stem) are the cues authored to")
         (tab debug)
         (no_test)
         (propanim_annotate
            ($anim $prop $index)
            {do
               ($ary
                  {array 0})
               {$anim
                  foreach_keyframe
                  $this
                  $prop
                  $frame
                  $val
                  {set
                     $ary
                     {flatten
                        $ary
                        {$this get_choice_annotations $frame}}}}
               $ary}))
      (hedron
         object
         (class Entity)
         (components
            (PulseHedronCom))
         (tab debug)
         (no_test))
      (manipulator
         object
         (class Entity)
         (components
            (ManipulatorInterfaceCom))
         (tab debug)
         (no_test)
         (propanim_annotate
            ($anim $prop $index)
            {do
               ($dir
                  {$this dir})
               {if_else
                  {&&
                     $dir
                     {$dir has_component GestureBeatmatchDirectorCom}
                     {$dir get song}}
                  {do
                     ($song
                        {$dir get song})
                     ($ary
                        {array 0})
                     ($end 0)
                     {foreach_int
                        $i
                        0
                        {$song
                           size
                           (segments)}
                        {if
                           {&&
                              {> $i 0}
                              {<
                                 $end
                                 {$song
                                    get
                                    (segments $i offset ticks)}}}
                           {push_back
                              $ary
                              {flatten
                                 $end
                                 "[end]"}}}
                        {push_back
                           $ary
                           {flatten
                              {$song
                                 get
                                 (segments $i offset ticks)}
                              {sprintf
                                 "[%s %s]"
                                 {$song
                                    get
                                    (segments $i name)}
                                 {$song
                                    get
                                    (segments $i type)}}}}
                        {foreach_int
                           $j
                           1
                           {$song
                              size
                              (segments $i subsegments)}
                           {if_else
                              {==
                                 {$song
                                    get
                                    (segments $i subsegments $j name)}
                                 ''}
                              {push_back
                                 $ary
                                 {flatten
                                    {$song
                                       get
                                       (segments $i subsegments $j offset ticks)}
                                    "[subsegment]"}}
                              {push_back
                                 $ary
                                 {flatten
                                    {$song
                                       get
                                       (segments $i subsegments $j offset ticks)}
                                    {sprintf
                                       "[subsegment %s]"
                                       {$song
                                          get
                                          (segments $i subsegments $j name)}}}}}}
                        {set
                           $end
                           {'+'
                              {$song
                                 get
                                 (segments $i offset ticks)}
                              {$song
                                 get
                                 (segments $i duration ticks)}}}}
                     {if
                        {>
                           {$song
                              size
                              (segments)}
                           0}
                        {push_back
                           $ary
                           {flatten
                              $end
                              "[end]"}}}
                     $ary}
                  kDataUnhandled}}))
      (ensemble_icons
         (struct
            (drums
               object
               (class Tex)
               (help
                  "Instrument icon for drum stem"))
            (bass
               object
               (class Tex)
               (help
                  "Instrument icon for bass stem"))
            (guitar
               object
               (class Tex)
               (alias
                  "guitar/synth")
               (help
                  "Instrument icon for guitar/synth stem"))
            (vocals
               object
               (class Tex)
               (help
                  "Instrument icon for vocal stem"))
            (misc
               object
               (class Tex)
               (help
                  "Instrument icon for misc stem")))
         (alias
            "instrument icons")
         (help
            "Instrument icons"))
      (ensemble_xfms
         (array
            (struct
               (drums
                  INSTRUMENT_TRANSFORM
                  (help
                     "Position of drum icon"))
               (bass
                  INSTRUMENT_TRANSFORM
                  (help
                     "Position of bass icon"))
               (guitar
                  INSTRUMENT_TRANSFORM
                  (alias
                     "guitar/synth")
                  (help
                     "Position of guitar/synth icon"))
               (vocals
                  INSTRUMENT_TRANSFORM
                  (help
                     "Position of vocal icon"))
               (misc
                  INSTRUMENT_TRANSFORM
                  (help
                     "Position of misc icon"))))
         (alias
            "instrument positions")
         (help
            "Instrument positions for each slot"))
      (ensemble_debug
         bool
         (alias
            "instrument placement mode")
         (no_test)
         (help
            "Turn on to show this ensemble in all slots")))
   (events_out))
(FluxCueProxyCom
   (description
      "Attached to an entity used to author the position of cues")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (flux_cue_proxy_suffix
         int
         (list FLUX_TARGET_SUFFIXES)
         (no_test)
         (alias
            "suffix")
         (help
            "What kind of suffix (sustain/activity) does this target have?"))
      (flux_cue_proxy_shape
         symbol
         (list
            {elem
               {find $syscfg targets shapes}
               1})
         (no_test)
         (alias
            "shape")
         (help
            "Symbol from targets.dta for this target shape"))
      (flux_cue_proxy_shape_turn
         float
         (no_test)
         (alias
            "shape turn")
         (help
            "Angle (0--360) of the TargetGoalCom."))
      (flux_cue_proxy_line_shape
         int
         (list FLUX_TARGET_SHAPES)
         (no_test)
         (alias
            "line shape")
         (help
            "The kind of shape the line is"))))
(PulseHedronCom
   (description
      "Attached to an entity that is used as a beatmatchable polyhedron (e.g. cube). Should contain several subentities with PulseHedronEdgeCom components.")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (hedron_shape_name
         symbol
         (list HEDRON_SHAPE_NAMES)
         (alias
            "shape name")
         (help
            "Short name for this shape, can be tested in flow"))
      (hedron_manipulator_type
         int
         (list MANIPULATOR_TYPES_OPTIONAL)
         (alias
            "manipulator type")
         (help
            "type of manipulator this shape goes with"))
      (hedron_active
         bool
         (alias
            "active")
         (hide propanim)
         (no_test)
         (help
            "Are we in a beatmatch sequence for this shape?"))
      (hedron_current_snapshot
         symbol
         (alias
            "current snapshot")
         (no_test)
         (list
            {$this get_snapshot_names})
         (help
            "Which snapshot is currently active"))
      (hedron_rotate_trans
         object
         (class Trans)
         (alias
            "rotation trans")
         (help
            "Trans object to be rotated by physics and authoring")
         (disk_prop))
      (hedron_rot_speed
         float
         (alias
            "rotation speed")
         (help
            "Multiplier on the rotation speed"))
      (hedron_rot_active
         bool
         (alias
            "rotation active")
         (no_test)
         (help
            "Is snapshot-based rotation currently active?"))
      (hedron_enable_dynamic_rotation
         bool
         (alias
            "dynamic rotation")
         (no_test)
         (help
            "Is the dynamic rotation system active?"))
      (hedron_max_edge_capture
         int
         (alias
            "max edge capture")
         (help
            "How many times can each edge be captured?"))
      (hedron_num_edges
         int
         (alias
            "edge count")
         (read_only TRUE)
         (help
            "How many edges this polyhedron has"))
      (hedron_capture_fraction
         float
         (alias
            "capture progress")
         (read_only TRUE)
         (help
            "Current progress toward capture (0-1)"))
      (hedron_in_bonus
         bool
         (alias
            "in bonus mode?")
         (read_only TRUE)
         (help
            "Have we entered bonus mode (have all edges been captured)?"))
      (hedron_bonus_streak
         int
         (alias
            "bonus streak")
         (read_only TRUE)
         (help
            "How many consecutive edges have been hit in bonus mode?"))
      (hedron_multiplier
         int
         (alias
            "multiplier")
         (read_only TRUE)
         (help
            "What is the current score multiplier?"))
      (hedron_auto_target_id
         int
         (alias
            "Auto target ID")
         (disk_prop)
         (help
            "What target ID should be used for auto-assigned targets"))
      (hedron_snapshots
         (array
            (struct
               (name
                  symbol
                  (help
                     "User-friendly name for this snapshot. Caution: changing this can break authoring!"))
               (rotation
                  QUAT
                  (help
                     "Target rotation for this snapshot"))
               (Keyframe!
                  script
                  (script
                     {$this
                        capture_snapshot
                        {elem $editor_prop_path 1}})
                  (help
                     "Capture current transform of object into this snapshot"))))
         (alias
            "snapshots")
         (help
            "List of rotation snapshots")
         (disk_prop))
      (sync_snapshots
         script
         (script
            {$this sync_snapshots})
         (tab debug)
         (disk_prop))
      (hedron_all_snapshots
         (array
            (struct
               (base_snapshot symbol)
               (symmetry_index int)
               (suitable_edges
                  (array int))
               (suitable_shape_turns
                  (array float))))
         (alias
            "all snapshots")
         (tab debug)
         (read_only TRUE))
      (hedron_debug_snapshot_idx
         int
         (alias
            "test snapshot index")
         (tab debug)
         (no_test))
      (authoring_updates
         (indent
            (hedron_outdated_authoring
               bool
               (alias
                  "update needed?")
               (read_only TRUE)
               (no_test))
            (update_authoring
               script
               (script
                  {$this update_authoring})))
         (instance_prop))
      (hedron_test_hit
         script
         (script
            {$this test_hit})
         (alias
            "Test Hit")
         (help
            "Simulate successfully swiping all edges"))
      (symmetries
         (indent
            (hedron_symmetry_group
               (array QUAT)
               (alias
                  "Symmetry group"))
            (generate_symmetry_group
               script
               (script
                  {$this generate_symmetry_group}))
            (add_current_symmetry
               script
               (script
                  {$this add_user_symmetry})))
         (disk_prop)))
   (events_out
      (hit
         (editor)
         (help
            "sent when any edge has been successfully swiped"))
      (on_reset
         (editor)
         (help
            "sent when the object is reset"))
      (on_rotate
         (editor)
         (help
            "sent when the object is visible and rotates"))
      (bonus_hit
         (editor
            (streak
               int
               (help
                  "bonus streak after this hit is counted")))
         (help
            "sent when an edge is hit during bonus mode"))
      (bonus_lose_streak
         (editor
            (lost_streak
               int
               (help
                  "bonus streak before this miss was counted")))
         (help
            "sent when streak is lost during bonus mode"))
      (on_start
         (editor)
         (help
            "sent when a shape beatmatching sequence is started"))
      (on_enter_bonus
         (editor)
         (help
            "sent when all edges have been captured"))
      (on_finish_won
         (editor)
         (help
            "sent when a shape beatmatching sequence ends with all edges captured"))
      (on_finish_lost
         (editor)
         (help
            "sent when a shape beatmatching sequence ends without all edges captured")))
   (events_in
      (reset
         (editor)
         (help
            "send this event to reset all of the edges to their initial state."))))
(PulseHedronEdgeCom
   (description
      "Attached to an entity that represents a beatmatchable edge of a PulseHedron.")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (hedronedge_destination_id
         int
         (alias
            "destinationcom id")
         (help
            "ID number to be used for the embedded destinationcom"))
      (hedronedge_capture_state
         int
         (alias
            "capture state")
         (no_test)
         (help
            "How many times this edge has been captured"))
      (hedronedge_drawsphere_delegate
         object
         (class Draw)
         (alias
            "draw sphere delegate")
         (disk_prop)
         (help
            "Object the edge should take its draw sphere from, to help with draw order"))
      (hedronedge_billboarder_trans
         object
         (class Trans)
         (alias
            "billboarder trans")
         (disk_prop)
         (help
            "A Z billboard constraint will be applied to this trans, including updating its local transform."))
      (hedronedge_test_hit
         script
         (script
            {$this test_hit})
         (alias
            "Test Hit")
         (help
            "Simulate successfully swiping this edge")))
   (events_out
      (hit
         (editor
            (goalcom
               object
               (class Trans)
               (components
                  (TargetDestinationCom))
               (help
                  "which TargetDestinationCom generated this hit message?"))
            (edge_captured
               bool
               (help
                  "was this edge just captured?"))))
      (on_reset
         (editor))
      (on_start
         (editor)
         (help
            "sent when a shape beatmatching sequence is started"))
      (on_enter_bonus
         (editor)
         (help
            "sent when all edges have been captured"))
      (on_finish_won
         (editor)
         (help
            "sent when a shape beatmatching sequence ends with all edges captured"))
      (on_finish_lost
         (editor)
         (help
            "sent when a shape beatmatching sequence ends without all edges captured")))
   (events_in
      (reset
         (editor))))
(PulseHedronFaceCom
   (description
      "Entity representing a face of a polyhedron which can light up when completed.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (hedronface_captured
         bool
         (alias
            "captured?")
         (help
            "Have all of the edges been captured?")
         (no_test))
      (hedronface_edges
         (array
            object
            (class Entity)
            (components
               (PulseHedronEdgeCom)))
         (alias
            "edges")
         (instance_prop)
         (help
            "Edges which are adjacent to this face"))
      (hedronface_drawsphere_delegate
         object
         (class Draw)
         (alias
            "draw sphere delegate")
         (disk_prop)
         (help
            "Object the face should take its draw sphere from, to help with draw order"))
      (hedronface_edgetool
         (indent
            (hedronface_edgetool_num_edges
               int
               (no_test)
               (alias
                  "number of edges"))
            (hedronface_runedgetool
               script
               (script
                  {$this hedronface_runedgetool})
               (alias
                  "find closest edges")))
         (alias
            "edge finder tool")
         (instance_prop)))
   (events_out
      (on_reset
         (editor))
      (on_start
         (editor)
         (help
            "sent when a shape beatmatching sequence is started"))
      (on_enter_bonus
         (editor)
         (help
            "sent when all edges have been captured"))
      (on_finish_won
         (editor)
         (help
            "sent when a shape beatmatching sequence ends with all edges captured"))
      (on_finish_lost
         (editor)
         (help
            "sent when a shape beatmatching sequence ends without all edges captured"))))
(ChoiceEnsembleCom
   (description
      "Component on the choice ensemble icon sub-entity")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (choiceensemble_slot
         int
         (list FLUX_TARGET_SLOTS)
         (alias
            "slot")
         (instance_prop)
         (help
            "slot this ensemble is for"))
      (choiceensemble_instruments
         (array
            (struct
               (icon_mesh
                  object
                  (class Mesh)
                  (help
                     "mesh for this instrument"))
               (icon_mat
                  object
                  (class Mat)
                  (help
                     "material for this instrument"))))
         (help
            "list of meshes/materials for each part's instrument icon")
         (alias
            "instruments")
         (disk_prop))
      (choiceensemble_icon_tex_prop
         prop_ref
         (allowed_prop_types
            (object))
         (allow_read_only_props FALSE)
         (fixed_obj
            {if_else
               {>
                  {size
                     [choiceensemble_instruments]}
                  0}
               [choiceensemble_instruments 0 icon_mat]
               ''})
         (alias
            "instrument texture prop")
         (disk_prop)
         (help
            "name of material property to set to the instrument icon texture")))
   (events_out)
   (events_in))
(ChoiceTargetCom
   (description
      "Handles visual behavior of choice gesture moments in Pulse")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (choicetarget_choice_assets
         (array
            (struct
               (target
                  object
                  (components
                     (TargetDestinationCom))
                  (help
                     "target to be used for this option"))
               (target_dir
                  int
                  (list TARGET_DIRECTIONS)
                  (help
                     "which direction this option goes"))
               (ensemble
                  object
                  (class Entity)
                  (components
                     (ChoiceEnsembleCom))
                  (help
                     "ensemble sub-entity"))))
         (alias
            "choice assets")
         (disk_prop))
      (choicetarget_choice_asset_zpush
         object
         (components
            (TargetDestinationCom))
         (alias
            "z-push choice assets")
         (disk_prop)
         (help
            "entity for the z-push engage gesture"))
      (choicetarget_source_single
         object
         (components
            (TargetSourceCom))
         (alias
            "single-player source")
         (disk_prop)
         (help
            "source location for single-player choice"))
      (choicetarget_source_multi1
         object
         (components
            (TargetSourceCom))
         (alias
            "multi-player player 1 source")
         (disk_prop)
         (help
            "source location for player 1 choice in multi-player"))
      (choicetarget_source_multi2
         object
         (components
            (TargetSourceCom))
         (alias
            "multi-player player 2 source")
         (disk_prop)
         (help
            "source location for player 2 choice in multi-player"))
      (choicetarget_goal_trans
         object
         (class Trans)
         (disk_prop)
         (help
            "object which serves as the target for the dart"))
      (choicetarget_active
         bool
         (alias
            "active")
         (help
            "is choice target active")
         (no_test))
      (choicetarget_stayup
         bool
         (alias
            "stay up")
         (help
            "should clouds stay up after choice")
         (no_test))
      (choicetarget_choice_part
         int
         (list FLUX_TARGET_PARTS_FULL)
         (alias
            "choice part")
         (help
            "part being chosen")
         (no_test))
      (choicetarget_player
         int
         (list
            (0 1))
         (no_test)
         (help
            "which player gets to make the choice?"))
      (choicetarget_forced_slot
         int
         (list FLUX_TARGET_SLOTS_OPTIONAL)
         (no_test)
         (help
            "which slot is soloed"))
      (choicetarget_setup
         script
         (script
            {$this
               set_choice_info
               [choicetarget_choice_part]
               {pulse_passthrough get slots_enabled}
               [choicetarget_forced_slot]})
         (alias
            "setup")
         (help
            "enable all slots and set choice part and current slot for testing")))
   (events_out
      (set_slot_state
         (help
            "")
         (editor
            (slot
               int
               (list FLUX_TARGET_SLOTS)
               (help
                  "which slot to set state for")
               (no_validate))
            (slot_unlocked
               bool
               (help
                  "has this slot been previously unlocked"))
            (slot_enabled
               bool
               (help
                  "is this slot currently allowed to be picked"))))
      (preview_slot
         (help
            "")
         (editor
            (preview_slot
               int
               (list FLUX_TARGET_SLOTS_OPTIONAL)
               (help
                  "which slot is currently previewed"))
            (preview_level
               float
               (range 0.0 1.0)
               (help
                  "preview fade level"))))
      (on_activate
         (help
            "sent when the choice gesture is activated")
         (editor))
      (on_deactivate
         (help
            "sent when the choice gesture is deactivated (hit or passed)")
         (editor))
      (on_target_activated
         (help
            "sent when the first target inside this is activated")
         (editor))
      (on_engage
         (help
            "sent when the z-push has been hit")
         (editor))
      (on_hit
         (help
            "sent when one of the choice gestures is hit")
         (editor
            (chosen_slot
               int
               (list FLUX_TARGET_SLOTS)
               (help
                  "chosen slot")
               (no_validate))))
      (on_pass
         (help
            "sent when all of the choice gestures are passed")
         (editor))
      (ensemble_debug
         (help
            "go into ensemble debug mode")))
   (events_in))
(PulsePlayerStateCom
   (description
      "Receives player-specific properties and events in Pulse")
   (user_can_add TRUE)
   (editor
      (player_state_player_num
         int
         (alias
            "player number")
         (list
            (0 1)))
      (player_section_hits
         int
         (help
            "Number of targets this player has hit in the current section")
         (no_test))
      (player_section_progress
         float
         (help
            "Fraction of targets this player has hit in the current section (0-1)")
         (no_test))
      (player_choice_multiplier
         int
         (help
            "Multiplier from choice gestures")
         (no_test))
      (player_streak
         int
         (help
            "Current streak")
         (no_test))
      (player_score
         int
         (help
            "Current score")
         (no_test))
      (player_hedron_score
         int
         (help
            "Current hedron score")
         (no_test))
      (player_has_skeleton
         bool
         (help
            "Do we have a good skeleton for the player?")
         (no_test))
      (player_left_hand_angle
         float
         (help
            "Current angle of left hand motion (0-360)")
         (no_test))
      (player_left_hand_smoothed_angle
         float
         (help
            "Smoothed angle of left hand motion (0-360)")
         (no_test))
      (player_left_hand_speed
         float
         (help
            "Speed of left hand motion")
         (no_test))
      (player_left_hand_smoothed_speed
         float
         (help
            "Speed of left hand motion, decays slowly")
         (no_test))
      (player_right_hand_angle
         float
         (help
            "Current angle of right hand motion (0-360)")
         (no_test))
      (player_right_hand_smoothed_angle
         float
         (help
            "Smoothed angle of left hand motion (0-360)")
         (no_test))
      (player_right_hand_speed
         float
         (help
            "Speed of right hand motion")
         (no_test))
      (player_right_hand_smoothed_speed
         float
         (help
            "Speed of right hand motion, decays slowly")
         (no_test))
      (player_left_hand_x
         float
         (help
            "Left hand position")
         (no_test))
      (player_left_hand_y
         float
         (help
            "Left hand position")
         (no_test))
      (player_left_hand_z
         float
         (help
            "Left hand position")
         (no_test))
      (player_right_hand_x
         float
         (help
            "Right hand position")
         (no_test))
      (player_right_hand_y
         float
         (help
            "Right hand position")
         (no_test))
      (player_right_hand_z
         float
         (help
            "Left hand position")
         (no_test))
      (player_head_x
         float
         (help
            "Head position")
         (no_test))
      (player_head_y
         float
         (help
            "Head position")
         (no_test))
      (player_hip_center_x
         float
         (help
            "Hip center position")
         (no_test))
      (player_hip_center_y
         float
         (help
            "Hip center position")
         (no_test)))
   (events_out
      (TARGET_HIT)
      (section_end_hit
         (help
            "The final cue of a section was just hit"))
      (section_end_pass
         (help
            "The final cue of a section was just missed"))))
(EntityTransformerCom
   (description
      "Attached to entities that want to be transformed into other entities by EntityTransformer objects")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (transformer_pivot
         object
         (class Trans)
         (disk_prop)
         (help
            "An optional trans to use as the location we position the next generation entity when we transform into it.  Otherwise the entity's location is used..."))
      (which_generation
         int
         (read_only TRUE)
         (no_test)
         (help
            "which generation am I part of, starting at 0?"))
      (which_split
         int
         (read_only TRUE)
         (no_test)
         (help
            "if we split into multiple copies, which copy is this?  starting at 0...")))
   (events_in
      (transform_entity
         (editor
            (goto_next_gen
               bool
               (default TRUE)
               (help
                  "Transform to the next generation in the chain?  If false, you specify the gen # directly"))
            (next_gen_num
               int
               (default 0)
               (help
                  "If 'goto_next_gen' is FALSE, then this specifies the generation we will go to.  Starting at 0...")))
         (help
            "triggers transformation to next generation, if there is one.  Will also remove this entity from the world."))
      (spawn_generation
         (editor
            (goto_next_gen
               bool
               (default TRUE)
               (help
                  "Transform to the next generation in the chain?  If false, you specify the gen # directly"))
            (next_gen_num
               int
               (default 0)
               (help
                  "If 'goto_next_gen' is FALSE, then this specifies the generation we will go to.  Starting at 0...")))
         (help
            "Spawns a specified generation of entities at the same position as this entity, but will NOT remove this entity from the world."))
      (force_recall_entity
         (help
            "Will remove this entity, without transformation.  Should typically be called after some animation path has played.")))
   (events_out
      (on_spawned_generation
         (editor
            (spawned_gen_num
               int
               (help
                  "which generation #, starting at 0."))
            (spawned_split_num
               int
               (help
                  "if we split into multiple copies, which copy is this?  starting at 0")))
         (help
            "Called right after this entity spawned, providing which generation # it is"))))
(ScreenDistProximityCom
   (description
      "Attached to transes/entities involved in perspective puzzles that want to know when other similar entities are in close proximity in 2D screenspace")
   (user_can_add disk)
   (required_classes Trans)
   (editor
      (screen_dist_pivot
         object
         (class Trans)
         (disk_prop)
         (help
            "An optional trans used as the centerpoint for any screen distance computations.  Will use entities pivot if this is not specified..."))
      (proximity_progress_range
         float
         (range 0.0 1.0)
         (slider)
         (help
            "Min screen distance (0..1) under which proximity_progress starts ramping from 0 to 1.  So proximity_progress is 0 when nearest entity is greater than this screen distance away."))
      (user_data
         int
         (help
            "Allows clients to encode some game state here to pass to other proximity entities when they are activated"))
      (proximity_progress
         float
         (read_only TRUE)
         (no_test)
         (help
            "from 0 to 1, will be 0 when no entities in the same proximity group are near, and 1 when super close.")))
   (events_in)
   (events_out
      (on_proximity_activated
         (editor
            (proximity_user_data
               int
               (help
                  "the user_data flag on the entity that activated us, which can contain valuable gamestate for flows")))
         (help
            "Called when another entity in the same proximity crosses the required screen threshold to 'activate' this entity"))))
(DiscoveryDollyPanCom
   (description
      "Component that drives CameraPanTiltRollCom's pan and/or CameraDollyCom's x dolly with discovery position")
   (user_can_add TRUE)
   (required_classes CameraNode)
   (editor))
(GestureDeformationCom
   (description
      "Sets material properties to deform a mesh based on beat match gestures")
   (user_can_add TRUE)
   (required_classes Mesh)
   (editor
      (wave_amplitude
         float
         (help
            "Peak amplitude of generated waves"))
      (wave_falloff
         float
         (help
            "Distance over which the wave falls off"))
      (wave_duration
         float
         (help
            "Lifetime of the wave"))
      (wave_frequency
         float
         (help
            "Number of waves generated throughout the falloff"))
      (wave_speed
         float
         (help
            "Speed the wave travels at"))
      (update_bb
         script
         (alias
            "Update Mesh Bounding Box")
         (script
            {$this update_bounding_box})
         (help
            "Updates the bounding box of the mesh"))))
(DiscoverySceneRotationCom
   (description
      "Calculates the rotation angle of Discovery scenes that rotate (i.e. the level select balcony).")
   (user_can_add TRUE)
   (required_classes Scene)
   (editor
      (DiscoverySceneRotationCom
         (struct
            (rotation_margin
               float
               (range 0.0 1.0)
               (help
                  "The width of the margins on the left and right sides of the screen, in screenspace, that cursor must enter to trigger rotation."))
            (rotation_speed
               float
               (range 0.0 360.0)
               (help
                  "The speed, in degrees per second, that the target angle is changed when rotating."))
            (target_angle_increment
               float
               (range 0.0 360.0)
               (help
                  "The angle increment that the target angle must settle at. If the player stops scrolling at an angle that's not a multiple of the increment, the target angle snaps to the closest multiple."))
            (target_angle_magnetization_proportion
               float
               (range 0.0 1.0)
               (help
                  "The proportion of the target_angle_increment that the target angle must scroll away from a multiple to snap away from it. If the player stops scrolling when the target angle is less than this distance from the previous multiple, it will snap back to the previous multiple."))
            (lock_target_angle
               bool
               (no_test serialize)
               (help
                  "True if the target angle should be locked at its current angle, false otherwise."))
            (target_angle
               float
               (read_only TRUE)
               (help
                  "The current target rotation angle of the scene. The scene is responsible for rotating itself to this angle."))
            (is_rotating
               bool
               (read_only TRUE)
               (help
                  "True if the player is currently rotating the scene, false otherwise.")))))
   (events_out
      (snapped_to_angle_increment_multiple
         (editor
            (angle_increment_multiple
               float
               (help
                  "The multiple of the angle increment that the target angle snapped to.")))
         (help
            "Raised when the user has stopped rotating, and the target angle has snapped to the nearest angle increment multiple."))))
(BallisticPathCom
   (description
      "Generates a ballistic/parabolic path for a Trans that peaks at the given location")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (ballistic_type
         int
         (list BALLISTIC_PATH_TYPES)
         (help
            "How do you want to specify a path?"))
      (rotation_mode_ballistic
         int
         (list BALLISTIC_ROTATION_MODES)
         (alias 'rotation mode')
         (help
            "How is the trans aligned with the ballistic path?"))
      (start_pos_ballistic
         object
         (class Trans)
         (help
            "Where we launch from.  Optional, will use the Trans we're on if not specified"))
      (target_peak_pos_ballistic
         object
         (alias
            "target pos")
         (class Trans)
         (help
            "Where we want the peak/destination of our trajectory to be."))
      (gravity_mult_ballistic
         float
         (help
            "Scale the effect of gravity"))
      (travel_time
         float
         (help
            "How long does it take us to reach our target?")
         (hide
            {!=
               [ballistic_type]
               kBallisticType_ArriveInFixedTime}))
      (is_launched_ballistic
         bool
         (read_only TRUE)
         (no_test)
         (help
            "have we launched?"))
      (time_to_peak_ballistic
         float
         (read_only TRUE)
         (no_test)
         (help
            "in seconds, how long it would take to get from start to target peak position.  Updated when we're not launching, for those wantign to schedule a launch.")
         (hide
            {!=
               [ballistic_type]
               kBallisticType_PassThroughPeak}))
      (progress_to_peak_ballistic
         float
         (read_only TRUE)
         (no_test)
         (help
            "0 to 1, the progress toward reaching target peak.  Starts climbing after launch...")
         (hide
            {!=
               [ballistic_type]
               kBallisticType_PassThroughPeak}))
      (cur_speed_ballistic
         float
         (read_only TRUE)
         (no_test)
         (help
            "Current speed, only updated while launching"))
      (cur_vel_ballistic
         VECTOR3
         (read_only TRUE)
         (no_test)
         (help
            "Current velocity, only updated while launching"))
      ('Start Launch!'
         script
         (no_test)
         (help
            "trigger a ballistic launch, for testing")
         (script
            {$this start_launch_ballistic}))
      ('Stop Launch!'
         script
         (no_test)
         (help
            "stop ballistic launch, for testing")
         (script
            {$this stop_launch_ballistic})))
   (events_in
      (start_launch_ballistic
         (help
            "Start launch"))
      (stop_launch_ballistic
         (help
            "Stop launch")))
   (events_out
      (arrived_at_target
         (help
            "When using arrive in fixed time mode, fires when we arrive"))))
(HemisphereMapperCom
   (description
      "Maps a planar position onto a hemisphere")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (planar_position
         (struct
            (x
               float
               (range 0.0 1.0))
            (y
               float
               (range 0.0 1.0)))
         (help
            "0 to 1 on each axis, what is the input x and y?")
         (no_test serialize)
         (history FALSE))
      (sphere_radius
         float
         (help
            "What is the radius of the sphere we map to?"))
      (trans_scale
         float
         (help
            "What is the scale of this trans?"))
      (flip
         bool
         (help
            "Flip which direction Y points"))
      (bias_toward_center
         bool
         (help
            "Mapping biases towards keeping the output in the center of the hemisphere"))
      (hemisphere_map_range
         float
         (range 0.0 1.0)
         (help
            "How far around the sphere can we stretch?"))
      (limit_x
         bool
         (help
            "Should we radially limit the x position?"))
      (limit_z
         bool
         (help
            "Should we radially limit the z (height) position?"))))
(PulsePostScreenCom
   (description
      "Exposes post-game play data to the pulse postgame screen")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (had_played_before
         bool
         (no_test)
         (help
            "Whether the player had played the song before this time"))
      (got_new_high_score
         bool
         (read_only TRUE)
         (help
            "Whether the player beat their high score this time"))
      (previous_high_score
         int
         (no_test)
         (help
            "The last high score the player had on the song"))
      (score_this_time
         int
         (no_test)
         (help
            "The score from this playthrough")))
   (events_out
      (postgame_ready)))
(WorldInfoCom
   (description
      "Exposes world data to a screen")
   (user_can_add TRUE)
   (required_classes UIScreen Flow)
   (no_test serialize)
   (editor
      (world_name
         symbol
         (read_only TRUE)
         (help
            "name of world, including headline text"))
      (short_name
         symbol
         (read_only TRUE)
         (help
            "short name of world, lacking the headline text"))
      (is_advanced
         bool
         (read_only TRUE)
         (help
            "Is world at advanced phase?"))
      (collected_magic
         int
         (read_only TRUE)
         (help
            "The number of magic pieces the player has collected in the world in the current phase."))
      (target_magic
         int
         (read_only TRUE)
         (help
            "The number of magic pieces the player must collect to complete the world in the current phase."))
      (total_magic
         int
         (read_only TRUE)
         (help
            "The total number of magic pieces available in the world in the current phase."))
      (num_song_entries
         int
         (read_only TRUE)
         (help
            "Number of songs for this world"))
      (num_node_entries
         int
         (read_only TRUE)
         (help
            "Number of nodes for this world"))
      (hat_piece_index
         int
         (read_only TRUE)
         (help
            "Which hat piece index is associated with this world (-1 means none)"))
      (manipulator_index
         int
         (read_only TRUE)
         (help
            "Which manipulator index is associated with this world (-1 means none)"))
      (is_completed
         bool
         (read_only TRUE)
         (help
            "Is this world completed? (got hat piece or manipulator)"))
      (is_secondary_world
         bool
         (read_only TRUE)
         (help
            "Is this world a secondary world?"))
      (global_collected_magic
         int
         (read_only TRUE)
         (help
            "The total number of magic pieces the player has collected in the current phase."))
      (global_total_magic
         int
         (read_only TRUE)
         (help
            "The total number of magic pieces the player must collect to complete the current phase."))
      (num_worlds_completed
         int
         (read_only TRUE)
         (help
            "The number of worlds that have been completed in the current phase."))
      (world_progress
         (array
            (struct
               (world_name
                  symbol
                  (read_only TRUE)
                  (help
                     "The name of the world."))
               (is_world_completed
                  bool
                  (read_only TRUE)
                  (help
                     "True if the world has been completed in the current phase, false otherwise.")))))
      (hat_progress
         (array
            (struct
               (has_piece
                  bool
                  (read_only TRUE)
                  (help
                     "Does player have this piece?")))
            (fixed_size TRUE))
         (help
            "This is a global list of hat pieces and whether or not they are gotten yet."))
      (num_manipulators_unlocked
         int
         (read_only TRUE)
         (help
            "The number of manipulators the player has unlocked."))
      (manipulator_progress
         (array
            (struct
               (has_piece
                  bool
                  (read_only TRUE)
                  (help
                     "Does player have this manipulator?")))
            (fixed_size TRUE))
         (help
            "This is a global list of manipulators and whether or not they are gotten yet."))
      (song_data
         (array
            (struct
               (entry
                  symbol
                  (read_only TRUE)
                  (help
                     "song symbol"))
               (is_unlocked
                  bool
                  (read_only TRUE)
                  (help
                     "Is this song unlocked?"))
               (current_magic
                  int
                  (read_only TRUE)
                  (help
                     "current magic for song"))
               (total_magic
                  int
                  (read_only TRUE)
                  (help
                     "total magic for song")))
            (fixed_size TRUE)))
      (node_data
         (array
            (struct
               (entry
                  symbol
                  (read_only TRUE)
                  (help
                     "node symbol"))
               (is_unlocked
                  bool
                  (read_only TRUE)
                  (help
                     "Is this node unlocked?"))
               (current_magic
                  int
                  (read_only TRUE)
                  (help
                     "current magic for node"))
               (total_magic
                  int
                  (read_only TRUE)
                  (help
                     "total magic for node")))
            (fixed_size TRUE))))
   (events_out
      (world_selection_changed)))
#define SONGINFO_GOAL
((struct
      (goal_title
         symbol
         (read_only TRUE)
         (help
            "Goal title token"))
      (goal_text
         string
         (read_only TRUE)
         (help
            "Goal description text"))
      (is_goal_met
         bool
         (read_only TRUE)
         (help
            "Is this goal met?"))
      (goal_type
         symbol
         (list PULSEGOAL_TYPE_LIST)
         (read_only TRUE)
         (help
            "Goal type"))
      (goal_success_vo
         symbol
         (read_only TRUE)
         (help
            "The Wwise event to play on goal success, if any."))
      (goal_failure_vo
         symbol
         (read_only TRUE)
         (help
            "The Wwise event to play on goal failure, if any."))
      (goal_max_force_retry_count
         int
         (read_only TRUE)
         (help
            "The maximum number of times the player is forced to retry the goal in a row before they're given the option to skip it; -1 if they're never given the option to skip it."))))
(SongInfoCom
   (description
      "Exposes world data to a screen")
   (user_can_add TRUE)
   (required_classes Entity UIScreen)
   (no_test serialize)
   (editor
      (song
         symbol
         (list
            {song_mgr get_song_list TRUE})
         (help
            "name of song"))
      (song_info_mode
         int
         (list FLUX_SONGINFO_MODES)
         (help
            "Mode that effects where we get the current goal from and status text"))
      (song_name
         string
         (read_only TRUE)
         (help
            "The display name of the song."))
      (artist_name
         string
         (read_only TRUE)
         (help
            "The display name of the artist."))
      (mix_list
         object
         (class UIList)
         (disk_prop)
         (help
            "The mix list"))
      (difficulty
         int
         (read_only TRUE)
         (help
            "difficulty of song (0 to ..)"))
      (original_mix_unlocked
         bool
         (read_only TRUE)
         (help
            "Is the original mix unlocked?"))
      (mix1_unlocked
         bool
         (read_only TRUE)
         (help
            "Is mix1 unlocked?"))
      (mix2_unlocked
         bool
         (read_only TRUE)
         (help
            "Is mix2 unlocked?"))
      (num_stars
         int
         (read_only TRUE)
         (help
            "The best star rating the player has achieved for the song."))
      (songinfo_state
         int
         (list FLUX_SONGINFO_STATES)
         (read_only TRUE)
         (help
            "the current state for this song"))
      (info_has_recording
         bool
         (read_only TRUE)
         (help
            "Does the player have a recording of this song?"))
      (unlocked_in_library
         bool
         (read_only TRUE)
         (help
            "Has this song been unlocked in the song library?"))
      (unlock_type
         int
         (read_only TRUE)
         (list QUICKPLAY_UNLOCK_TYPES)
         (help
            "The reason the song is locked in quickplay."))
      (unlock_world
         symbol
         (read_only TRUE)
         (help
            "The name of the Discovery world the song must be played in to be unlocked in quickplay, if any."))
      (unlock_magic_count
         int
         (read_only TRUE)
         (help
            "The number of magic that the player must earn to unlock the song in quickplay, if any."))
      (hide_name_when_locked
         bool
         (read_only TRUE)
         (help
            "True if the song's information is hidden when it's locked, false otherwise."))
      (is_campaign_song
         bool
         (read_only TRUE)
         (help
            "Is this a campaign song?"))
      (has_goal
         bool
         (read_only TRUE)
         (help
            "Do we currently have a valid goal?"))
      (current_goal
         int
         (read_only TRUE)
         (help
            "Which goal are we currently on (-1 means no current goal)?"))
      (current_magic
         int
         (read_only TRUE)
         (help
            "How much magic do we have for this song?"))
      (total_magic
         int
         (read_only TRUE)
         (help
            "How much magic can we have for this song?"))
      (state_title
         string
         (read_only TRUE)
         (help
            "Title of this song's current state"))
      (state_desc
         string
         (read_only TRUE)
         (help
            "Description of this song's current state"))
      (goal_data SONGINFO_GOAL)
      (score
         int
         (read_only TRUE)
         (help
            "The high score on the song")))
   (events_in
      (set_song
         (editor
            (song
               symbol
               (list
                  {song_mgr get_song_list TRUE})
               (help
                  "The name of the song to show info about")))
         (help
            "sets the song to show info about")))
   (events_out
      (songinfo_changed)))
(DrawAxesCom
   (description
      "Attach to any Trans to draw a set of coordinate axes")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (draw_axes_frame_size
         float
         (alias
            "frame size")
         (help
            "size of coordinate frame to draw"))
      (draw_axes_frame_color
         color
         (alias
            "frame color")
         (help
            "color of coordinate frame to draw"))))
(PulseNodeCom
   (description
      "Exposes state data to the pulse node entity, based on a song")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (pulse_node_song
         symbol
         (list
            {song_mgr get_song_list TRUE})
         (help
            "The song represented by this Pulse node")
         (instance_prop)
         (read_only TRUE))
      (pulse_node_zoom_engagable
         object
         (class Entity)
         (components
            (ZoomEngagementCom))
         (instance_prop)
         (help
            "The zoom engagable that zooms into this Pulse node."))
      (pulse_node_state
         int
         (list NEIGHBORHOOD_STATES)
         (read_only
            {$this is_proxy})
         (help
            "The current state of the pulse node"))
      (pulse_node_mixes_available
         int
         (read_only TRUE)
         (help
            "How many pulse mixes are available?"))
      (pulse_node_mixes_complete
         int
         (read_only TRUE)
         (help
            "How many pulse mixes are complete?"))
      (pulse_node_song_state
         int
         (list FLUX_SONGINFO_STATES)
         (read_only TRUE)
         (help
            "the current state for this song"))
      (pnc_visit_state
         int
         (list DISCOVERY_VISIT_STATES)
         (read_only TRUE)
         (help
            "What is our reason for entering the discovery scene?"))
      (pnc_visited_from_this_song
         bool
         (read_only TRUE)
         (help
            "Are we entering Discovery from THIS song?"))
      (pnc_visit_pulse_event
         int
         (list POST_PULSE_EVENTS)
         (read_only TRUE)
         (help
            "What post pulse event is about to happen in the Discovery scene?")))
   (events_in)
   (events_out
      (visit_state_configured)))
(QuantizedRecorderRhythmCom
   (description
      "Provides rhythm data to QuantizedRecorder")
   (user_can_add FALSE)
   (required_classes QuantizedRecorder)
   (tab properties)
   (group
      "Rhythm Data")
   (editor
      (use_midi_file
         bool
         (help
            "Do we use our midi file?"))
      (use_note_pitch
         bool
         (help
            "Do we override other QR pitch, and use the pitch in this midi file?"))
      (quantization
         int
         (list
            (BEAT_QUANTIZATIONS_BASE))
         (help
            "At what quantization do we record, if we don't have a midi file?"))
      (sound
         object
         (class Sound)
         (help
            "Sound file!"))
      (track_name
         string
         (help
            "Track name!"))
      (rhythm_number
         int
         (help
            "Rhythm number!"))))
(DiscoverySceneNoiseCom
   (description
      "Manages shader properties for scene noise")
   (user_can_add TRUE)
   (required_classes Scene)
   (editor
      ('Source 0'
         (indent
            (focal_point_0
               object
               (alias 'Focal Point')
               (class Trans)
               (help
                  "Focal point of the noise"))
            (radius_0
               float
               (alias Radius)
               (help
                  "Radius of the noise effect"))
            (type_0
               float
               (alias Type)
               (help
                  "Type of noise (random or wave based)"))
            (intensity_0
               float
               (alias Intensity)
               (help
                  "Intensity of the noise effect"))
            (frequency_0
               float
               (alias Frequency)
               (help
                  "Frequency of the noise effect"))
            (wave_duration_0
               float
               (alias 'Generated Wave Duration')
               (help
                  "Duration of generated wave"))
            (wave_falloff_0
               float
               (alias 'Generated Wave Falloff')
               (help
                  "Falloff of generated wave"))
            (wave_amplitude_0
               float
               (alias 'Generated Wave Amplitude')
               (help
                  "Amplitude of generated wave"))
            (generate_wave_0
               script
               (alias 'Generate Wave')
               (script
                  {$this generate_wave_0})
               (history FALSE))))
      ('Source 1'
         (indent
            (focal_point_1
               object
               (alias 'Focal Point')
               (class Trans)
               (help
                  "Focal point of the noise"))
            (radius_1
               float
               (alias Radius)
               (help
                  "Radius of the noise effect"))
            (type_1
               float
               (alias Type)
               (help
                  "Type of noise (random or wave based)"))
            (intensity_1
               float
               (alias Intensity)
               (help
                  "Intensity of the noise effect"))
            (frequency_1
               float
               (alias Frequency)
               (help
                  "Frequency of the noise effect"))
            (wave_duration_1
               float
               (alias 'Generated Wave Duration')
               (help
                  "Duration of generated wave"))
            (wave_falloff_1
               float
               (alias 'Generated Wave Falloff')
               (help
                  "Falloff of generated wave"))
            (wave_amplitude_1
               float
               (alias 'Generated Wave Amplitude')
               (help
                  "Amplitude of generated wave"))
            (generate_wave_1
               script
               (alias 'Generate Wave')
               (script
                  {$this generate_wave_1})
               (history FALSE))))
      (max_displacement
         float
         (alias 'Max Displacement')
         (help
            "Max amount the verts displace by. Used to determine how much to blend in noise texture.")))
   (events_in
      (generate_wave_0)
      (generate_wave_1)))
(DialogPromptCallerCom
   (description
      "Used to trigger and receieve responses from a dialog prompt.")
   (user_can_add disk)
   (required_classes UIScreen Scene)
   (events_in
      (show_dialog_prompt
         (editor
            (dialog_event_id
               symbol
               (help
                  "The name used to identify the dialog prompt event; this will be passed back as part of the dialog prompt response."))
            (dialog_text_token
               symbol
               (list
                  {token_list})
               (help
                  "The token of the text displayed in the dialog prompt."))
            (dialog_prompt_type
               int
               (list DIALOG_PROMPT_TYPES)
               (help
                  "The responses that will be available in the dialog prompt.")))
         (help
            "Shows a dialog prompt with the specified configuration.")))
   (events_out
      (dialog_prompt_response_receieved
         (editor
            (dialog_event_id
               symbol
               (help
                  "The name used to identify the dialog prompt event; this was specified when the dialog prompt was triggered."))
            (response
               int
               (list DIALOG_PROMPT_RESPONSES)
               (help
                  "The response from the dialog prompt.")))
         (help
            "Fired when a response has been received from a dialog prompt."))))
(DialogPromptCom
   (description
      "Attached to a UI screen to allow it to behave as a dialog prompt.")
   (user_can_add disk)
   (required_classes UIScreen)
   (editor
      (DialogPromptCom
         (struct
            (dialog_text
               string
               (read_only TRUE)
               (help
                  "The text that's shown in the dialog prompt."))
            (dialog_prompt_type
               int
               (read_only TRUE)
               (list DIALOG_PROMPT_TYPES)
               (help
                  "The dialog prompt type; this determines the responses available.")))))
   (events_in
      (send_dialog_prompt_response
         (editor
            (dialog_prompt_response
               int
               (list DIALOG_PROMPT_RESPONSES)
               (help
                  "The response to send to the dialog prompt caller.")))
         (help
            "Sends the specified response to the caller that triggered this dialog prompt."))))
(JournalPageCom
   (description
      "Page component for use with JournalPageDataProvider.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (JournalPageCom
         (struct
            (page_name
               symbol
               (list JOURNAL_PAGE_LIST)
               (no_test serialize)
               (help
                  "The journal page this entity represents. Automatically loads the texture and VO."))
            (texture
               object
               (class Tex)
               (read_only TRUE)
               (disk_prop)
               (help
                  "Texture for display on page."))
            (dialogue_event
               symbol
               (read_only TRUE)
               (help
                  "Event name for VO event.")))))
   (events_in
      (select
         (help
            "Receives the selection message from CarouselSelector"))))
(DiscoveryCursorProximityCom
   (description
      "Placed on things that want to react to cursor proximity")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (Inputs
         (indent
            (dcp_enabled
               bool
               (alias Enabled)
               (help
                  "Turn on proximity measuring/updating"))
            (dcp_freeze_filtered_proximity
               bool
               (alias 'Freeze Filtered Proximity?')
               (help
                  "Freezes just the filtered proximity output.  Normal one will continue to update"))
            (dcp_min_influence_dist
               float
               (alias 'Min Influence Dist')
               (slider)
               (range 0.0 30.0)
               (help
                  "How closest the cursor needs to get to MAX out proximity"))
            (dcp_max_influence_dist
               float
               (alias 'Max Influence Dist')
               (slider)
               (range 0.0 30.0)
               (help
                  "The furthest distance the cursor needs to be to start ramping up proximity"))
            (dcp_reverse
               bool
               (alias 'Reverse?')
               (help
                  "When true, reverses 'Cur Proximity' output so 1.0 is far and 0.0 is close"))
            (dcp_ramp_in_limit
               float
               (alias 'Ramp-in Time')
               (units
                  "secs")
               (help
                  "if positive, limits how quickly we can change proximity output as cursor GETS CLOSER. if 2.0f it, will take a two seconds for the proximity to ramp UP fully from 0 to 1."))
            (dcp_ramp_out_limit
               float
               (alias 'Ramp-out Time')
               (units
                  "secs")
               (help
                  "if positive, limits how quickly we can change proximity output as cursor GETS FURTHER AWAY. if 2.0f it, will take a two seconds for the proximity to ramp DOWN fully from 1 to 0."))
            (dcp_override_trans
               object
               (alias 'Override Trans')
               (class Trans)
               (no_test)
               (help
                  "A special non-saved Trans that overrides which the Trans we compute proximity from.  Its normally computed from Trans this component is placed on.  Probably only useful if setting up a proxy flow..."))
            (dcp_debug_draw
               bool
               (no_test)
               (alias 'Debug Draw')
               (help
                  "Turn on debug drawing to see inner + outer radius"))))
      (Outputs
         (indent
            (dcp_cur_proximity
               float
               (alias 'Cur Proximity')
               (slider)
               (range 0.0 1.0)
               (read_only
                  {&&
                     {exists forge}
                     {forge is_in_play_mode}})
               (help
                  "From 0 to 1, how close the cursor is. 1 being close, 0 being far."))
            (dcp_cur_proximity_filtered
               float
               (alias 'Cur Proximity Filtered')
               (slider)
               (range 0.0 1.0)
               (read_only
                  {&&
                     {exists forge}
                     {forge is_in_play_mode}})
               (help
                  "From 0 to 1, a filtered version of close the cursor is (affected by ramp-in and ramp-out time). 1 being close, 0 being far.")))))
   (events_out
      (on_peak_influence
         (help
            "Sent out when cursor proximity is peaked, meaning it just came closer than min dist"))
      (on_begin_influence
         (help
            "Cursor is entering our influence sphere, having just come within max dist"))
      (on_end_influence
         (help
            "Cursor is exitting our influence sphere, having just gone beyond max dist"))
      (on_peak_influence_filtered
         (help
            "Filtered - Sent out when cursor proximity is peaked, meaning it just came closer than min dist"))
      (on_begin_influence_filtered
         (help
            "Filtered -Cursor is entering our influence sphere, having just come within max dist"))
      (on_end_influence_filtered
         (help
            "Filtered - Cursor is exitting our influence sphere, having just gone beyond max dist"))))
(DiscoveryFactoryBotCom
   (description
      "Controls factory robots")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (robot_type
         int
         (list FACTORY_ROBOT_TYPES)
         (no_test serialize))
      (is_repairing
         bool
         (read_only TRUE)
         (help
            "Is the robot currently repairing a machine?"))
      (in_attention_state
         bool
         (read_only TRUE)
         (help
            "Is the robot paying attention?"))
      (is_shrunk
         bool
         (help
            "is the robot currently shrunk?")
         (no_test serialize))
      (attention_turn_rate
         float
         (help
            "Degrees per second, how fast does our robot turn when paying attention?"))
      (is_repairing_in_vain
         bool
         (read_only TRUE)
         (help
            "Is the robot trying to fix a machine that it can't?"))
      (is_on_tiny_path
         bool
         (read_only TRUE)
         (help
            "Are we on a tiny path?"))
      (repair_site_index
         int
         (read_only TRUE)
         (help
            "If we're repairing, what is the index of our repair site?"))
      (is_on_main_hub
         bool
         (read_only TRUE)
         (help
            "Are we on the main path right now?"))
      (robot_in_front
         bool
         (read_only TRUE)
         (help
            "Is there a robot in front of us to which"))
      (robot_in_front_looking_at_magnet
         bool
         (read_only TRUE)
         (help
            "Is the robot in front of us looking at the magnet"))
      (robot_in_front_state
         symbol
         (read_only TRUE)
         (help
            "What is the flow state of the robot in front of us?"))
      (robot_state
         symbol
         (no_test serialize)
         (help
            "What is the flow state of this robot?"))
      (robot_friend_on_magnet
         bool
         (no_test serialize)
         (help
            "Are we reacting to one of our friends on the magnet?"))
      (robot_sensor
         object
         (class PhysicsSensor)
         (disk_prop)
         (help
            "What's our sensor for detecting other robots?")))
   (events_out
      (returned_from_my_color_hub
         (help
            "fires when you're red and return from red hub, blue returning from blue hub, .."))))
(DiscoveryFactoryRepairableCom
   (description
      "Placed on discovery factory repairable objects")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (broken_meter
         float
         (range 0.0 1.0)
         (slider)
         (help
            "How broken are we?"))
      (repair_rate
         float
         (help
            "How fast do we repair?  Units per second"))
      (robots_needed_to_repair
         int
         (help
            "What's the minimum number of robots we need to repair this?"))))
(ManipulatorInterfaceCom
   (description
      "Placed on Pulse manipulators")
   (user_can_add disk)
   (required_classes Entity)
   (group
      "Manipulator")
   (editor
      (manipulator_type
         int
         (list MANIPULATOR_TYPES)
         (disk_prop))
      (shape
         object
         (class Entity)
         (components
            (PulseHedronCom))
         (instance_prop))
      (loop_segment
         symbol
         (list
            {$this get_loop_segments})
         (no_validate)
         (no_test)
         (instance_prop))
      (ducking
         (indent
            (ducking_drums
               float
               (range -96.0 0.0)
               (alias
                  "drums")
               (instance_prop))
            (ducking_bass
               float
               (range -96.0 0.0)
               (alias
                  "bass")
               (instance_prop))
            (ducking_guitar
               float
               (range -96.0 0.0)
               (alias
                  "guitar/synth")
               (instance_prop))
            (ducking_vocals
               float
               (range -96.0 0.0)
               (alias
                  "vocals")
               (instance_prop))
            (ducking_misc
               float
               (range -96.0 0.0)
               (alias
                  "misc")
               (instance_prop)))
         (help
            "Amount to duck each stem when this manipulator plays"))
      (duck_in_background
         bitfield
         (list FLUX_TARGET_PARTS_BITFIELD)
         (instance_prop)
         (help
            "Which parts to keep ducked even when hiding manipulator"))
      (loop_length_in_bars
         int
         (help
            "Length of the loop that this manipulator records, in measures")
         (instance_prop))
      (loop_length_in_bars_multi
         int
         (help
            "In multiplayer, ength of the loop that this manipulator records, in measures")
         (instance_prop))
      (state
         int
         (list PULSE_MANIPULATOR_STATES)
         (no_test)
         (history FALSE)
         (hide propanim))
      (mute_in_background
         bool
         (no_test)
         (history FALSE))
      (visible
         bool
         (no_test)
         (history FALSE))
      (resolves
         bool
         (help
            "When we mute this, try to resolve to a chord tone on the next downbeat?"))
      (enabled
         bool
         (read_only TRUE))
      (mute
         bool
         (read_only TRUE))
      (use_kinect_input
         bool
         (read_only TRUE))
      (background
         bool
         (read_only TRUE))
      (manipulator_engaged
         bool
         (read_only TRUE)))
   (events_in
      (set_state
         (editor
            (state
               int
               (list PULSE_MANIPULATOR_STATES))))))
(DiscoveryCamManagerPauseCom
   (description
      "Placed on an object with a raycast receiver, detects a jazz hands gesture in a Discovery scene")
   (user_can_add FALSE)
   (required_classes DiscoveryCamManager)
   (tab properties)
   (group
      "Pause Cams")
   (editor
      (ramp_in_time float)
      (ramp_out_time float)
      (easing
         int
         (list EASING_TYPES))
      (ease_power float)
      (pause_fov
         float
         (range 1.0 179.0)
         (slider))
      (pause_blur
         float
         (range 0.0 1.0)
         (slider))
      (pause_letterbox
         float
         (range 0.0 1.0)
         (slider))
      (backplane_pause_cam
         (indent
            (backplane_pause_cam
               object
               (class PropAnim))
            (backplane_ramp_in_time float)))
      (test_pause_cam
         script
         (script
            {$this test_pause_cam})
         (custom_history)
         (no_test))
      (test_unpause_cam
         script
         (script
            {$this test_unpause_cam})
         (custom_history)
         (no_test))))
(DiscoveryRecordEngageCom
   (description
      "Placed on engage/disengage UI for recording interactions in discovery. Handles gesture detection, positioning/tracking UI with cursor, and sending out events for FX.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (rec_enabled
         bool
         (alias
            "Enabled")
         (help
            "enable/disable the ui + its gesture detection. will go into disengaged state when disabled."))
      (rec_z_engage_thresh
         float
         (alias
            "Z Engage Thresh")
         (disk_prop)
         (range 0.0 1.0)
         (slider)
         (help
            "0...1 arm extension thresh to engage UI"))
      (rec_z_disengage_thresh
         float
         (alias
            "Z Disengage Thresh")
         (disk_prop)
         (range 0.0 1.0)
         (slider)
         (help
            "0...1 arm extension thresh to disengage UI.  should be LESS than engage thresh"))
      (rec_engage_progress_z_width
         float
         (alias
            "Engage Progress Width")
         (disk_prop)
         (range 0.0 1.0)
         (slider)
         (help
            "0...1 the amount arm extension around the engage z-plane to drive analog progress"))
      (rec_disengage_progress_z_width
         float
         (alias
            "Disengage Progress Width")
         (disk_prop)
         (range 0.0 1.0)
         (slider)
         (help
            "0...1 the amount arm extension around the disengage z-plane to drive analog progress"))
      (rec_engage_x_range
         SIMPLE_RANGED_FLOAT_0_TO_1
         (alias
            "Engage Cursor X Range")
         (disk_prop)
         (help
            "Valid range for X position of cursor to allow engaging (0..1)"))
      (rec_engage_y_range
         SIMPLE_RANGED_FLOAT_0_TO_1
         (alias
            "Engage Cursor Y Range")
         (disk_prop)
         (help
            "Valid range for Y position of cursor to allow engaging (0..1)"))
      (rec_disengage_x_range
         SIMPLE_RANGED_FLOAT_0_TO_1
         (alias
            "Disengage Cursor X Range")
         (disk_prop)
         (help
            "Valid range for X position of cursor to allow disengaging (0..1)"))
      (rec_disengage_y_range
         SIMPLE_RANGED_FLOAT_0_TO_1
         (alias
            "Disengage Cursor Y Range")
         (disk_prop)
         (help
            "Valid range for Y position of cursor to allow disengaging (0..1)"))
      (rec_invert_disengage_logic
         bool
         (alias
            "Invert Disengage X/Y")
         (disk_prop)
         (help
            "If checked, disengage if cursor wanders outside of the X or Y ranges. Engage ranges should be larger than disengage if using."))
      (rec_engage_state
         int
         (list DISCOVERY_REC_ENGAGE_STATES)
         (alias
            "Engage State")
         (read_only TRUE)
         (no_test)
         (help
            "The current state of the ui."))
      (rec_engage_progress
         float
         (read_only TRUE)
         (no_test)
         (alias
            "Engage Progress")
         (help
            "While engaging, this outputs analog progress as the players hand gets closer/further to the engage plane (0..1)"))
      (rec_disengage_progress
         float
         (read_only TRUE)
         (no_test)
         (alias
            "Disengage Progress")
         (help
            "While disengaging, this outputs analog progress as the players hand gets closer/further to the disengage plane (0..1)"))))
(OptionAccessCom
   (description
      "Workaround to allow access to the active profile's options.")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (no_test)
   (editor
      (option_access
         (struct
            (overscan
               float
               (help
                  "Screen overscan."))
            (audio_offset
               float
               (no_test)
               (help
                  "Audio calibration value in ms."))
            (dialog_volume
               float
               (range 0.0 100.0)
               (help
                  "Dialog volume value."))
            (gamma_value
               float
               (range 0.0 1.0)
               (help
                  "Gamma value."))
            (enable_subtitles
               bool
               (help
                  "Are subtitles enabled?"))
            (enable_game_tips
               bool
               (help
                  "Are game tips enabled?"))
            (enable_song_builder
               bool
               (help
                  "Is the Pulse song builder enabled?"))
            (enable_quickplay_unlock_all
               bool
               (help
                  "Is quickplay unlock mode enabled?"))))))
(ActiveProfileAccessCom
   (description
      "Workaround to allow access to the active profile.")
   (user_can_add TRUE)
   (required_classes Entity UIScreen Scene)
   (editor
      (active_profile_access
         (struct
            (platform_name
               string
               (read_only TRUE)
               (help
                  "The active profile's name on the current platform (e.g. gamertag on 360)."))
            (is_anonymous
               bool
               (read_only TRUE)
               (help
                  "Is the active profile anonymous? i.e. they haven't logged in"))
            (has_wizard_hat
               bool
               (help
                  "Does this profile have the Wizard hat?"))
            (current_phase
               int
               (list DISCOVERY_SCENE_PHASES)
               (help
                  "Which phase is the profile in?")
               (no_test))
            (last_world_visited
               symbol
               (list $flux_worlds_with_null)
               (read_only TRUE)
               (help
                  "The last world that was visited, or empty if no worlds have been visited."))
            (newly_unlocked_quickplay_song
               symbol
               (read_only TRUE)
               (help
                  "The name of the newly unlocked quickplay song, if any."))
            (newly_unlocked_quickplay_song_display_name
               string
               (read_only TRUE)
               (help
                  "The display name of the newly unlocked quickplay song, if there is one.")))))
   (events_in
      (store_artifact
         (editor
            (artifact_name
               symbol
               (help
                  "The name of the artifact to set"))
            (value
               int
               (help
                  "The value to set on the artifact")))
         (help
            "Stores this named artifact to the active profile"))
      (handle_quickplay_song_unlock_announced
         (editor
            (song
               symbol
               (help
                  "The quickplay song whose unlock was announced.")))
         (help
            "Called when a quickplay song's unlock has been announced to the player."))))
(MidiWatcherEventsCom
   (description
      "Stores MIDI data for a Sound")
   (user_can_add FALSE)
   (required_classes Sound)
   (tab properties)
   (group
      "MIDI")
   (editor
      (midi_file_name
         string
         (read_only TRUE)
         (help
            "What is the name of the current MIDI file?"))
      (midi_track_names
         (array string)
         (read_only TRUE)
         (help
            "What are the names of the active tracks?"))))
(DepthBufferTransformerCom
   (description
      "Transforms a mesh to account for skeleton positioning and size in the depth buffer")
   (user_can_add disk)
   (required_classes Mesh)
   (editor
      (anchor_point
         object
         (class Trans)
         (help
            "Position to anchor mesh to"))
      (head_point
         object
         (class Trans)
         (help
            "Position of skeleton head"))
      (right_hand_point
         object
         (class Trans)
         (help
            "Position of skeleton right hand"))
      (left_hand_point
         object
         (class Trans)
         (help
            "Position of skeleton left hand"))
      (player_index
         int
         (range 0 1)
         (help
            "Index of player to use"))
      (enable_resize
         bool
         (help
            "Should this mesh be resized?"))
      (desired_scale_multiplier
         float
         (help
            "The multiplier applied to the depth buffer's desired scale.")
         (no_test))
      (resize_smoothing
         SMOOTHED_FLOAT
         (help
            "smoothing for resize"))
      (enable_horizontal_movement
         bool
         (help
            "Should this mesh be moved horizontally?"))
      (horizontal_smoothing
         SMOOTHED_FLOAT
         (help
            "smoothing for horizontal movement"))
      (enable_vertical_movement
         bool
         (help
            "Should this mesh be moved vertically?"))
      (vertical_smoothing
         SMOOTHED_FLOAT
         (help
            "smoothing for vertical movement"))
      (has_skeleton
         bool
         (read_only TRUE)
         (help
            "Do we have a skeleton?"))
      (top_edge_warning
         bool
         (read_only TRUE)
         (help
            "Skeleton is touching the top edge"))
      (bottom_edge_warning
         bool
         (read_only TRUE)
         (help
            "Skeleton is touching the bottom edge"))
      (right_edge_warning
         bool
         (read_only TRUE)
         (help
            "Skeleton is touching the right edge"))
      (left_edge_warning
         bool
         (read_only TRUE)
         (help
            "Skeleton is touching the left edge"))
      (vertical_centering_mode
         int
         (list DEPTH_BUFFER_CENTERING_MODES)
         (help
            "What is our reference point for vertical centering? Feet will make sure your feet are always on the ground, Shoulders will make sure your shoulders are always in the same spot"))
      (freeze_in_place
         bool
         (no_test serialize)
         (help
            "Should we freeze the depth buffer where it is? Unsaved."))
      (use_active_skeleton
         bool
         (help
            "Should we use the active skeleton? Ignores player_index property."))
      (use_secondary_skeleton
         bool
         (help
            "Should we use the secondary skeleton? Ignores player_index property."))))
(CursorActionMgrCom
   (description
      "Watches the cursor and turns its movements into actions (touch, swipe, scrub, etc.). Put one of these on your scene to enable cursor actions.")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (Accent
         (indent
            (cam_should_use_accents
               bool
               (alias
                  "use accents")
               (help
                  "For development purposes only! Should we accent objects which are receiving cursor actions?"))
            (cam_accent_hover_ramp_seconds
               float
               (alias
                  "accent hover ramp seconds")
               (help
                  "How long it takes to ramp from nothing to full hover response."))
            (cam_accent_scrub_ramp_seconds
               float
               (alias
                  "accent scrub ramp seconds")
               (help
                  "How long it takes to ramp to full scrub response."))
            (cam_accent_smoothing
               float
               (alias
                  "accent smoothing")
               (help
                  "How quickly the accent fades. Bigger means faster."))
            (cam_accent_line_response
               waveform_float
               (alias
                  "accent line response")
               (help
                  "The alpha of the hard line in the accent effect. [0, 0.5] is for hover, (0.5, 1.0] is for scrubbing.")
               (allowed_types kWaveformCurve)
               (range 0.0 1.0))
            (cam_accent_bloom_response
               waveform_float
               (alias
                  "accent bloom response")
               (help
                  "The magnitude of the bloom in the accent effect. [0, 0.5] is for hover, (0.5, 1.0] is for scrubbing.")
               (allowed_types kWaveformCurve)
               (range 0.0 1.0))
            (cam_accent_flash_response
               waveform_float
               (alias
                  "accent flash response")
               (help
                  "The opacity of the color flash in the accent effect. [0, 0.5] is for hover, (0.5, 1.0] is for scrubbing.")
               (allowed_types kWaveformCurve)
               (range 0.0 1.0))))
      (ActionParticles
         (indent
            (cam_action_particle_system_xy
               object
               (class ParticleSys)
               (alias
                  "action particle system xy")
               (help
                  "A particle system to emit cursor action particles in the screen plane."))
            (cam_action_particle_system_z
               object
               (class ParticleSys)
               (alias
                  "action particle system z")
               (help
                  "A particle system to emit cursor action particles into/out of the screen plane."))
            (cam_action_particle_count
               int
               (alias
                  "action particle count")
               (help
                  "How many particles to emit when an action occurs."))
            (cam_action_particle_speed
               float
               (alias
                  "action particle speed")
               (help
                  "How fast the particles go."))))
      (cam_current_action
         int
         (list CURSOR_ACTION_ENUMS)
         (alias
            "current action"))
      (cam_swipe_push_axis
         int
         (read_only TRUE)
         (list CURSOR_ACTION_AXIS_ENUMS)
         (help
            "The direction of the swipe. In screen coordinates."))
      (cam_cursor_within_global_scrubber
         bool
         (read_only TRUE)
         (help
            "Is the cursor currently in a receiver which contributes to global scrub progress? Doesn't mean the cursor is scrubbing, just that it is in a receiver who cares."))
      (cam_has_active_receivers
         bool
         (read_only TRUE)
         (help
            "Did any receiver actually receive the current event?"))
      (cam_active_receiver_hover_progress
         float
         (read_only TRUE)
         (help
            "The hover progress of the receiver handling the current action. [0, 1]."))
      (cam_active_receiver_scrub_progress
         float
         (read_only TRUE)
         (help
            "The scrub progress of the receiver handling the current action. [0, 1]."))
      (Hover
         (indent
            (cam_hover_variance
               float
               (alias
                  "hover variance")
               (help
                  "Defines how still the cursor needs to be to be considered hovering."))
            (cam_hover_radius
               float
               (alias
                  "hover radius")
               (help
                  "The cursor must remain this close to where the hovering began."))
            (cam_hover_required_seconds
               float
               (alias
                  "hover required seconds")
               (help
                  "The cursor must remain 'still' for this long before we consider it hovering."))))
      (Swipe
         (indent
            (cam_swipe_required_distance
               float
               (alias
                  "swipe required distance")
               (help
                  "How far the cursor must travel before we call it a swipe."))
            (cam_swipe_end_distance
               float
               (alias
                  "swipe end distance")
               (help
                  "If the cursor moves only this far (or less), we end the swipe."))
            (cam_swipe_end_turn_dot_product
               float
               (alias
                  "swipe end turn dot product")
               (help
                  "Defines the amount of cursor turn allowed before we stop a swipe."))))
      (Scrub
         (indent
            (cam_scrub_averager_frames
               int
               (alias
                  "scrub averager frames")
               (help
                  "How many frames of history we use to calculate average position."))
            (cam_scrub_speed_averager_frames
               int
               (alias
                  "scrub speed averager frames")
               (help
                  "How many frames of history we use to calculate average speed."))
            (cam_scrub_radius
               float
               (alias
                  "scrub radius")
               (help
                  "The scrubbing must stay this close to where it started."))
            (cam_scrub_minimum_speed
               float
               (alias
                  "scrub minimum speed")
               (help
                  "The cursor must move this fast, at least, to be considered scrubbing."))
            (cam_scrub_near_on_grace_seconds
               float
               (alias
                  "scrub near on grace seconds")
               (help
                  "When not scrubbing, how long the cursor must stay near a point to begin scrubbing."))
            (cam_scrub_near_off_grace_seconds
               float
               (alias
                  "scrub near off grace seconds")
               (help
                  "When scrubbing, how long a cursor must be too far to stop scrubbing."))
            (cam_scrub_fast_on_grace_seconds
               float
               (alias
                  "scrub fast on grace seconds")
               (help
                  "When not scrubbing, how long the cursor must be wiggling to begin scrubbing."))
            (cam_scrub_fast_off_grace_seconds
               float
               (alias
                  "scrub fast off grace seconds")
               (help
                  "When scrubbing, how long a cursor must be too still to stop scrubbing."))))
      (cam_2d_plus_depth_slop
         float
         (alias
            "2D+ depth slop")
         (help
            "The slop window in depth for 2D+ collision detection. This is the 'diameter' so acceptable depths are +/- half this value."))
      (cam_action_collision_grace_seconds
         float
         (alias
            "action collision grace seconds")
         (help
            "The cursor must collide with a receiver at least this often to continue handling an action."))
      (cam_scrub_tutorial_maximum_progress
         float
         (alias
            "scrub tutorial maximum progress")
         (help
            "If our scrub progress is greater than this, we won't bother showing the scrub tutorial."))
      (cam_cursor_x
         float
         (read_only TRUE))
      (cam_cursor_y
         float
         (read_only TRUE))
      (cam_cursor_z
         float
         (read_only TRUE))
      (cam_average_speed
         float
         (read_only TRUE))
      (cam_average_pos_x
         float
         (read_only TRUE))
      (cam_average_pos_y
         float
         (read_only TRUE))
      (cam_average_pos_z
         float
         (read_only TRUE))
      (cam_distance_to_average_pos
         float
         (read_only TRUE))
      (cam_variance_2d
         float
         (read_only TRUE))
      (cam_variance_3d
         float
         (read_only TRUE))
      (cam_scrub_close
         bool
         (read_only TRUE))
      (cam_scrub_fast
         bool
         (read_only TRUE))))
(CursorActionReceiverCom
   (description
      "Put this on an entity to receive cursor events.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (car_use_global_actions
         bool
         (alias
            "use global actions?")
         (help
            "If true, we ignore collision volumes and report *all* cursor actions."))
      (car_use_2d_plus
         bool
         (disk_prop)
         (alias
            "use 2D+ collision detection?")
         (help
            "If true, we use 2D collision restricted to be 'near' (as defined in the CursorActionMgrCom) us in depth. False means normal 2D detection."))
      (car_physics_collision
         object
         (class PhysCollisionBody)
         (disk_prop)
         (alias
            "physics collision")
         (help
            "This defines the volume where cursor actions are received. Rigid body = 2D, sensor = 3D."))
      (car_is_2d
         bool
         (disk_prop)
         (read_only TRUE)
         (alias
            "is physics 2d?")
         (help
            "If true, gestures ignore z/depth for testing intersections."))
      (car_touch_hover_collision
         object
         (class PhysCollisionBody)
         (disk_prop)
         (alias
            "touch/hover collision")
         (help
            "Optional. This defines the volume where touch and hover actions are received. Rigid body = 2D, sensor = 3D."))
      (car_is_touch_hover_2d
         bool
         (disk_prop)
         (read_only TRUE)
         (alias
            "is touch/hover physics 2d?")
         (help
            "If true, touch/hover ignores z/depth for testing intersections."))
      (car_swipe_push_collision
         object
         (class PhysCollisionBody)
         (disk_prop)
         (alias
            "swipe/push collision")
         (help
            "Optional. This defines the volume where swipe and push actions are received. Rigid body = 2D, sensor = 3D."))
      (car_is_swipe_push_2d
         bool
         (disk_prop)
         (read_only TRUE)
         (alias
            "is swipe/push physics 2d?")
         (help
            "If true, swipe/push ignores z/depth for testing intersections."))
      (car_scrub_collision
         object
         (class PhysCollisionBody)
         (disk_prop)
         (alias
            "scrub collision")
         (help
            "Optional. This defines the volume where scrub actions are received. Rigid body = 2D, sensor = 3D."))
      (car_is_scrub_2d
         bool
         (disk_prop)
         (read_only TRUE)
         (alias
            "is scrub physics 2d?")
         (help
            "If true, scrub ignores z/depth for testing intersections."))
      (car_send_touch_with_hover
         bool
         (disk_prop)
         (alias
            "always send touch")
         (help
            "If true, touch events will be sent even during other actions. Otherwise, other actions suppress touch ones."))
      (car_swipe_push_local_trans
         object
         (class Trans)
         (disk_prop)
         (alias
            "swipe/push local trans")
         (help
            "Optional. A screen-space swipe is converted to this object's local coordinate system."))
      (car_emit_particles
         bool
         (alias
            "emit particles")
         (help
            "Do we emit particles when handling a cursor action?"))
      (car_apply_accent
         bool
         (alias
            "apply accent")
         (help
            "Do we apply the accent postproc effect when the cursor is in our collision volume/area?"))
      ('Hover Progress'
         (indent
            (car_hover_progress_seconds_to_full
               float
               (alias
                  "hover progress seconds to full")
               (help
                  "While hovering, how long it takes the hover progress to go from 0 to 1 in seconds."))
            (car_hover_progress_seconds_to_empty
               float
               (alias
                  "hover progress seconds to empty")
               (help
                  "While not hovering, how long it takes the hover progress to decay from 1 to 0 in seconds."))
            (car_hover_progress_value
               float
               (alias
                  "hover progress value")
               (help
                  "The current value of the hover progress.")
               (no_test))
            (car_hover_contributes_to_global_progress
               bool
               (disk_prop)
               (alias
                  "hover contributes to global progress")
               (help
                  "If true, we add this receiver's hover progress to the cursor's progress."))))
      ('Scrub Progress'
         (indent
            (car_scrub_progress_seconds_to_full
               float
               (alias
                  "scrub progress seconds to full")
               (help
                  "While scrubbing, how long it takes the scrub progress to go from 0 to 1 in seconds."))
            (car_scrub_progress_seconds_to_empty
               float
               (alias
                  "scrub progress seconds to empty")
               (help
                  "While not scrubbing, how long it takes the scrub progress to decay from 1 to 0 in seconds."))
            (car_scrub_progress_value
               float
               (alias
                  "scrub progress value")
               (help
                  "The current value of the scrub progress.")
               (no_test))
            (car_scrub_contributes_to_global_progress
               bool
               (disk_prop)
               (alias
                  "scrub contributes to global progress")
               (help
                  "If true, we add this receiver's scrub progress to the cursor's progress."))))
      (car_is_touching
         bool
         (alias
            "is touching")
         (help
            "True while the cursor is touching us.")
         (no_test))
      (car_is_hovering
         bool
         (alias
            "is hovering")
         (help
            "True while the cursor is hovering over/inside us.")
         (no_test))
      (car_is_swiping
         bool
         (alias
            "is swiping")
         (help
            "True while the cursor is swiping through us.")
         (no_test))
      (car_is_pushing
         bool
         (alias
            "is pushing")
         (help
            "True while the cursor is pushing through us.")
         (no_test))
      (car_is_scrubbing
         bool
         (alias
            "is scrubbing")
         (help
            "True while the cursor is scrubbing us.")
         (no_test))
      (car_is_idle
         bool
         (alias
            "is idle")
         (help
            "True if and only if every other action is false.")
         (no_test)))
   (events_out
      (on_cursor_touch
         (editor
            (cursor_touch_position_x
               float
               (help
                  "Global x position of the cursor during the touch event."))
            (cursor_touch_position_y
               float
               (help
                  "Global y position of the cursor during the touch event."))
            (cursor_touch_position_z
               float
               (help
                  "Global z position of the cursor during the touch event."))
            (cursor_touch_with_hover
               bool
               (help
                  "TRUE only if this touch came while hovering."))))
      (on_cursor_hover_begin
         (editor))
      (on_cursor_hover_end
         (editor))
      (on_cursor_swipe_begin
         (editor
            (cursor_swipe_begin_direction
               int
               (list CURSOR_ACTION_AXIS_ENUMS)
               (help
                  "The direction of the swipe. In screen or local coordinates, depending on 'swipe/push direction is local'."))))
      (on_cursor_swipe_end
         (editor
            (cursor_swipe_end_direction
               int
               (list CURSOR_ACTION_AXIS_ENUMS)
               (help
                  "The direction of the swipe. In screen or local coordinates, depending on 'swipe/push direction is local'."))
            (cursor_swipe_end_speed
               float
               (help
                  "How fast the swipe was."))))
      (on_cursor_push_begin
         (editor
            (cursor_push_begin_inwards
               bool
               (help
                  "Was the cursor pushed into the screen (true) or out of it (false)?"))
            (cursor_push_begin_direction
               int
               (list CURSOR_ACTION_AXIS_ENUMS)
               (help
                  "The direction of the push. In screen or local coordinates, depending on 'swipe/push direction is local'."))))
      (on_cursor_push_end
         (editor
            (cursor_push_end_inwards
               bool
               (help
                  "Was the cursor pushed into the screen (true) or out of it (false)?"))
            (cursor_push_end_direction
               int
               (list CURSOR_ACTION_AXIS_ENUMS)
               (help
                  "The direction of the push. In screen or local coordinates, depending on 'swipe/push direction is local'."))
            (cursor_push_end_speed
               float
               (help
                  "How fast the push was."))))
      (on_cursor_scrub_begin
         (editor))
      (on_cursor_scrub_end
         (editor))
      (on_hover_meter_filled
         (editor))
      (on_scrub_meter_filled
         (editor))))
(ScaleWithCursorCom
   (description
      "Automatically scale a transformable when the cursor itself changes scale.")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (swc_disk_scale_multiplier
         float
         (disk_prop)
         (alias
            "disk scale multiplier")
         (help
            "An additional number to multiply the cursor's scale.")
         (range 1.0e-4 10000.0))
      (swc_instance_scale_multiplier
         float
         (instance_prop)
         (alias
            "instance scale multiplier")
         (help
            "A per-instance additional number to multiply the cursor's scale.")
         (range 1.0e-4 10000.0))))
(ScreenIndicatorCom
   (description
      "Places an indicator pointing at your entity when it's offscreen (or on!).")
   (user_can_add disk)
   (instance_component FALSE)
   (required_classes Entity)
   (editor
      (ScreenIndicatorCom
         (struct
            (enabled
               bool
               (no_test)
               (help
                  "Enables placing the indicator"))
            (offscreen_indicator
               string
               (disk_prop)
               (help
                  "Name of an entity pool in the uiscreen to put at the edge of the screen for off-screen objects"))
            (onscreen_indicator
               string
               (disk_prop)
               (help
                  "Name of an entity pool in the uiscreen to put on top off on-screen objects"))
            (show_on_screen
               bool
               (disk_prop)
               (help
                  "Show the indicator when this entity is on screen"))
            (show_off_screen
               bool
               (disk_prop)
               (help
                  "Show the indicator when this entity is off screen"))
            (min_horizontal_distance_from_edge
               float
               (disk_prop)
               (help
                  "Minimum distance from the edge of the screen to put the entity"))
            (min_vertical_distance_from_edge
               float
               (disk_prop)
               (help
                  "Minimum distance from the edge of the screen to put the entity"))
            (rotate
               bool
               (disk_prop)
               (help
                  "Do you want to rotate the indicator (TRUE) or not (FALSE)?"))
            (label_text_token
               symbol
               (list
                  {token_list})
               (no_test)
               (instance_prop)
               (help
                  "The label displayed next to the screen indicator when it's active."))))))
(MessageOnDirtyCom
   (description
      "Component to tell an entity to export a message when its trans changes")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor))
(ScaleCheckerCom
   (description
      "Component to tell an entity when its scale changed")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor)
   (events_out
      (scale_changed
         (help
            "Sent when the world scale of the object changes."))))
(UnderwaterFishBoidCom
   (description
      "A custom component to efficiently drive the underwater_01 fish")
   (user_can_add disk)
   (required_classes Character)
   (editor
      (swim_enabled
         bool
         (read_only
            [enable_distance_lod])
         (help
            "when true, we are swimming.  Will smoothly ramp animations in and out when this flag is changed, per ramp in settings below"))
      (enable_distance_lod
         bool
         (disk_prop)
         (help
            "when true, we turn on a level of detail feature that turns off animations when the fish is beyond a particular distance from the camera"))
      (lod_distance
         float
         (disk_prop)
         (help
            "If LOD is enabled, the distance threshold that we turn off anims"))
      (swim_ramp_in_time
         float
         (help
            "The # of seconds to ramp in swimming when enabled")
         (disk_prop))
      (swim_ramp_out_time
         float
         (help
            "The # of reconds to ramp out when swimming is disabled")
         (disk_prop))
      (swim
         (indent
            (swim_anim_node
               object
               (class CharAnimNode)
               (help
                  "The anim node that's started on enter and scaled by turn rate")
               (disk_prop))
            (turn_rate_data_range
               VECTOR2
               (help
                  "The range of the turn rate data from the BoidCom, in degrees")
               (disk_prop))
            (swim_anim_scale_range
               VECTOR2
               (help
                  "The range of the anim scale for the anim node")
               (disk_prop))))
      (pitch
         (indent
            (pitch_anim_node
               object
               (class CharAnimNode)
               (help
                  "The anim node that's driven by pitch")
               (disk_prop))
            (pitch_data_range
               VECTOR2
               (help
                  "The range of the pitch data from the BoidCom, in degrees")
               (disk_prop))
            (pitch_anim_frame_range
               VECTOR2
               (help
                  "The range of the frame data of the anim node")
               (disk_prop))
            (pitch_smooth_rate
               float
               (help
                  "Units per second to smooth the frame data")
               (disk_prop))))
      (yaw
         (indent
            (yaw_anim_node
               object
               (class CharAnimNode)
               (help
                  "The anim node that's driven by yaw")
               (disk_prop))
            (yaw_data_range
               VECTOR2
               (help
                  "The range of the yaw data from the BoidCom, in degrees")
               (disk_prop))
            (yaw_anim_frame_range
               VECTOR2
               (help
                  "The range of the frame data of the anim node")
               (disk_prop))
            (yaw_smooth_rate
               float
               (help
                  "Units per second to smooth the frame data")
               (disk_prop))))
      (testing
         (indent
            (test_turn_rate
               float
               (help
                  "Set this to test a particular boid turn rate")
               (no_test serialize copy))
            (test_pitch_velocity
               float
               (help
                  "Set this to test a particular boid pitch velocity")
               (no_test serialize copy))
            (test_yaw_velocity
               float
               (help
                  "Set this to test a particular boid yaw velocity")
               (no_test serialize copy))))))
(ValueIncrementCom
   (description
      "Increments/decrements a value at a configurable rate.")
   (user_can_add TRUE)
   (editor
      (ValueIncrementCom
         (struct
            (increment
               float
               (help
                  "The amount the value is incremented/decremented by."))
            (normal_increment_time
               float
               (help
                  "The number of seconds between each increment when incrementing at normal speed."))
            (fast_increment_time
               float
               (help
                  "The number of seconds between each increment when incrementing at fast speed."))
            (increment_state
               int
               (list INCREMENT_STATES)
               (no_test)
               (help
                  "The current increment state."))
            (min_value
               float
               (help
                  "The smallest value the value can be decremented to."))
            (max_value
               float
               (help
                  "The largest value the value can be incremented to."))
            (current_value
               float
               (no_test)
               (help
                  "The value that's incremented/decremented."))))))
(CatchLaneRecordableCom
   (description
      "Place on an entity to expose a CatchLane object inside to a CatchLaneRecorder object.  Mirrors some recording state as well...")
   (user_can_add disk)
   (required_classes Entity CatchLane)
   (editor
      (clr_lane
         object
         (class CatchLane)
         (disk_prop)
         (help
            "The lane we're exposing. If this component is on a CatchLane itself, this will be filled in automatically"))
      (clr_record_state
         int
         (list DISCOVERY_RECORDABLE_STATES)
         (read_only TRUE)
         (no_test)
         (help
            "Mirrors state of the recorder we're associated with."))
      (clr_recording_has_data
         bool
         (read_only TRUE)
         (no_test)
         (help
            "Do we have any data recorded on our lane?")))
   (events_out
      (on_recorded_event_played
         (help
            "Recorded event just played back on the associated lane"))))
(DiscoverySceneProgressionCom
   (description
      "Manages progression through a discovery scene")
   (user_can_add TRUE)
   (required_classes Scene)
   (editor
      (dspc_scene_type
         int
         (list DISCOVERY_SCENE_PROGRESSION_TYPES)
         (alias
            "scene type"))
      (dspc_neighborhoods
         (array
            (struct
               (portal
                  object
                  (class Entity)
                  (components
                     (PulseNodeCom)))
               (a_switch
                  object
                  (class Entity)
                  (components
                     (TransformationTargetCom)))
               (b_switch
                  object
                  (class Entity)
                  (components
                     (TransformationTargetCom)))
               (portal_camera_node
                  symbol
                  (list
                     {if_else
                        [dspc_camman]
                        {[dspc_camman]
                           get_node_names}
                        ('')}))
               (state
                  int
                  (list NEIGHBORHOOD_STATES)
                  (help
                     "What state is this neighborhood in?")
                  (read_only TRUE))
               (neighborhood_data
                  object
                  (class DiscoveryNeighborhoodData)
                  (help
                     "Optional, where do we output neighborhood data?"))
               (cameras
                  (indent
                     (unlocking_a_switch_cutscene
                        symbol
                        (list
                           {if_else
                              [dspc_camman]
                              {[dspc_camman]
                                 get_cutscene_names}
                              ('')}))
                     (unlocking_b_switch_cutscene
                        symbol
                        (list
                           {if_else
                              [dspc_camman]
                              {[dspc_camman]
                                 get_cutscene_names}
                              ('')}))))
               (animations
                  (indent
                     (unlocking_a_switch_anim
                        object
                        (class PropAnim)
                        (help
                           "Plays when we finish original mix, unlock transformation object A at end"))
                     (activated_a_switch_anim
                        object
                        (class PropAnim)
                        (help
                           "Plays when we activate transformation object A.  We switch to A when anim starts"))
                     (unlocking_b_switch_anim
                        object
                        (class PropAnim)
                        (help
                           "Plays when we finish first remix, unlock transformation object B at end"))
                     (activated_b_switch_anim
                        object
                        (class PropAnim)
                        (help
                           "Plays when we activate transformation object B.  We switch to B when anim starts"))
                     (completing_neighborhood_anim
                        object
                        (class PropAnim)
                        (help
                           "Plays when we finish second remix, complete neighborhood at end"))))))
         (alias
            "neighborhoods"))
      ('hat piece'
         (indent
            (dspc_hat_piece_finale_object
               object
               (class Entity)
               (components
                  (HatPieceCom))
               (alias
                  "finale object"))
            (dspc_hat_piece_finale_zoom_arrows
               object
               (class Entity)
               (components
                  (ZoomEngagementCom))
               (alias
                  "zoom arrows"))
            (dspc_hat_piece_finale_camera_node
               symbol
               (list
                  {if_else
                     [dspc_camman]
                     {[dspc_camman]
                        get_node_names}
                     ('')})
               (alias 'camera node'))
            (dspc_hat_piece_unlock_cutscene
               symbol
               (list
                  {if_else
                     [dspc_camman]
                     {[dspc_camman]
                        get_cutscene_names}
                     ('')})
               (alias 'unlock cutscene')))
         (hide
            {==
               [dspc_scene_type]
               kDiscoverySceneProgression_Type2}))
      (manipulator
         (indent
            (dspc_manipulator_finale_object
               object
               (class Entity)
               (alias
                  "finale object")
               (components
                  (DiscoveryManipulatorCom)))
            (dspc_manipulator_finale_zoom_arrows
               object
               (class Entity)
               (components
                  (ZoomEngagementCom))
               (alias
                  "zoom arrows"))
            (dspc_manipulator_finale_camera_node
               symbol
               (list
                  {if_else
                     [dspc_camman]
                     {[dspc_camman]
                        get_node_names}
                     ('')})
               (alias 'camera node'))
            (dspc_manipulator_unlock_cutscene
               symbol
               (list
                  {if_else
                     [dspc_camman]
                     {[dspc_camman]
                        get_cutscene_names}
                     ('')})
               (alias 'unlock cutscene'))
            (dspc_manipulator_complete_cutscene
               symbol
               (list
                  {if_else
                     [dspc_camman]
                     {[dspc_camman]
                        get_cutscene_names}
                     ('')})
               (alias 'completed cutscene'))
            (dspc_manipulator_ready_for_first_use
               bool
               (alias
                  "ready for first use")
               (read_only TRUE))))
      (dspc_nodes
         (array
            object
            (class Object)
            (components
               (DiscoveryNodeCom)))
         (alias
            "nodes")
         (help
            "List of nodes in the scene that you can get magic from.  Manipulator doesn't count."))
      ('special case behavior'
         (indent
            (dspc_disable_dynamic_cheat_search
               bool
               (alias
                  "disable dynamic cheat search")
               (help
                  "If true, we don't dynamically search for closest neighborhood.  We assume neighborhoods are ordered left to right and evenly subdivide playspace."))
            (dspc_dont_drive_noise
               bool
               (alias
                  "don't drive noise")
               (help
                  "Disables communication with DiscoveryNoiseCom.  Used in workshop.")))
         (help
            "Sully doesn't like adding things here"))
      (noise
         (indent
            (dspc_intermittent_noise_hi_duration
               SIMPLE_RANGED_FLOAT
               (alias
                  "attack duration")
               (help
                  "How long does the noise last when it's intermittent?  Random range."))
            (dspc_intermittent_noise_lo_duration
               SIMPLE_RANGED_FLOAT
               (alias
                  "attack break duration")
               (help
                  "How long does the noise wait in it's low state when it's intermittent? Random range."))
            (dspc_noise_regions
               (array
                  (struct
                     (state
                        int
                        (list DISCOVERY_SCENE_PROGRESSION_NOISE_REGION_STATES)
                        (alias
                           "noise state")
                        (read_only TRUE)
                        (help
                           "What state is the noise region in?"))
                     (source
                        object
                        (class Trans)
                        (help
                           "What is the source of this region's noise?"))
                     (attack_radius
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "attack radius")
                        (help
                           "What is the radius of the noise when it's on (random range)?"))
                     (attack_intensity
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "attack intensity")
                        (help
                           "What is the radius of the noise when it's on (random range)?"))
                     (attack_type
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "attack type")
                        (help
                           "What is the radius of the noise when it's on (random range)?"))
                     (attack_frequency
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "attack frequency")
                        (help
                           "What is the radius of the noise when it's on (random range)?"))
                     (lo_radius
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "low radius")
                        (help
                           "What is the radius of the noise when it's intermittent but dormant (random range)?"))
                     (lo_intensity
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "low intensity")
                        (help
                           "What is the intensity of the noise when it's intermittent but dormant (random range)?"))
                     (lo_type
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "low type")
                        (help
                           "What is the intensity of the noise when it's intermittent but dormant (random range)?"))
                     (lo_frequency
                        SIMPLE_RANGED_FLOAT
                        (alias
                           "low frequency")
                        (help
                           "What is the intensity of the noise when it's intermittent but dormant (random range)?"))
                     (blend_time
                        float
                        (alias
                           "blend time")
                        (help
                           "In seconds, how long do we take to blend between noise states?"))
                     (death_anim_xfm_cam
                        object
                        (class PropAnim)
                        (alias
                           "death anim (xfm cam)")
                        (help
                           "What animation do we play when the noise is dying and xfm cam will play?"))
                     (death_anim_zoom_out_cam
                        object
                        (class PropAnim)
                        (alias
                           "death anim (zoom out cam)")
                        (help
                           "What animation do we play when the noise is dying and zoom out cam will play?"))
                     (death_source
                        object
                        (class Trans)
                        (alias
                           "death source")
                        (help
                           "What's the source for the noise when it's dying?"))
                     (distance
                        float
                        (read_only TRUE)))
                  (header
                     {elem
                        ("left"
                           "right"
                           "premanip")
                        {elem $editor_prop_path 1}}))
               (fixed_size TRUE)
               (alias
                  "noise regions"))
            (dspc_noise_state
               int
               (list DISCOVERY_SCENE_PROGRESSION_NOISE_SCENE_STATES)
               (read_only TRUE))
            (dspc_noise_neighborhood_anim
               object
               (class PropAnim)
               (alias
                  "neighborhood noise anim"))
            (dspc_noise_premanip_anim
               object
               (class PropAnim)
               (alias
                  "premanip noise anim"))
            (cheat_set_noise_off
               script
               (script
                  {$this cheat_set_noise_state kDiscoverySceneProgression_NoiseSceneOff})
               (alias
                  "Set noise off")
               (help
                  "Forces the noise to be at its off state"))
            (cheat_set_noise_neighborhood
               script
               (script
                  {$this cheat_set_noise_state kDiscoverySceneProgression_NoiseSceneNeighborhood})
               (alias
                  "Enable neighborhood noise")
               (help
                  "Forces the noise to be at its neighborhood state"))
            (cheat_toggle_noise_left
               script
               (script
                  {$this cheat_toggle_noise_left})
               (alias
                  "Toggle left noise")
               (hide
                  {!=
                     [dspc_noise_state]
                     kDiscoverySceneProgression_NoiseSceneNeighborhood}))
            (cheat_toggle_noise_right
               script
               (script
                  {$this cheat_toggle_noise_right})
               (alias
                  "Toggle right noise")
               (hide
                  {!=
                     [dspc_noise_state]
                     kDiscoverySceneProgression_NoiseSceneNeighborhood}))
            (cheat_set_noise_premanip
               script
               (script
                  {$this cheat_set_noise_state kDiscoverySceneProgression_NoisePremanip})
               (alias
                  "Enable premaip noise")
               (help
                  "Forces the noise to be at its premanip state"))
            (cheat_noise_attack
               script
               (script
                  {$this cheat_noise_attack})
               (alias
                  "Attack"))
            (cheat_restore_noise_state
               script
               (script
                  {$this cheat_restore_noise_state})
               (alias
                  "Restore noise")
               (help
                  "Undoes any forced noise state and resumes normal behavior"))))
      (dspc_artifacts
         (array
            (struct
               (default_value
                  int
                  (help
                     "What is the default value of this property the first time you play this scene?"))
               (driver
                  prop_ref
                  (allowed_prop_types
                     (int bool))
                  (help
                     "Configures the property that this artifact controls"))))
         (alias
            "artifacts")
         (help
            "Properties that should be saved between sessions"))
      (outputs
         (indent
            (dscp_num_neighborhoods_visited_a
               int
               (alias
                  "num neighborhoods visited a")
               (read_only TRUE))
            (dscp_num_neighborhoods_noise_reduced
               int
               (alias
                  "num neighborhoods noise reduced")
               (read_only TRUE))
            (dscp_num_neighborhoods_visited_b
               int
               (alias
                  "num neighborhoods visited b")
               (read_only TRUE))
            (dspc_magic_count
               int
               (alias
                  "magic count")
               (read_only TRUE))
            (dspc_visit_state
               int
               (list DISCOVERY_VISIT_STATES)
               (alias
                  "visit state")
               (read_only TRUE))
            (dspc_visit_portal_neighborhood_num
               int
               (alias
                  "pulse neighborhood returned from")
               (read_only TRUE)
               (help
                  "Used when our visit state says we just returned from pulse"))
            (dspc_visit_portal_play_num
               int
               (list POST_PULSE_EVENTS)
               (alias
                  "post pulse event")
               (read_only TRUE)
               (help
                  "Used when our visit state says we just returned from pulse.")))))
   (events_in
      (save_artifacts
         (help
            "Trigger a save to artifact persistence data.  Will NOT actually trigger a save to disk tho"))
      (cheat_advance_closest_portal)
      (cheat_complete_progression)
      (cheat_reset_progression)
      (cheat_set_noise_state
         (editor
            (state
               int
               (list DISCOVERY_SCENE_PROGRESSION_NOISE_SCENE_STATES)))
         (alias
            "Force noise state"))
      (cheat_restore_noise_state
         (alias
            "Restore noise state")))
   (events_out
      (transformation_target_activated
         (editor
            (neighborhood_id int)))
      (reentered_discovery))
   (disable_noise
      {$this cheat_set_noise_state kDiscoverySceneProgression_NoiseSceneOff})
   (restore_noise
      {$this cheat_restore_noise_state}))
(TransformationTargetCom
   (description
      "Attached to a discovery transformation target")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (ttc_has_been_activated
         bool
         (alias
            "has been activated")
         (read_only TRUE))
      (ttc_neighborhood_state
         int
         (list NEIGHBORHOOD_STATES)
         (alias
            "neighborhood state")
         (read_only TRUE))
      (ttc_playing_unlock_cutscene
         bool
         (alias
            "playing unlock cutscene")
         (read_only TRUE)))
   (events_in
      (ttc_activate
         (alias
            "activate transformation target")))
   (events_out
      (ttc_activate
         (alias
            "transformation object activated"))))
(PulseLeaderboardCom
   (description
      "Attached to a UI List to populate it with Pulse leaderboard data.")
   (user_can_add TRUE)
   (required_classes UIList)
   (editor
      (PulseLeaderboardCom
         (struct
            (song
               symbol
               (list
                  {song_mgr get_song_list TRUE})
               (no_test serialize)
               (help
                  "The song to get leaderboard data for"))
            (leaderboard_mode
               int
               (list LEADERBOARD_MODES)
               (no_test serialize)
               (help
                  "The mode that defines what data the leaderboard will retrieve."))
            (leaderboard_status
               int
               (read_only TRUE)
               (list PULSE_LEADERBOARD_STATUSES)
               (help
                  "The current status of the leaderboard."))))))
(PulseChoiceMapCom
   (description
      "Exposes choice map data to an entity")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (orig_mix_fraction
         float
         (read_only TRUE)
         (help
            "Fraction of song using original mix"))
      (mix1_fraction
         float
         (read_only TRUE)
         (help
            "Fraction of song using mix 1"))
      (mix2_fraction
         float
         (read_only TRUE)
         (help
            "Fraction of song using mix 2")))
   (events_in
      (refresh_data)
      (setup_random_data)))
(ActivityStreamCom
   (description
      "Attached to an entity to populate with activity stream data.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (label
         object
         (class UILabel)
         (disk_prop)
         (help
            "The label to use for the stream")))
   (events_in
      (override_token
         (editor
            (token
               symbol
               (help
                  "The text token to set the label to.")))
         (help
            "Overrides the list of strings being displayed with a text token."))
      (goto_first_string)
      (goto_next_string))
   (events_out
      (activity_stream_updated)))
(SubtitleLabelCom
   (description
      "Attached to a label control subtitle text and properly breaking it up.")
   (user_can_add disk)
   (required_classes UILabel)
   (editor)
   (events_in
      (set_subtitle
         (editor
            (token
               symbol
               (help
                  "The subtitle token to use"))
            (duration
               float
               (help
                  "The time the subtitle will be up for")))
         (help
            "Command to set the subtitle text on a label."))
      (clear_subtitle
         (help
            "Command to clear the subtitle text on a label.")))
   (events_out
      (subtitle_finished)))
(TextPagingCom
   (description
      "Attached to a UI Label to page it through multiple pages of text.")
   (user_can_add TRUE)
   (required_classes UILabel)
   (editor
      (TextPagingCom
         (struct
            (text_tokens
               (array
                  symbol
                  (list
                     {token_list}))
               (help
                  "The text tokens that are paged through."))
            (current_page_index
               int
               (read_only TRUE)
               (help
                  "The current page index."))
            (can_increment_page_index
               bool
               (read_only TRUE)
               (help
                  "True if the page index can be incremented, false otherwise."))
            (can_decrement_page_index
               bool
               (read_only TRUE)
               (help
                  "True if the page index can be decremented, false otherwise.")))))
   (events_in
      (increment_page_index
         (help
            "Increments the current page index."))
      (decrement_page_index
         (help
            "Decrements the current page index."))
      (reset_page
         (help
            "resets back to page 0."))))
(DiscoveryNodeCom
   (description
      "Handles recording/playback for Discovery nodes")
   (user_can_add TRUE)
   (required_classes Object)
   (editor
      (dnc_recordable
         object
         (class Object)
         (disk_prop)
         (allow_this))
      (dnc_persistence_id
         symbol
         (list
            {$this list_persistence_ids})
         (instance_prop)
         (help
            "The unique identifier for this node, use for saving recordings"))
      (dnc_original_sampler
         object
         (class FusionSampler)
         (disk_prop))
      (dnc_pulse_sampler
         object
         (class FusionSampler)
         (disk_prop))
      (dnc_current_sampler
         object
         (class FusionSampler)
         (read_only TRUE)
         (no_test)
         (disk_prop))
      (dnc_backplane_song
         object
         (class Sound)
         (instance_prop))
      (dnc_cam_manager
         object
         (class DiscoveryCamManager)
         (hide TRUE))
      (dnc_success_cutscene
         symbol
         (list
            {if_else
               [dnc_cam_manager]
               {[dnc_cam_manager]
                  get_cutscene_names}
               0})
         (help
            "The cutscene to play when successfully completing this node")
         (instance_prop))
      (dnc_souvenir_approach_time
         float
         (instance_prop)
         (help
            "The # of seconds to be in souvenir approach state before playing souvenir audio.  Use this if you need to play animations in advance of souvenir audio."))
      (dnc_backplane_play_ending_time
         float
         (instance_prop)
         (help
            "How many seconds ahead of backplane recording end do we send an event out for audio (to trigger fades, etc)"))
      (dnc_souvenir_state
         int
         (list DISCOVERY_NODE_SOUVENIR_STATES)
         (no_test)
         (read_only TRUE)
         (help
            "Current state of souvenir playback for the backplane"))
      (dnc_sample_set
         int
         (list DISCOVERY_NODE_SAMPLE_SETS)
         (no_test))
      (dnc_stage_index
         int
         (help
            "Can be used for whatever you want, to track progression of node")
         (no_test)
         (disk_prop))
      (dnc_state
         int
         (list DISCOVERY_NODE_STATES)
         (no_test)
         (read_only TRUE))
      (dnc_recorder_state
         int
         (list DISCOVERY_RECORDABLE_STATES)
         (no_test)
         (read_only TRUE))
      (dnc_play_for_cutscene
         bool
         (no_test)
         (instance_prop)
         (help
            "Set this to true during portion of success cutscene where node should be playing back souvenir audio"))
      (dnc_node_completed
         bool
         (read_only TRUE)
         (instance_prop)
         (help
            "This is true once our node is marked as completed"))
      (dnc_has_build_state
         bool
         (disk_prop)
         (help
            "Set this to false if you want to skip right into play state on entry of a node. Used for Manipulators in Discovery."))
      (dnc_can_apply_recordable_state
         bool
         (no_test serialize)
         (help
            "Is the node com allowed to drive its recordable right now?"))
      (dnc_souvenir_override
         int
         (list DISCOVERY_NODE_SOUVENIR_OVERRIDE_STATES)
         (no_test serialize)
         (help
            "Do we want to override our souvenir behavior?  Not saved."))
      (dnc_force_build_state
         script
         (alias 'Force Build State')
         (script
            {$this dnc_return_to_build})
         (help
            "For previewing, force into build state"))
      (dnc_force_play_state
         script
         (alias 'Force Play State')
         (script
            {$this dnc_force_to_play})
         (help
            "For previewing, force into play state"))
      (dnc_waiting_for_zoom_out
         bool
         (alias 'Waiting for ZoomOut')
         (read_only TRUE)
         (no_test)
         (help
            "Are we in play mode, waiting for the player to zoom out from the node?"))
      (dnc_has_custom_zoom_out_trigger
         bool
         (instance_prop)
         (help
            "True if this node has a custom zoom out trigger, false if it should prompt for zoom out when the node recording can be committed."))
      (dnc_owns_rec_play_ui
         bool
         (alias 'Owns rec/play UI')
         (help
            "Do we own our rec/play UI?  False for manips")
         (disk_prop))
      (dnc_owns_cutscene_playback
         bool
         (alias 'owns cutscene playback')
         (help
            "Do we handle our cutscene playback?")
         (disk_prop))
      (dnc_disable_tutorial_nags
         bool
         (alias 'Disable tutorial nags?')
         (help
            "Disables any systemic tutorial nags to allow custom scripted ones")
         (instance_prop))
      (dnc_showing_raise_hand_nag
         bool
         (alias 'Showing Raise Hand Nag?')
         (read_only TRUE)
         (no_test)
         (help
            "Are we showing the nag UI about raising your hand, because you've been sitting there with your hand down for a bit?"))
      (dnc_showing_lower_hand_nag
         bool
         (alias 'Showing Lower Hand Nag?')
         (read_only TRUE)
         (no_test)
         (help
            "Are we showing the nag UI about lowering your hand, because you've been in record mode for awhile?"))
      (dnc_allow_souvenir_in_other_nodes
         bool
         (alias
            "Allow souvenir in other nodes")
         (disk_prop)
         (help
            "Do we let the souvenir play when in other nodes?"))
      (dnc_manually_enable_record_ui
         bool
         (alias
            "Manually enable record ui?")
         (disk_prop)
         (help
            "when true, the record/play ui is not automatically show when we enter play mode.  instead, flows trigger it manually with the 'enable_record_ui' command when they are ready.")))
   (events_in
      (dnc_completed
         (alias
            "build_stage_completed")
         (help
            "Call this when we've completed the build stage of a node and want to transition into play state."))
      (dnc_return_to_build
         (help
            "Call this when we want to revert to build state"))
      (dnc_force_to_play
         (help
            "Force node into play state"))
      (dnc_enable_record_play_ui
         (help
            "If dnc_manually_enable_record_ui flag is true, this can be used to trigger record/play ui once in the play state"))
      (dnc_trigger_zoom_out_prompt
         (help
            "Manually triggers the node zoom out prompt.")))
   (events_out
      (dnc_on_backplane_play_ending
         (help
            "Called during backplane recording playback, in advance of the ending.  # of seconds before ending specified by 'dnc_backplane_play_ending_time' property"))
      (dnc_on_new_recording_locked
         (help
            "Called when we lock (and save) a new recording"))))
(FluxTutorialScreenCom
   (description
      "Attached to a UIScreen to give it tutorial screen behavior.")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (FluxTutorialScreenCom
         (struct
            (tutorial_id
               symbol
               (read_only TRUE)
               (help
                  "The ID of the tutorial this screen represents."))
            (title_token
               symbol
               (read_only TRUE)
               (help
                  "The text token to display as the title of the screen."))
            (title_token_parameter
               symbol
               (read_only TRUE)
               (help
                  "A symbol parameter passed to the title string, or empty if there is none."))
            (text_token
               symbol
               (read_only TRUE)
               (help
                  "The text token to display as the text of the screen."))
            (image_1
               symbol
               (read_only TRUE)
               (help
                  "The ID of the first image displayed on the tutorial screen."))
            (image_2
               symbol
               (read_only TRUE)
               (help
                  "The ID of the second image displayed on the tutorial screen."))
            (position
               symbol
               (read_only TRUE)
               (help
                  "The position to display the tutorial screen. If not specified, the default position is used."))))))
(FluxCreditsCom
   (description
      "Attached to a UIList to populate it with the Flux credits.")
   (user_can_add TRUE)
   (required_classes UIList))
(FluxCreditsEntryCom
   (description
      "Attached to the entity that is created for each row in the credits list to receive the credits values for the row.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (FluxCreditsEntryCom
         (struct
            (credits_entry_type
               int
               (list FLUX_CREDITS_ENTRY_TYPES)
               (help
                  "The type of credits entry this row represents."))
            (heading
               string
               (help
                  "If a heading entry, the heading to display."))
            (title
               string
               (help
                  "If a name/title entry, the title to display."))
            (name
               string
               (help
                  "If a name/title entry, the name to display."))
            (image
               string
               (help
                  "If an image entry, the name of the image to display."))
            (text
               string
               (help
                  "If a centered text entry, the text to display."))))))
(MeshTexturePainterCom
   (alias
      "Mesh Texture Paint")
   (description
      "Allows you to paint into a texture on a mesh in UV space.")
   (user_can_add TRUE)
   (required_classes Mesh)
   (editor
      (target_tex
         object
         (class Tex)
         (help
            "Texture to target with painting data"))
      (brush_mat
         object
         (class Mat)
         (help
            "material to render into texture"))
      (brush_size
         VECTOR2
         (range 0 1)
         (help
            "Brush size in UV space"))
      (random_scale
         VECTOR2
         (range 0.1 5)
         (help
            "Random scale min and max"))
      (random_position
         float
         (help
            "Jitter position of samples in world space"))
      (sub_samples
         int
         (range 1 64)
         (slider)
         (help
            "Time based subsampling\nHow many samples to perform per 1/30th of a second."))
      (min_spacing
         float
         (help
            "Motion based subsampling\nIn meters; forces the brushes to be stamped at no rate lower than this distance apart"))
      (fade_per_second
         float
         (help
            "Opacity to fade out per second"))
      (cursor
         object
         (class Trans)
         (help
            "Trans which acts as the brush"))
      (cursor_enabled
         bool
         (help
            "Should the cursor object paint right now?"))))
(OutputTransProperties
   (description
      "Makes some properties of Trans objects that don't normally broadcast available to Flows.  Can also drive an output property directly to save time, improve performance.")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (Position
         (indent
            (otp_world_x
               float
               (alias 'world x')
               (no_test)
               (help
                  "World x position"))
            (otp_world_y
               float
               (alias 'world y')
               (no_test)
               (help
                  "World y position"))
            (otp_world_z
               float
               (alias 'world z')
               (no_test)
               (help
                  "World z position"))
            (otp_drive_with_world_x
               PROPREF_FLOAT
               (alias 'drive with world x')
               (help
                  "Property to drive directly with world x position"))
            (otp_drive_with_world_y
               PROPREF_FLOAT
               (alias 'drive with world y')
               (help
                  "Property to drive directly with world y position"))
            (otp_drive_with_world_z
               PROPREF_FLOAT
               (alias 'drive with world z')
               (help
                  "Property to drive directly with world z position"))))
      ('X Axis'
         (indent
            (otp_x_axis_x
               float
               (alias 'x axis x')
               (no_test)
               (help
                  "X axis of Trans in world space, x component"))
            (otp_x_axis_y
               float
               (alias 'x axis y')
               (no_test)
               (help
                  "X axis of Trans in world space, y component"))
            (otp_x_axis_z
               float
               (alias 'x axis z')
               (no_test)
               (help
                  "X axis of Trans in world space, z component"))
            (otp_drive_with_x_axis_x
               PROPREF_FLOAT
               (alias 'drive with x axis x')
               (help
                  "Property to drive directly with x axis, x component"))
            (otp_drive_with_x_axis_y
               PROPREF_FLOAT
               (alias 'drive with x axis y')
               (help
                  "Property to drive directly with x axis, y component"))
            (otp_drive_with_x_axis_z
               PROPREF_FLOAT
               (alias 'drive with x axis z')
               (help
                  "Property to drive directly with x axis, z component"))))
      ('Y Axis'
         (indent
            (otp_y_axis_x
               float
               (alias 'y axis x')
               (no_test)
               (help
                  "Y axis of Trans in world space, x component"))
            (otp_y_axis_y
               float
               (alias 'y axis y')
               (no_test)
               (help
                  "Y axis of Trans in world space, y component"))
            (otp_y_axis_z
               float
               (alias 'y axis z')
               (no_test)
               (help
                  "Y axis of Trans in world space, z component"))
            (otp_drive_with_y_axis_x
               PROPREF_FLOAT
               (alias 'drive with y axis x')
               (help
                  "Property to drive directly with y axis, x component"))
            (otp_drive_with_y_axis_y
               PROPREF_FLOAT
               (alias 'drive with y axis y')
               (help
                  "Property to drive directly with y axis, y component"))
            (otp_drive_with_y_axis_z
               PROPREF_FLOAT
               (alias 'drive with y axis z')
               (help
                  "Property to drive directly with y axis, z component"))))
      ('Z Axis'
         (indent
            (otp_z_axis_x
               float
               (alias 'z axis x')
               (no_test)
               (help
                  "Z axis of Trans in world space, x component"))
            (otp_z_axis_y
               float
               (alias 'z axis y')
               (no_test)
               (help
                  "Z axis of Trans in world space, y component"))
            (otp_z_axis_z
               float
               (alias 'z axis z')
               (no_test)
               (help
                  "Z axis of Trans in world space, z component"))
            (otp_drive_with_z_axis_x
               PROPREF_FLOAT
               (alias 'drive with z axis x')
               (help
                  "Property to drive directly with z axis, x component"))
            (otp_drive_with_z_axis_y
               PROPREF_FLOAT
               (alias 'drive with z axis y')
               (help
                  "Property to drive directly with z axis, y component"))
            (otp_drive_with_z_axis_z
               PROPREF_FLOAT
               (alias 'drive with z axis z')
               (help
                  "Property to drive directly with z axis, z component"))))))
(DiscoveryRecorderExposerCom
   (description
      "Attached to entities with IDiscoveryRecordables inside.  Used to hook up node recording to entities with embedded recorders.")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (dre_recorder
         object
         (class Object)
         (alias Recorder)
         (disk_prop)
         (help
            "The recorder to expose"))))
(WorldRewardNameTagCom
   (description
      "Attached to world rewards (i.e. hat pieces and manipulators) to display their nametag information when highlighted.")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (WorldRewardNameTagCom
         (struct
            (reward_type
               int
               (disk_prop)
               (list WORLD_REWARD_TYPES)
               (help
                  "The type of reward that the entity represents."))
            (name_token
               symbol
               (instance_prop)
               (help
                  "The token of the reward's name."))
            (description_token
               symbol
               (instance_prop)
               (help
                  "The token of the reward's description."))
            (should_display_nametag
               bool
               (no_test serialize)
               (help
                  "True if the reward's nametag should currently be displayed, false otherwise."))))))
(ManipulatorUnlockEventCom
   (description
      "Tracks when a manipulator unlock even should be triggered.")
   (user_can_add TRUE)
   (editor
      (ManipulatorUnlockEventCom
         (struct
            (manipulator_unlock_event_world
               symbol
               (read_only TRUE)
               (list
                  {$this get_manipulator_worlds})
               (help
                  "The world whose manipulator unlock event should be triggered.")))))
   (events_in
      (mark_manipulator_unlock_event_complete
         (editor
            (manipulator_world
               symbol
               (list
                  {[target]
                     get_manipulator_worlds})
               (help
                  "The world whose manipulator unlock event was completed.")))
         (help
            "Marks the specified world's manipulator unlock event as completed."))))
(ScreenspaceBlendCom
   (description
      "Used to blend objects into screenspace.")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (sbc_sub_trans
         object
         (class Trans)
         (alias
            "sub trans")
         (disk_prop)
         (help
            "Optional. If set, this trans is what gets the screenspace transformation applied instead of the entire entity."))
      (sbc_blend
         float
         (no_test serialize)
         (range 0.0 1.0)
         (slider)
         (alias
            "blend"))
      (sbc_screen_dist
         float
         (alias
            "screen dist"))
      (sbc_screen_pos
         VECTOR2
         (alias
            "screen pos"))
      (sbc_screen_scale
         float
         (alias
            "screen scale"))
      (sbc_always_face_camera
         bool
         (alias
            "always face camera"))
      (sbc_scale_when_facing_camera
         bool
         (alias
            "scale when facing camera")
         (help
            "If true, we scale the entity to a uniform screen-space size when its blend is 0.")
         (read_only
            {!
               [sbc_always_face_camera]}))
      (sbc_scale_distance
         float
         (alias
            "scale distance")
         (help
            "The entity will be sized to appear to be this distance from the camera.")
         (range 1.0e-4 1000.0)
         (disk_prop)
         (read_only
            {!
               [sbc_always_face_camera]}))
      (sbc_scale_multiplier
         float
         (alias
            "scale multiplier")
         (help
            "An additional scale applied when facing camera to tweak our size.")
         (range 1.0e-4 1000.0)
         (read_only
            {!
               [sbc_always_face_camera]}))
      (bake_transform
         script
         (script
            {$this bake_transform})
         (no_test))))
(PlayspaceWarningCom
   (description
      "Determines whether the player is outside of the playspace boundaries.")
   (user_can_add TRUE)
   (editor
      (PlayspaceWarningCom
         (struct
            (is_playspace_warning_allowed
               bool
               (read_only TRUE)
               (help
                  "True if the game is currently in a state that allows the playspace warning, false otherwise."))
            (is_active_skeleton_outside_playspace
               bool
               (read_only TRUE)
               (help
                  "True if the active skeleton is outside of the acceptable playspace boundaries, false otherwise."))
            (is_secondary_skeleton_outside_playspace
               bool
               (read_only TRUE)
               (help
                  "True if the secondary skeleton is outside of the acceptable playspace boundaries, false otherwise."))
            (is_too_close
               bool
               (read_only TRUE)
               (help
                  "True if either player is too close to the camera, false otherwise."))
            (is_too_far_left
               bool
               (read_only TRUE)
               (help
                  "True if either player is too far left in the playspace, false otherwise."))
            (is_too_far_right
               bool
               (read_only TRUE)
               (help
                  "True if either player is too far right in the playspace, false otherwise."))
            (is_coop
               bool
               (read_only TRUE)
               (help
                  "True if both players are being tracked."))))))
(PulseMultiplayerHandshakeCom
   (description
      "Detects when the players have shook hands to activate Pulse multiplayer.")
   (user_can_add TRUE)
   (editor
      (PulseMultiplayerHandshakeCom
         (struct
            (have_players_shook_hands
               bool
               (read_only TRUE)
               (help
                  "True if the players have shook hands, false otherwise. This is reset to false if one of the players leaves the playspace."))))))
(JournalPageEngagementCom
   (description
      "Component for journal page engagement")
   (user_can_add disk)
   (required_classes Entity)
   (editor)
   (events_in
      (jpec_disengage)))
(EngagableNameTagCom
   (description
      "Attached to an engagable to display a nametag when it's primed.")
   (user_can_add TRUE)
   (required_classes Entity)
   (editor
      (EngagableNameTagCom
         (struct
            (nametag_type
               int
               (list NAMETAG_TYPES)
               (help
                  "The type of nametag displayed for the engagable."))
            (custom_nametag_title_token
               symbol
               (list
                  {token_list})
               (hide
                  {!=
                     [EngagableNameTagCom nametag_type]
                     kNameTagTypeCustom})
               (help
                  "The token displayed as the title of the custom nametag."))
            (custom_nametag_description_token
               symbol
               (list
                  {token_list})
               (hide
                  {!=
                     [EngagableNameTagCom nametag_type]
                     kNameTagTypeCustom})
               (help
                  "The token displayed as the description of the custom nametag."))))))
(BoidBoundaryClampCom
   (description
      "To be placed parallel to a BoidCom, and can be configured to clamp the boid's position to always stay STRICTLY within its BoidController's rectangular bounds.")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor
      (clamp_planes
         bitfield
         (list FLUX_BOID_CLAMP_PLANES)
         (help
            "Which sides of boid rectangle volume do we clamp the position of the boid onto (i.e which sides do we care about?)"))))
(HatPieceCom
   (description
      "Placed on discovery hat pieces to provide an interface for collection")
   (user_can_add disk)
   (required_classes Entity)
   (editor
      (hpc_collected
         bool
         (alias
            "collected")
         (read_only TRUE)
         (help
            "Have we been collected? Collection triggered at scene end.")))
   (events_in
      (hpc_request_collection
         (alias
            "request collection"))))
(DepthBufferPlayerPosCom
   (description
      "Expose a smoothed screen position of the player within the depth buffer")
   (user_can_add disk)
   (required_classes StreamRenderer)
   (editor
      (dbp_smooth_amount
         float
         (alias
            "Smoothing Amount")
         (help
            "Amount of smoothing to apply to output, form 0 to 1 (0 being no smoothing)"))
      (dbp_enabled
         bool
         (alias
            "Updating enabled")
         (no_test)
         (help
            "are we updating at all? not saved..."))
      (dbp_player_pos
         VECTOR2
         (alias
            "Player Pos")
         (read_only TRUE)
         (no_test)
         (help
            "The x, y position within the depth texture of the player (coordinates go from 0 to 1)"))))
(WorkshopNoiseStateCom
   (description
      "Exposes the current noise state of the workshop.")
   (user_can_add TRUE)
   (editor
      (WorkshopNoiseStateCom
         (struct
            (is_underwater1_noise_active
               bool
               (read_only TRUE)
               (help
                  "True if Underwater1 has noise in it, false otherwise."))
            (is_forest1_noise_active
               bool
               (read_only TRUE)
               (help
                  "True if Forest1 has noise in it, false otherwise."))
            (is_city1_noise_active
               bool
               (read_only TRUE)
               (help
                  "True if City1 has noise in it, false otherwise."))
            (is_factory1_noise_active
               bool
               (read_only TRUE)
               (help
                  "True if Factory1 has noise in it, false otherwise."))
            (is_space1_noise_active
               bool
               (read_only TRUE)
               (help
                  "True if Space1 has noise in it, false otherwise."))
            (scout_song_noise_level
               int
               (read_only TRUE)
               (help
                  "The noise level affecting Scout's song.")))))
   (events_in
      (update_noise_state
         (help
            "Updates the Workshop noise state based on the player's progression."))))
(WorkshopStateCom
   (description
      "Exposes state properties to the Workshop.")
   (user_can_add TRUE)
   (editor
      (WorkshopStateCom
         (struct
            (returned_from_discovery
               bool
               (read_only TRUE)
               (help
                  "True if the workshop was just returned to from Discovery, false otherwise."))))))
(PostCampaignScreenCom
   (description
      "Exposes data displayed on the post-campaign screen.")
   (user_can_add TRUE)
   (editor
      (PostCampaignScreenCom
         (struct
            (total_magic_collected
               int
               (read_only TRUE)
               (help
                  "The total number of magic the player collected in the game."))
            (total_magic_available
               int
               (read_only TRUE)
               (help
                  "The total number of magic available in the game."))
            (total_platinum_songs
               int
               (read_only TRUE)
               (help
                  "The total number of songs the player achieved Platinum status on."))
            (total_songs
               int
               (read_only TRUE)
               (help
                  "The total number of songs on disc."))))))
(FluxStoryModeLauncherCom
   (description
      "Used to launch the game into story mode.")
   (user_can_add TRUE)
   (events_in
      (launch_story_mode
         (no_test)
         (help
            "Launches the game into story mode."))))
(QuickplayScreenCom
   (description
      "Runs the quickplay song select screen")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (song_list
         object
         (class UIList)
         (help
            "The main song list"))
      (refreshing_dlc
         bool
         (read_only TRUE)
         (help
            "Currently scanning the hard drive for DLC"))
      (refreshing_store
         bool
         (read_only TRUE)
         (help
            "Currently enumerating DLC from the marketplace"))
      (last_sort
         symbol
         (read_only TRUE)
         (help
            "The token for the last sort method"))
      (current_sort
         symbol
         (read_only TRUE)
         (help
            "The token for the current sort method"))
      (next_sort
         symbol
         (read_only TRUE)
         (help
            "The token for the next sort method"))
      (next_next_sort
         symbol
         (read_only TRUE)
         (help
            "The token for the next next sort method"))))
(QuickplaySongListItemCom
   (description
      "One per row of the song list")
   (user_can_add disk)
   (no_test serialize)
   (required_classes Entity)
   (editor
      (item_type
         int
         (list SONG_LIST_ITEM_TYPES)
         (help
            "Type for this row"))
      (item_sym
         symbol
         (help
            "Reference symbol for this row (e.g., a song symbol)"))
      (is_difficulty_header
         bool
         (read_only TRUE)
         (help
            "Is this a header for the difficulty sort?"))
      (is_stars_header
         bool
         (read_only TRUE)
         (help
            "Is this a header for the stars sort?"))
      (header_int_param
         int
         (read_only TRUE)
         (help
            "The int value for this header"))
      (title
         string
         (read_only TRUE)
         (help
            "Song title"))
      (artist
         string
         (read_only TRUE)
         (help
            "Song artist"))
      (difficulty
         int
         (read_only TRUE)
         (help
            "Song difficulty"))
      (locked
         bool
         (read_only TRUE)
         (help
            "Based on story progress, etc."))))
(QuickplaySongPreviewCom
   (description
      "Attached to a Flux song to give it the ability preview songs for quickplay.")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (QuickplaySongPreviewCom
         (struct
            (song_to_preview
               symbol
               (no_test)
               (help
                  "The name of the song to preview."))
            (mix_to_preview
               int
               (list FLUX_TARGET_MIXES)
               (no_test)
               (help
                  "The mix to preview."))
            (current_segment
               symbol
               (read_only TRUE)
               (help
                  "The name of the current playing Wwise music segment"))))))
(ContinuousQuickplayScreenCom
   (description
      "Attached to the continuous quickplay screen to allow it to choose and launch random songs.")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (ContinuousQuickplayScreenCom
         (struct
            (current_song
               symbol
               (read_only TRUE)
               (help
                  "The song that's currently queued for quickplay.")))))
   (events_in
      (skip_song
         (help
            "Skips the currently queued song and randomly selects another one."))
      (play_song
         (help
            "Plays the currently queued song."))))
(MixSelectionScreenCom
   (description
      "Runs the quickplay mix selection screen")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (active_song
         symbol
         (list
            {song_mgr get_song_list TRUE})
         (help
            "The song that has been chosen in quickplay"))
      (mix_list
         object
         (class UIList)
         (help
            "The main mix list"))
      (current_slot
         int
         (list FLUX_TARGET_SLOTS)
         (help
            "The current slot being prompted"))
      (num_slots_to_fill
         int
         (help
            "The number of slots the player needs to fill"))
      (refreshing_dlc
         bool
         (read_only TRUE)
         (help
            "Currently scanning the hard drive for DLC"))))
(PregameScreenCom
   (description
      "Runs the quickplay pregame screen")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (menu_list
         object
         (class UIList)
         (help
            "The main menu list"))))
(DiscoveryVideoScreenCom
   (description
      "Attached to the UI screen that plays Discovery scenes as Binks during the Yen Sid phase.")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (DiscoveryVideoScreenCom
         (struct
            (discovery_world
               symbol
               (read_only TRUE)
               (list $flux_worlds_with_null)
               (help
                  "The Discovery world that the screen represents."))
            (is_hat_piece_unlocked
               bool
               (read_only TRUE)
               (help
                  "True if the player has unlocked the world's hat piece, false otherwise.")))))
   (events_in
      (play_yen_sid_pulse_song
         (help
            "Plays the Yen Sid phase Pulse song of the Discovery world."))
      (complete_discovery_world
         (help
            "Marks the Discovery world as complete and exits it."))))
(MixPackScreenCom
   (description
      "Runs the mix pack purchase screen")
   (user_can_add TRUE)
   (required_classes UIScreen)
   (editor
      (mix_pack_list
         object
         (class UIList)
         (help
            "The main menu list"))
      (purchasing_dlc
         bool
         (help
            "Is the player currently making a purchase?"))
      (mix_info_objects
         (array
            object
            (class Object))
         (help
            "The mix info objects on the screen"))
      (refreshing_dlc
         bool
         (read_only TRUE)
         (help
            "Currently scanning the hard drive for DLC"))))
(GoBackSpeechCommandCom
   (description
      "Attached to focusables to automatically select them when the Xbox One 'Go Back' speech command is triggered.")
   (user_can_add TRUE)
   (required_classes Trans)
   (editor))