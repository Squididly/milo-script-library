#include flux_macros.dta
(Target
   (description
      "Target for gestural beatmatch")
   (superclasses Entity)
   (editor
      (target_type
         symbol
         (list
            {elem
               {find $syscfg targets descriptions}
               1})
         (help
            "Symbol from targets.dta for this target")
         (no_test))
      (tick
         int
         (help
            "Tick of play time the target occurs at")
         (no_test))
      (song_tick
         int
         (help
            "Tick of the original song time the target occurs at")
         (no_test))
      (ms
         float
         (help
            "Millisecond of the scond the target occurs at")
         (no_test))
      (duration_beats
         float
         (help
            "Duration of this target in beats")
         (no_test))
      (hand
         int
         (list FLUX_TARGET_HAND_TYPES)
         (help
            "What hand is used to hit the target?")
         (no_test))
      (shape
         symbol
         (list
            {elem
               {find $syscfg targets shapes}
               1})
         (help
            "Symbol from targets.dta for this target shape")
         (no_test))
      (is_push
         bool
         (read_only TRUE)
         (help
            "Is this target a z-push?"))
      (shape_turn
         float
         (no_test)
         (help
            "Degrees this shape is turned (first-swing-east-based, counter-clockwise)"))
      (line_shape
         int
         (list FLUX_TARGET_SHAPES)
         (no_test)
         (help
            "Shape of the destination line"))
      (hit
         bool
         (help
            "Has this target been hit?")
         (no_test))
      (passed
         bool
         (help
            "Has this target been passed without being hit?")
         (no_test))
      (suffix_hit
         bool
         (help
            "Has the suffix part of this target been hit?")
         (no_test))
      (suffix_passed
         bool
         (help
            "Has the suffix part of this target been passed without being hit?")
         (no_test))
      (progress
         float
         (help
            "How close is the user to hitting this target?")
         (no_test))
      (suffix_progress
         float
         (help
            "How close is the user to completing the suffix part of this target?")
         (no_test))
      (suffix_activity
         float
         (help
            "How fast is the user's hand moving during the suffix part of this target?")
         (no_test))
      (current_rating
         float
         (help
            "How well is the user currently executing this target (0-1)?")
         (no_test))
      (active
         bool
         (help
            "Is this target visible?")
         (no_test))
      (time_until_ready
         float
         (help
            "How many seconds until the target reaches the correct hit time?"))
      (beats_until_ready
         float
         (help
            "How many beats until the target reaches the correct hit time?"))
      (beats_until_done
         float
         (help
            "How many beats until the target reaches its end time?")
         (read_only TRUE))
      (amount_done
         float
         (help
            "0 at start, 1 at end")
         (read_only TRUE))
      (suffix
         int
         (list FLUX_TARGET_SUFFIXES)
         (no_test)
         (help
            "What kind of suffix (sustain/activity) does this target have?"))
      (optional
         bool
         (help
            "Is it optional to hit this Target?")
         (no_test))
      (reverse_edge
         bool
         (no_test)
         (help
            "Should the system pick the opposite direction (for bidirectional edges?"))
      (slot
         int
         (list FLUX_TARGET_SLOTS)
         (no_test)
         (help
            "which slot is this target from?"))
      (color_id
         int
         (list FLUX_TARGET_COLORS)
         (alias
            "color")
         (no_test)
         (help
            "Integer ID (starting from 0) for the hue of the TargetGoalCom."))
      (max_hand_speed
         float
         (no_test)
         (help
            "What's the fastest that the hand that hit this target has moved since the hit?"))
      (choice
         bool
         (no_test)
         (read_only TRUE)
         (help
            "Is this part of a choice gesture?"))
      (choice_part
         int
         (list FLUX_TARGET_PARTS_FULL)
         (no_test)
         (help
            "which part are we changing?"))
      (choice_slot
         int
         (list FLUX_TARGET_SLOTS_OPTIONAL)
         (no_test)
         (help
            "which slot does this choose?"))
      (num_choices
         int
         (no_test)
         (help
            "how many choices are in the choice gesture?"))
      (choice_target_enable
         bool
         (no_test)
         (help
            "Is this a choice-enabling z-push?"))
      (hidden
         bool
         (no_test)
         (help
            "Should this target be invisible (because it's an extra target for a choice gesture)?"))
      (enabled
         bool
         (no_test)
         (help
            "Is the target currently enabled?"))
      (phrase_position
         float
         (no_test)
         (help
            "Position in phrase (0-1, -1 if not in phrase)"))
      (phrase_siblings
         int
         (no_test)
         (help
            "number of targets at same time in phrase"))
      (suffix_pos_x
         float
         (no_test)
         (help
            "Hand position relative to start of sustain/activity - x value"))
      (suffix_pos_y
         float
         (no_test)
         (help
            "Hand position relative to start of sustain/activity - y value"))
      (player_disposition
         int
         (list FLUX_TARGET_PLAYER_DISPOSITIONS)
         (no_test)
         (help
            "Which player or players am I assigned to?")))
   (events_in)
   (events_out
      (segment_passed
         (editor
            (segment_ix
               int
               (help
                  "The segment index (starts at 0)"))))
      (segment_hit
         (editor
            (segment_ix
               int
               (help
                  "The segment index (starts at 0)"))))))
(SegmentPath
   (description
      "Series of segmented paths for gesture beatmatch")
   (superclasses Trans)
   (ext
      "segpath")
   (allowed_dirs UIScreen)
   (editor
      (auto_place
         bool
         (help
            "Automatically enforce placement - turn off for manual placement"))
      (beat_scale
         float
         (range 0.25 4)
         (help
            "allows you to scale the number of beats per segment. 1.0 = 1 beat per segment, 2.0 = 2 beats per segment, 0.5 = half a beat per section"))
      (entries
         (array
            (struct
               (shape
                  int
                  (list SEGMENTPATH_SHAPES)
                  (help
                     "shape to use")))))))
(SegmentPathSection
   (description
      "Section of a path segment")
   (superclasses Entity)
   (allowed_dirs)
   (editor
      (shape
         int
         (list SEGMENTPATH_SHAPES)
         (help
            "shape to use")
         (disk_prop))
      (color_id
         int
         (list FLUX_TARGET_COLORS)
         (disk_prop)
         (alias
            "color")
         (help
            "Integer ID (starting from 0) for the hue of the TargetGoalCom."))
      (color_anim
         object
         (class Anim)
         (disk_prop)
         (no_test)
         (help
            "PropAnim to set color"))
      (config_anim
         object
         (class Anim)
         (disk_prop)
         (help
            "PropAnim for shape configuration"))
      (next_trans
         object
         (class Trans)
         (disk_prop)
         (help
            "Trans to position next segment with"))
      (scoring_trans
         object
         (class Trans)
         (disk_prop)
         (help
            "Trans which sets scoring direction"))
      (hand_trans
         object
         (class Trans)
         (disk_prop)
         (help
            "Animated trans for the hand position"))
      (state
         int
         (list SEGMENTPATHSECTIONSTATES)
         (no_test)
         (help
            "current state of the section, set by game code"))
      (index
         int
         (no_test)
         (help
            "Current index in the segment path, set by game code"))
      (beat_scale
         float
         (range 0.25 4)
         (no_test)
         (help
            "Beat scale of segment path, set by game code"))
      (section_position
         float
         (read_only TRUE)
         (disk_prop)
         (no_test)
         (help
            "0 - 1 indicating where we are along the path")))
   (events_out
      (path_begin)
      (path_finished)))
(CarouselDataProvider
   (description
      "Provides data for CarouselSelector.")
   (superclasses Object)
   (user_creatable FALSE)
   (events_out
      (data_changed
         (help
            "Exported when the data set has changed."))))
(WorldSelectProvider
   (description
      "Provides data for World Select")
   (superclasses CarouselDataProvider Object)
   (user_creatable TRUE)
   (editor
      (tiles
         (array
            object
            (class Draw)
            (components
               (WorldSelectTileCom)))
         (help
            "The tiles to navigate between."))
      (tile_width
         float
         (range 1.0e-2 1000)
         (slider)
         (help
            "The width of each tile in world space."))
      (starting_tile
         int
         (range
            0
            {max
               {-
                  {size
                     [tiles]}
                  1}
               0})
         (slider)
         (help
            "The initial tile to center on the focal point."))))
(JournalProvider
   (description
      "Provides data for the Journal Viewer's CarouselSelector")
   (superclasses CarouselDataProvider Object)
   (user_creatable TRUE)
   (editor
      (entity_pool
         object
         (class EntityPool)
         (help
            "The pool of entities to draw from to represent quickplay songs."))
      (page_width
         float
         (range 1.0e-2 100)
         (slider)
         (help
            "The width of each song object in world space."))
      (unlocked_pages
         int
         (read_only TRUE)
         (help
            "The number of pages the player has unlocked."))
      (total_pages
         int
         (read_only TRUE)
         (help
            "The maximum number of pages that may be unlocked by the player."))))
(RayCasterBase
   (description
      "Base class for raycasting")
   (superclasses Poll)
   (allowed_dirs)
   (ext rcast)
   (editor
      (enabled
         bool
         (help
            "Should we be firing raycasts?"))
      (is_a
         bitfield
         (list
            {$physics rb_collision_is_a})
         (help
            "What collision flags does the ray have?"))
      (collides_with
         bitfield
         (list
            {$physics rb_collision_with})
         (help
            "What collision flags does the ray collide against?"))
      (min_distance
         float
         (help
            "What is the minimum distance from the camera an object must have to register as a hit?"))
      (max_distance
         float
         (help
            "What is the maximum distance from the camera an object can have to register as a hit?"))
      (raycast_closest
         bool
         (help
            "Do we only register a hit against the closest object to us, or all intersecting objects?"))
      (align_with_hit_trans
         object
         (class Trans)
         (hide
            {!
               [raycast_closest]})
         (help
            "An optional trans to position and align with hit position + normal"))
      (out_rigidbody
         object
         (class RigidBody)
         (help
            "What rigidbody has the ray struck?")
         (read_only TRUE)
         (hide
            {==
               [raycast_closest]
               FALSE}))
      (out_entity
         object
         (class Entity)
         (help
            "What entity has the ray struck?")
         (read_only TRUE)
         (hide
            {==
               [raycast_closest]
               FALSE}))
      (out_collision_point
         VECTOR3
         (help
            "Where, in world space, did the ray strike?")
         (read_only TRUE)
         (hide
            {==
               [raycast_closest]
               FALSE}))
      (out_material
         symbol
         (list PHYSICS_MATERIAL)
         (help
            "What type of material are we hitting?")
         (read_only TRUE)
         (hide
            {==
               [raycast_closest]
               FALSE}))
      (out_normal
         VECTOR3
         (help
            "What is the collision normal in world space?")
         (read_only TRUE)
         (hide
            {==
               [raycast_closest]
               FALSE}))
      (out_depth_dist
         float
         (help
            "How far away was the last collision?")
         (read_only TRUE)
         (hide
            {==
               [raycast_closest]
               FALSE}))))
(CameraRayCast
   (description
      "Detects the closest rigidbody (with appropriate flags) to the camera at given camera coordinates")
   (superclasses RayCasterBase)
   (allowed_dirs Entity Scene)
   (ext rcast)
   (editor
      (target_type
         int
         (list FLUX_CAMERA_RAY_TARGET_TYPES)
         (help
            "How should the target we raycast through be specified?"))
      (target_screen_coords
         VECTOR2
         (help
            "What are the normalized screen coordinates where we should cast? 0,0 is upper left.")
         (hide
            {!=
               [target_type]
               kCameraRayTarget_ScreenCoords}))
      (target_trans
         object
         (class Trans)
         (help
            "What trans object should I cast through?")
         (hide
            {!=
               [target_type]
               kCameraRayTarget_Trans}))
      (screen_velocity
         VECTOR2
         (help
            "How fast is the cursor moving in screen space?")
         (no_test))
      (screen_speed
         float
         (help
            "How fast is the cursor moving in screen space?")
         (no_test))
      (screen_angle
         float
         (help
            "In which direction is the cursor moving in screen space (degrees CW from +x, [-180,180))")
         (no_test))
      (max_subsample_distance
         float
         (help
            "What is the maximum spacing in screenspace between subsamples? Negative if no subsampling"))
      (max_num_subsamples
         int
         (help
            "What is the maximum number of subsamples we're allowed?  Negative if unbound."))))
(TransRayCaster
   (description
      "Detects the closest rigidbody (with appropriate flags) to the camera at given camera coordinates")
   (superclasses RayCasterBase)
   (allowed_dirs Entity Scene)
   (ext rcast)
   (editor
      (source_type
         int
         (list FLUX_TRANS_RAY_SOURCE_TYPES)
         (help
            "How are we specifying our ray source?"))
      (target_type
         int
         (list FLUX_TRANS_RAY_TARGET_TYPES)
         (help
            "How are we specifying our ray direction"))
      (source_trans
         object
         (class Trans)
         (help
            "What trans object should I cast from?")
         (hide
            {!=
               [source_type]
               kTransRaySource_Trans}))
      (source_point
         VECTOR3
         (help
            "From which point should we fire?")
         (hide
            {!=
               [source_type]
               kTransRaySource_Point}))
      (source_use_world
         bool
         (help
            "Is our supplied source vector in world coordinates?")
         (hide
            {!=
               [source_type]
               kTransRaySource_Point}))
      (target_trans
         object
         (class Trans)
         (help
            "What trans object should I cast through?")
         (hide
            {!=
               [target_type]
               kTransRayTarget_Trans}))
      (target_direction
         VECTOR3
         (help
            "In which (world space) direction do we fire?")
         (hide
            {!=
               [target_type]
               kTransRayTarget_Direction}))
      (target_point
         VECTOR3
         (help
            "To which point should we fire?")
         (hide
            {!=
               [target_type]
               kTransRayTarget_Point}))
      (target_use_world
         bool
         (help
            "Is our supplied target vector in world coordinates?")
         (hide
            {&&
               {!=
                  [target_type]
                  kTransRayTarget_Point}
               {!=
                  [target_type]
                  kTransRayTarget_Direction}}))))
(MidiPlayer
   (description
      "Dispatches non-Song Midi events to MidiInstruments")
   (superclasses Poll)
   (allowed_dirs RndDir)
   (ext player)
   (editor
      (melody_instruments
         (array
            object
            (class MidiInstrument))
         (help
            "Melody instruments"))
      (backing_instruments
         (array
            object
            (class MidiInstrument))
         (help
            "Backing instruments"))
      (bass_instruments
         (array
            object
            (class MidiInstrument))
         (help
            "Bass instruments"))
      (percussion_instruments
         (array
            object
            (class MidiInstrument))
         (help
            "Percussion instruments"))))
(MidiWatcher
   (description
      "This object provides MIDI events for Flow.")
   (superclasses Poll)
   (allowed_dirs Entity Scene UIScreen)
   (ext mwtch)
   (editor
      (song
         object
         (class Song)
         (help
            "What song do we get MIDI from? (if no sound is set)"))
      (sound
         object
         (class Sound)
         (help
            "What sound do we get MIDI from? (if no song is set)"))
      (track_name
         string
         (help
            "The name of the track this object listens to.")
         (no_test))
      (note_range_low
         int
         (help
            "MIDI notes below this are ignored.")
         (range 0 127))
      (note_range_high
         int
         (help
            "MIDI notes above this are ignored.")
         (range 0 127))
      (beat_modulus
         int
         (help
            "If non-zero, time is modulus this number of beats. Used to wrap around a MIDI track."))
      (beat_offset
         int
         (help
            "Number of beats into the MIDI file to start watching. Applied after the modulus, if any."))
      (preroll_ms
         float
         (help
            "How many ms. before a MIDI event is the event actually fired. Used for lining up samples."))
      (midi_inst
         object
         (class MidiInstrument)
         (help
            "A midi instrument to drive using events coming in on this track."))
      (midi_note_000
         bool
         (no_test))
      (midi_note_001
         bool
         (no_test))
      (midi_note_002
         bool
         (no_test))
      (midi_note_003
         bool
         (no_test))
      (midi_note_004
         bool
         (no_test))
      (midi_note_005
         bool
         (no_test))
      (midi_note_006
         bool
         (no_test))
      (midi_note_007
         bool
         (no_test))
      (midi_note_008
         bool
         (no_test))
      (midi_note_009
         bool
         (no_test))
      (midi_note_010
         bool
         (no_test))
      (midi_note_011
         bool
         (no_test))
      (midi_note_012
         bool
         (no_test))
      (midi_note_013
         bool
         (no_test))
      (midi_note_014
         bool
         (no_test))
      (midi_note_015
         bool
         (no_test))
      (midi_note_016
         bool
         (no_test))
      (midi_note_017
         bool
         (no_test))
      (midi_note_018
         bool
         (no_test))
      (midi_note_019
         bool
         (no_test))
      (midi_note_020
         bool
         (no_test))
      (midi_note_021
         bool
         (no_test))
      (midi_note_022
         bool
         (no_test))
      (midi_note_023
         bool
         (no_test))
      (midi_note_024
         bool
         (no_test))
      (midi_note_025
         bool
         (no_test))
      (midi_note_026
         bool
         (no_test))
      (midi_note_027
         bool
         (no_test))
      (midi_note_028
         bool
         (no_test))
      (midi_note_029
         bool
         (no_test))
      (midi_note_030
         bool
         (no_test))
      (midi_note_031
         bool
         (no_test))
      (midi_note_032
         bool
         (no_test))
      (midi_note_033
         bool
         (no_test))
      (midi_note_034
         bool
         (no_test))
      (midi_note_035
         bool
         (no_test))
      (midi_note_036
         bool
         (no_test))
      (midi_note_037
         bool
         (no_test))
      (midi_note_038
         bool
         (no_test))
      (midi_note_039
         bool
         (no_test))
      (midi_note_040
         bool
         (no_test))
      (midi_note_041
         bool
         (no_test))
      (midi_note_042
         bool
         (no_test))
      (midi_note_043
         bool
         (no_test))
      (midi_note_044
         bool
         (no_test))
      (midi_note_045
         bool
         (no_test))
      (midi_note_046
         bool
         (no_test))
      (midi_note_047
         bool
         (no_test))
      (midi_note_048
         bool
         (no_test))
      (midi_note_049
         bool
         (no_test))
      (midi_note_050
         bool
         (no_test))
      (midi_note_051
         bool
         (no_test))
      (midi_note_052
         bool
         (no_test))
      (midi_note_053
         bool
         (no_test))
      (midi_note_054
         bool
         (no_test))
      (midi_note_055
         bool
         (no_test))
      (midi_note_056
         bool
         (no_test))
      (midi_note_057
         bool
         (no_test))
      (midi_note_058
         bool
         (no_test))
      (midi_note_059
         bool
         (no_test))
      (midi_note_060
         bool
         (no_test))
      (midi_note_061
         bool
         (no_test))
      (midi_note_062
         bool
         (no_test))
      (midi_note_063
         bool
         (no_test))
      (midi_note_064
         bool
         (no_test))
      (midi_note_065
         bool
         (no_test))
      (midi_note_066
         bool
         (no_test))
      (midi_note_067
         bool
         (no_test))
      (midi_note_068
         bool
         (no_test))
      (midi_note_069
         bool
         (no_test))
      (midi_note_070
         bool
         (no_test))
      (midi_note_071
         bool
         (no_test))
      (midi_note_072
         bool
         (no_test))
      (midi_note_073
         bool
         (no_test))
      (midi_note_074
         bool
         (no_test))
      (midi_note_075
         bool
         (no_test))
      (midi_note_076
         bool
         (no_test))
      (midi_note_077
         bool
         (no_test))
      (midi_note_078
         bool
         (no_test))
      (midi_note_079
         bool
         (no_test))
      (midi_note_080
         bool
         (no_test))
      (midi_note_081
         bool
         (no_test))
      (midi_note_082
         bool
         (no_test))
      (midi_note_083
         bool
         (no_test))
      (midi_note_084
         bool
         (no_test))
      (midi_note_085
         bool
         (no_test))
      (midi_note_086
         bool
         (no_test))
      (midi_note_087
         bool
         (no_test))
      (midi_note_088
         bool
         (no_test))
      (midi_note_089
         bool
         (no_test))
      (midi_note_090
         bool
         (no_test))
      (midi_note_091
         bool
         (no_test))
      (midi_note_092
         bool
         (no_test))
      (midi_note_093
         bool
         (no_test))
      (midi_note_094
         bool
         (no_test))
      (midi_note_095
         bool
         (no_test))
      (midi_note_096
         bool
         (no_test))
      (midi_note_097
         bool
         (no_test))
      (midi_note_098
         bool
         (no_test))
      (midi_note_099
         bool
         (no_test))
      (midi_note_100
         bool
         (no_test))
      (midi_note_101
         bool
         (no_test))
      (midi_note_102
         bool
         (no_test))
      (midi_note_103
         bool
         (no_test))
      (midi_note_104
         bool
         (no_test))
      (midi_note_105
         bool
         (no_test))
      (midi_note_106
         bool
         (no_test))
      (midi_note_107
         bool
         (no_test))
      (midi_note_108
         bool
         (no_test))
      (midi_note_109
         bool
         (no_test))
      (midi_note_110
         bool
         (no_test))
      (midi_note_111
         bool
         (no_test))
      (midi_note_112
         bool
         (no_test))
      (midi_note_113
         bool
         (no_test))
      (midi_note_114
         bool
         (no_test))
      (midi_note_115
         bool
         (no_test))
      (midi_note_116
         bool
         (no_test))
      (midi_note_117
         bool
         (no_test))
      (midi_note_118
         bool
         (no_test))
      (midi_note_119
         bool
         (no_test))
      (midi_note_120
         bool
         (no_test))
      (midi_note_121
         bool
         (no_test))
      (midi_note_122
         bool
         (no_test))
      (midi_note_123
         bool
         (no_test))
      (midi_note_124
         bool
         (no_test))
      (midi_note_125
         bool
         (no_test))
      (midi_note_126
         bool
         (no_test))
      (midi_note_127
         bool
         (no_test)))
   (events_out
      (midi_note_on
         (editor
            (midi_note_on_note
               int
               (help
                  "[0,127]. The MIDI note number."))
            (midi_note_on_velocity
               int
               (help
                  "[0,127]. The velocity of the note on event."))
            (midi_note_duration
               int
               (help
                  "How long is this note on (ticks).")))
         (midi_note_on_note 0)
         (midi_note_on_velocity 0)
         (midi_note_duration 0))
      (midi_note_off
         (editor
            (midi_note_off_note
               int
               (help
                  "[0,127]. The MIDI note number.")))
         (midi_note_off_note 0))))
(BeatTimingWindow
   (description
      "Represent a timing window around a particular beat subdivision, and and outputs whether we're in the timing window and any other useful info Flows might want.")
   (allowed_dirs Entity Scene)
   (ext wnd)
   (editor
      (Inputs
         (indent
            (required_subdiv
               int
               (list FLUX_BEAT_SUBDIV_TYPES)
               (alias 'Center Window On')
               (help
                  "The subdivision of the beat our timing window is centered on"))
            (window_width_ms
               float
               (alias 'Window Width (ms)')
               (help
                  "Size of timing window, in millseconds. Half of this time before the point we're centered on, and half after."))
            (latency_ms
               float
               (alias 'Input Latency (ms)')
               (help
                  "Window is offset by this amount (in milliseconds), to compensate for latency"))))
      (Outputs
         (indent
            (LatencyCompensated
               (indent
                  (in_window
                     bool
                     (no_test)
                     (help
                        "are we currently within the timing window?"))))
            (RealTime
               (indent
                  (lead_in
                     float
                     (no_test)
                     (help
                        "This goes from 0 to 1 as we approach the center of the timing window, not compensating for latency.  So tie visual FX to this"))))))
      (global_av_lag
         float
         (no_test)
         (tab debug)
         (help
            "Globally change AV lag offset, not serialized")))
   (events_out
      (on_enter_window
         (help
            "Called when crossing into beginning of timing window ('in_window' going from false to true')"))
      (on_exit_window
         (help
            "Called when crossing into beginning of timing window ('in_window' going from true to false')"))
      (on_pulse
         (help
            "Called when crossing through center of window, without latency compensation. So visual FX which are tied to the actual beat might hang off of this."))))
(SaveLoadMgr
   (description
      "Manages all game persistence.")
   (functest no_test singleton)
   (user_creatable FALSE)
   (editor
      (autosave_enabled
         bool
         (help
            "Enable or disable autosaving."))
      (is_saving
         bool
         (read_only TRUE)
         (help
            "Is this system currently writing save data to storage?")))
   (events_in
      (save
         (editor
            (force
               bool
               (help
                  "Whether or not to override the autosave_enabled property of SaveLoadMgr for this save.")))
         (help
            "Call to schedule a save for active profile.  save_start/end will be exported with status."))
      (autoload
         (help
            "Search all devices for a save file to load."))
      (load
         (help
            "Call to schedule a load for active profile.  load_start/end will be exported with status."))
      (choose_device
         (help
            "Call to prompt the user to select a device for the SaveLoadMgr to use.  choosedevice_start/end will be exported with status."))
      (delete_save
         (help
            "Deletes all saves for the active profile on the selected device."))
      (save_options
         (help
            "Call to schedule a save of the system options.  saveopt_start/end will be exported with status."))
      (autoload_options
         (help
            "Call to schedule a load of the system options.  saveopt_start/end will be exported with status."))
      (load_options_by_prompt
         (help
            "Prompts user for a device and attempts to load options from it."))
      (delete_options
         (help
            "Call to schedule a delete of the system options file.  No feedback for this."))
      (save_newdevice
         (help
            "Allows the user to save to a new device, prompting them for the device to save to, exporting confirm_overwrite if a save exists."))
      (confirm_save_newdevice
         (help
            "Confirms the overwrite action from a previous save_newdevice call."))
      (dump_files
         (help
            "Dumps the saved files for the active user to the spew stream."))
      (save_snapshot
         (editor
            (name
               string
               (help
                  "The name of the snapshot to save.")))
         (help
            "Save a profile snapshot to Holmes or the console (package builds)."))
      (load_snapshot
         (editor
            (name
               string
               (help
                  "The name of the snapshot to load.")))
         (help
            "Load a profile snapshot from Holmes or the console (package builds)."))
      (list_snapshots
         (help
            "Prints a list of saved snapshots to the console.")))
   (events_out
      (save_start)
      (save_end
         (editor
            (save_error
               int
               (list SAVELOAD_ERRORS))))
      (load_start)
      (load_end
         (editor
            (load_error
               int
               (list SAVELOAD_ERRORS))))
      (choosedevice_start)
      (choosedevice_end
         (editor
            (choosedevice_error
               int
               (list SAVELOAD_ERRORS))))
      (delete_start)
      (delete_end
         (editor
            (delete_error
               int
               (list SAVELOAD_ERRORS))))
      (saveopt_start)
      (saveopt_end
         (editor
            (saveopt_error
               int
               (list SAVELOAD_ERRORS))))
      (loadopt_start)
      (loadopt_end
         (editor
            (loadopt_error
               int
               (list SAVELOAD_ERRORS))))))
(SkeletonIdentifier
   (description
      "Manages NUI Automatic Skeleton Identification.")
   (functest no_test singleton)
   (user_creatable FALSE)
   (editor
      (active_skeleton_name
         string
         (read_only TRUE)
         (help
            "The name of the active skeleton, if associated with a profile.")))
   (events_in
      (indicate_intent_to_play
         (help
            "Triggers sign in and indentification of skeleton.")
         (editor
            (tracking_id
               int
               (help
                  "Skeleton tracking ID"))))
      (manual_signin
         (help
            "Trigger manual sign in via platform-specific means.")
         (editor
            (tracking_id
               int
               (help
                  "Skeleton tracking ID")))))
   (events_out
      (ready_to_play
         (help
            "Signals that a player is identified and signed in.")
         (editor
            (user_idx
               int
               (help
                  "The user index of the player."))))
      (not_ready
         (help
            "User canceled sign in dialog."))))
(StageKitInterface
   (description
      "You know what this is")
   (allowed_dirs)
   (editor
      (fog_on
         bool
         (no_test serialize copy)
         (help
            "turn fog on/off"))
      (strobe_freq
         int
         (list
            ("kStageStrobeOff"
               "kStageStrobe6"
               "kStageStrobe8"
               "kStageStrobe10"
               "kStageStrobe12"))
         (no_test serialize copy)
         (help
            "strobe settings"))
      (blue_leds
         (indent
            (blue_led0
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (blue_led1
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (blue_led2
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (blue_led3
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (blue_led4
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (blue_led5
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (blue_led6
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (blue_led7
               bool
               (no_test serialize copy)
               (help
                  "led on/off")))
         (help
            "inner blue ring"))
      (green_leds
         (indent
            (green_led0
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (green_led1
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (green_led2
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (green_led3
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (green_led4
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (green_led5
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (green_led6
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (green_led7
               bool
               (no_test serialize copy)
               (help
                  "led on/off")))
         (help
            "green ring"))
      (yellow_leds
         (indent
            (yellow_led0
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (yellow_led1
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (yellow_led2
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (yellow_led3
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (yellow_led4
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (yellow_led5
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (yellow_led6
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (yellow_led7
               bool
               (no_test serialize copy)
               (help
                  "led on/off")))
         (help
            "yellow ring"))
      (red_leds
         (indent
            (red_led0
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (red_led1
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (red_led2
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (red_led3
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (red_led4
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (red_led5
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (red_led6
               bool
               (no_test serialize copy)
               (help
                  "led on/off"))
            (red_led7
               bool
               (no_test serialize copy)
               (help
                  "led on/off")))
         (help
            "outer red ring"))))
(DepthBuffer3D
   (description
      "Render the Kinect depth buffer as a 3D mesh")
   (superclasses Draw Trans)
   (ext db3d)
   (editor
      (nobody_color
         color
         (help
            "Color for non-player pixels (i.e. the background)")
         (no_test))
      (nobody_alpha
         float
         (help
            "Alpha for non-player pixels")
         (no_test))
      (stretch_near_camera
         float
         (range 0 10)
         (help
            "Stretch the depth buffer along an exponential curve.\n1 is the default; values greater than 1 mean more distortion for objects closer to the Kinect camera.")
         (no_test))))
(CameraOverlay
   (description
      "Object to coordinate the camera/skeleton overlay")
   (superclasses Draw)
   (allowed_dirs UIScreen)
   (editor
      (overlay_state
         int
         (list FLUX_OVERLAY_STATES)))
   (events_in
      (rotate_state)))
(DiscoveryCursorRayCaster
   (description
      "Raycasts through the cursor and finds the near and far collision surfaces")
   (superclasses Object)
   (allowed_dirs Entity)
   (ext rcast)
   (editor
      (cursor_trans
         object
         (class Trans)
         (help
            "The cursor object through which we're raycasting"))
      (near_distance
         float
         (help
            "How far from the camera is the near surface (not projected distance)")
         (no_test)
         (read_only TRUE))
      (far_distance
         float
         (help
            "How far from the camera is the far surface (not projected distance)")
         (no_test)
         (read_only TRUE))
      (wall_distance
         float
         (help
            "How far do we allow the cursor to track?")
         (no_test)
         (read_only TRUE))
      (enabled
         bool
         (help
            "Should we be firing raycasts?"))
      (is_a
         bitfield
         (list
            {$physics rb_collision_is_a})
         (help
            "What collision flags does the ray have?"))
      (collides_with
         bitfield
         (list
            {$physics rb_collision_with})
         (help
            "What collision flags does the ray collide against?"))
      (min_distance
         float
         (help
            "What is the minimum distance from the camera an object must have to register as a hit?"))
      (max_distance
         float
         (help
            "What is the maximum distance from the camera an object can have to register as a hit?"))))
(DiscoveryCamManager
   (description
      "Component that manages a Discovery scene's camera graph")
   (allowed_dirs Scene)
   (category Camera)
   (ext camman)
   (editor
      (dcmc_nodes
         (array
            (struct
               (node_name
                  string
                  (help
                     "The name used to identify this node"))
               (use_ui_seconds
                  bool
                  (help
                     "Should this node use UI Seconds?  Generally this is for Conductor/Pause nodes only."))
               (cam
                  object
                  (class CameraNode)
                  (help
                     "The camera object associated with this node"))
               (parent_name
                  symbol
                  (list
                     {$this
                        get_node_names
                        {$this
                           get
                           {editor_prop_path_sibling node_name}}})
                  (help
                     "What is this node's parent?  ie. Where do you go when you zoom out?  Null for back planes"))
               (can_player_zoom_out
                  bool
                  (help
                     "True if the player can zoom out of this node with the zoom out gesture, false if only gameplay logic can trigger a zoom out."))
               (set_node
                  script
                  (alias
                     "Jump To Node")
                  (help
                     "Warps the camera to this node")
                  (script
                     {$this
                        set_current_node
                        {$this
                           get
                           {editor_prop_path_sibling node_name}}})
                  (custom_history))
               (zoom_node
                  script
                  (alias
                     "Ease To Node")
                  (help
                     "Zooms the camera to this node")
                  (no_test)
                  (script
                     {$this
                        zoom_in
                        {$this
                           get
                           {editor_prop_path_sibling node_name}}})
                  (custom_history))
               (zoom_out
                  script
                  (alias
                     "Zoom Out")
                  (help
                     "Zooms out if we can from our current node")
                  (script
                     {$this zoom_out})
                  (custom_history))
               (engagable
                  object
                  (class Object)
                  (help
                     "Engagable object"))
               ('Camera Dynamics'
                  (indent
                     (blend_in_time
                        float
                        (help
                           "How long does it take to zoom into/zoom out of this node?")
                        (range 0 10000))
                     (use_playspace_position
                        bool
                        (help
                           "Is this camera scrubbed by playspace position?"))
                     (remap_playspace_frames
                        bool
                        (help
                           "Are we remapping the frames we use when applying playspace?"))
                     (min_frame
                        float
                        (help
                           "If we remap camera frames, which frame are we at when all the way left?"))
                     (max_frame
                        float
                        (help
                           "If we remap camera frames, which frame are we at when all the way right?"))))
               ('Custom Transition'
                  (indent
                     (zoom_camera
                        object
                        (class PropAnim)
                        (help
                           "Custom transition camera when zooming into of this node.  If no zoom out camera, this plays in reverse when zooming out, too."))
                     (zoom_out_camera
                        object
                        (class PropAnim)
                        (help
                           "Custom transition camera when zooming out of this node"))
                     (special_zoom_out_camera
                        object
                        (class PropAnim)
                        (help
                           "Special camera transition used when use_special_zoom_out_camera is true"))
                     (ramp_in_time
                        float
                        (help
                           "How long does it take to blend into this cutscene (secs)?")
                        (range 0 10000))
                     (ramp_out_time
                        float
                        (help
                           "How long does it take to blend out of this cutscene (secs)?")
                        (range 0 10000))
                     (anim_delay
                        float
                        (help
                           "After we've started blending into the first frame of the animation, how long do we wait before playing the animation?")
                        (range 0 10000))
                     (ramp_out_offset
                        float
                        (help
                           "After the animation has finished, how much time do you expect to elapse before the animation is done blending out?"
                           (range 0 10000)))))
               (static_create_child_node
                  script
                  (script
                     {do
                        ($node_name
                           "")
                        ($ui_name
                           "")
                        ($cam_name
                           "")
                        ($new_index 0)
                        ($current_index 0)
                        ($new_cam '')
                        ($node_ui '')
                        {set
                           $node_name
                           {forge
                              text_input_dialog
                              "Node Name"
                              "Name of the new node"
                              "OK"
                              ""}}
                        {set
                           $ui_name
                           ""}
                        {strcat
                           $ui_name
                           $node_name
                           "_ui"}
                        {set
                           $ui_name
                           {forge
                              text_input_dialog
                              "UI Name"
                              "Name of the node's UI"
                              "OK"
                              $ui_name}}
                        {set
                           $cam_name
                           ""}
                        {strcat
                           $cam_name
                           $node_name
                           ".staticcam"}
                        {set
                           $cam_name
                           {forge
                              text_input_dialog
                              "Camera Name"
                              "Name of the node's camera"
                              "OK"
                              $cam_name}}
                        {set
                           $new_index
                           {$this
                              size
                              (dcmc_nodes)}}
                        {set
                           $current_index
                           {elem $editor_prop_path 1}}
                        {$this
                           insert
                           (dcmc_nodes $new_index)}
                        {$this
                           set
                           (dcmc_nodes $new_index parent_name)
                           {symbol
                              {$this
                                 get
                                 (dcmc_nodes $current_index node_name)}}}
                        {$this
                           set
                           (dcmc_nodes $new_index node_name)
                           $node_name}
                        {set
                           $new_cam
                           {forge add_object_to_active_dir_by_class StaticCamera $cam_name}}
                        {set
                           $node_ui
                           {forge
                              add_entity_to_active_dir
                              "worlds/shared/entities/discovery_zoom_in_ui_manip.entity"
                              $ui_name}}
                        {$this
                           set
                           (dcmc_nodes $new_index cam)
                           $new_cam}
                        {$this
                           set
                           (dcmc_nodes $new_index engagable)
                           $node_ui}
                        {$node_ui
                           set
                           (trans_parent)
                           $new_cam}})
                  (no_test))
               (static_create_child_portal_node
                  script
                  (script
                     {do
                        ($node_name
                           "")
                        ($ui_name
                           "")
                        ($cam_name
                           "")
                        ($portal_name
                           "")
                        ($new_index 0)
                        ($current_index 0)
                        ($new_cam '')
                        ($node_ui '')
                        ($portal '')
                        {set
                           $node_name
                           {forge
                              text_input_dialog
                              "Node Name"
                              "Name of the new node"
                              "OK"
                              ""}}
                        {set
                           $ui_name
                           ""}
                        {strcat
                           $ui_name
                           $node_name
                           "_ui"}
                        {set
                           $ui_name
                           {forge
                              text_input_dialog
                              "UI Name"
                              "Name of the node's UI"
                              "OK"
                              $ui_name}}
                        {set
                           $cam_name
                           ""}
                        {strcat
                           $cam_name
                           $node_name
                           ".staticcam"}
                        {set
                           $cam_name
                           {forge
                              text_input_dialog
                              "Camera Name"
                              "Name of the node's camera"
                              "OK"
                              $cam_name}}
                        {set
                           $portal_name
                           ""}
                        {strcat
                           $portal_name
                           $node_name
                           "_portal"}
                        {set
                           $portal_name
                           {forge
                              text_input_dialog
                              "Portal Name"
                              "Name of the node's portal"
                              "OK"
                              $portal_name}}
                        {set
                           $new_index
                           {$this
                              size
                              (dcmc_nodes)}}
                        {set
                           $current_index
                           {elem $editor_prop_path 1}}
                        {$this
                           insert
                           (dcmc_nodes $new_index)}
                        {$this
                           set
                           (dcmc_nodes $new_index parent_name)
                           {symbol
                              {$this
                                 get
                                 (dcmc_nodes $current_index node_name)}}}
                        {$this
                           set
                           (dcmc_nodes $new_index node_name)
                           $node_name}
                        {set
                           $new_cam
                           {forge add_object_to_active_dir_by_class StaticCamera $cam_name}}
                        {set
                           $node_ui
                           {forge
                              add_entity_to_active_dir
                              "worlds/shared/entities/discovery_portal_zoom_ui.entity"
                              $ui_name}}
                        {$this
                           set
                           (dcmc_nodes $new_index cam)
                           $new_cam}
                        {$this
                           set
                           (dcmc_nodes $new_index engagable)
                           $node_ui}
                        {set
                           $portal
                           {forge
                              add_entity_to_active_dir
                              "worlds/shared/entities/performance_portal.entity"
                              $portal_name}}
                        {$node_ui
                           set
                           (trans_parent)
                           $new_cam}
                        {$portal
                           set
                           (trans_parent)
                           $new_cam}})
                  (no_test))
               (path_create_child_node
                  script
                  (script
                     {do
                        ($node_name
                           "")
                        ($ui_name
                           "")
                        ($cam_name
                           "")
                        ($trans_name
                           "")
                        ($new_index 0)
                        ($current_index 0)
                        ($new_cam '')
                        ($node_ui '')
                        ($new_trans '')
                        {set
                           $node_name
                           {forge
                              text_input_dialog
                              "Node Name"
                              "Name of the new node"
                              "OK"
                              ""}}
                        {set
                           $ui_name
                           ""}
                        {strcat
                           $ui_name
                           $node_name
                           "_ui"}
                        {set
                           $ui_name
                           {forge
                              text_input_dialog
                              "UI Name"
                              "Name of the node's UI"
                              "OK"
                              $ui_name}}
                        {set
                           $cam_name
                           ""}
                        {strcat
                           $cam_name
                           $node_name
                           ".pathcam"}
                        {set
                           $cam_name
                           {forge
                              text_input_dialog
                              "Camera Name"
                              "Name of the node's camera"
                              "OK"
                              $cam_name}}
                        {set
                           $trans_name
                           ""}
                        {strcat
                           $trans_name
                           $node_name
                           ".trans"}
                        {set
                           $trans_name
                           {forge
                              text_input_dialog
                              "Trans Name"
                              "Name of the trans parent"
                              "OK"
                              $trans_name}}
                        {set
                           $new_index
                           {$this
                              size
                              (dcmc_nodes)}}
                        {set
                           $current_index
                           {elem $editor_prop_path 1}}
                        {$this
                           insert
                           (dcmc_nodes $new_index)}
                        {$this
                           set
                           (dcmc_nodes $new_index parent_name)
                           {symbol
                              {$this
                                 get
                                 (dcmc_nodes $current_index node_name)}}}
                        {$this
                           set
                           (dcmc_nodes $new_index node_name)
                           $node_name}
                        {set
                           $new_cam
                           {forge add_object_to_active_dir_by_class PathCamera $cam_name}}
                        {set
                           $node_ui
                           {forge
                              add_entity_to_active_dir
                              "worlds/shared/entities/discovery_zoom_in_ui_manip.entity"
                              $ui_name}}
                        {$this
                           set
                           (dcmc_nodes $new_index cam)
                           $new_cam}
                        {$this
                           set
                           (dcmc_nodes $new_index engagable)
                           $node_ui}
                        {set
                           $new_trans
                           {forge add_object_to_active_dir_by_class Trans $trans_name}}
                        {$node_ui
                           set
                           (trans_parent)
                           $new_trans}
                        {$new_cam
                           set
                           (trans_parent)
                           $new_trans}})
                  (no_test))
               (path_create_child_portal_node
                  script
                  (script
                     {do
                        ($node_name
                           "")
                        ($ui_name
                           "")
                        ($cam_name
                           "")
                        ($trans_name
                           "")
                        ($portal_name
                           "")
                        ($new_index 0)
                        ($current_index 0)
                        ($new_cam '')
                        ($node_ui '')
                        ($new_trans '')
                        ($portal '')
                        {set
                           $node_name
                           {forge
                              text_input_dialog
                              "Node Name"
                              "Name of the new node"
                              "OK"
                              ""}}
                        {set
                           $ui_name
                           ""}
                        {strcat
                           $ui_name
                           $node_name
                           "_ui"}
                        {set
                           $ui_name
                           {forge
                              text_input_dialog
                              "UI Name"
                              "Name of the node's UI"
                              "OK"
                              $ui_name}}
                        {set
                           $cam_name
                           ""}
                        {strcat
                           $cam_name
                           $node_name
                           ".pathcam"}
                        {set
                           $cam_name
                           {forge
                              text_input_dialog
                              "Camera Name"
                              "Name of the node's camera"
                              "OK"
                              $cam_name}}
                        {set
                           $portal_name
                           ""}
                        {strcat
                           $portal_name
                           $node_name
                           "_portal"}
                        {set
                           $portal_name
                           {forge
                              text_input_dialog
                              "Portal Name"
                              "Name of the node's portal"
                              "OK"
                              $portal_name}}
                        {set
                           $trans_name
                           ""}
                        {strcat
                           $trans_name
                           $node_name
                           ".trans"}
                        {set
                           $trans_name
                           {forge
                              text_input_dialog
                              "Trans Name"
                              "Name of the trans parent"
                              "OK"
                              $trans_name}}
                        {set
                           $new_index
                           {$this
                              size
                              (dcmc_nodes)}}
                        {set
                           $current_index
                           {elem $editor_prop_path 1}}
                        {$this
                           insert
                           (dcmc_nodes $new_index)}
                        {$this
                           set
                           (dcmc_nodes $new_index parent_name)
                           {symbol
                              {$this
                                 get
                                 (dcmc_nodes $current_index node_name)}}}
                        {$this
                           set
                           (dcmc_nodes $new_index node_name)
                           $node_name}
                        {set
                           $new_cam
                           {forge add_object_to_active_dir_by_class PathCamera $cam_name}}
                        {set
                           $node_ui
                           {forge
                              add_entity_to_active_dir
                              "worlds/shared/entities/discovery_portal_zoom_ui.entity"
                              $ui_name}}
                        {$this
                           set
                           (dcmc_nodes $new_index cam)
                           $new_cam}
                        {$this
                           set
                           (dcmc_nodes $new_index engagable)
                           $node_ui}
                        {set
                           $portal
                           {forge
                              add_entity_to_active_dir
                              "worlds/shared/entities/performance_portal.entity"
                              $portal_name}}
                        {set
                           $new_trans
                           {forge add_object_to_active_dir_by_class Trans $trans_name}}
                        {$node_ui
                           set
                           (trans_parent)
                           $new_trans}
                        {$portal
                           set
                           (trans_parent)
                           $new_trans}
                        {$new_cam
                           set
                           (trans_parent)
                           $new_trans}})
                  (no_test))
               (convert_to_pathcam
                  script
                  (script
                     {do
                        ($current_index 0)
                        ($camera '')
                        ($old_name
                           "")
                        ($new_name
                           "")
                        {set
                           $current_index
                           {elem $editor_prop_path 1}}
                        {set
                           $camera
                           {$this
                              get
                              (dcmc_nodes $current_index cam)}}
                        {$camera convert_class PathCamera}
                        {set
                           $camera
                           {$this
                              get
                              (dcmc_nodes $current_index cam)}}
                        {set
                           $old_name
                           {$camera
                              get
                              (name)}}
                        {set
                           $new_name
                           {forge
                              text_input_dialog
                              "Camera Name"
                              "What do you want to rename the camera?"
                              "OK"
                              $old_name}}
                        {$camera
                           set_name
                           $new_name
                           {$camera dir}
                           {$camera get layer}}
                        {set
                           $camera
                           {$this
                              get
                              (dcmc_nodes $current_index cam)}}
                        {$camera
                           add_keys
                           $camera
                           (rotation)
                           kPropQuat}
                        {$camera
                           set_key
                           $camera
                           (rotation)
                           0.0}
                        {$camera
                           add_keys
                           $camera
                           (scale)
                           kPropVector3}
                        {$camera
                           set_key
                           $camera
                           (scale)
                           0.0}
                        {$camera
                           add_keys
                           $camera
                           (position)
                           kPropVector3}
                        {$camera
                           set_key
                           $camera
                           (position)
                           0.0}})
                  (no_test))
               (convert_to_staticcam
                  script
                  (script
                     {do
                        ($current_index 0)
                        ($camera '')
                        ($old_name
                           "")
                        ($new_name
                           "")
                        {set
                           $current_index
                           {elem $editor_prop_path 1}}
                        {set
                           $camera
                           {$this
                              get
                              (dcmc_nodes $current_index cam)}}
                        {$camera convert_class StaticCamera}
                        {set
                           $camera
                           {$this
                              get
                              (dcmc_nodes $current_index cam)}}
                        {set
                           $old_name
                           {$camera
                              get
                              (name)}}
                        {set
                           $new_name
                           {forge
                              text_input_dialog
                              "Camera Name"
                              "What do you want to rename the camera?"
                              "OK"
                              $old_name}}
                        {$camera
                           set_name
                           $new_name
                           {$camera dir}
                           {$camera get layer}}
                        {set
                           $camera
                           {$this
                              get
                              (dcmc_nodes $current_index cam)}}})
                  (no_test)))
            (header
               {$this
                  get
                  {editor_prop_path_child node_name_header}}))
         (alias
            "nodes")
         (help
            "The camera nodes in this scene"))
      (dcmc_cutscenes
         (array
            (struct
               (cutscene_name
                  string
                  (help
                     "The name used to identify this cutscene"))
               (cam
                  object
                  (class PropAnim)
                  (help
                     "The camera object associated with this cutscene"))
               (ramp_in_time
                  float
                  (help
                     "How long does it take to blend into this cutscene (secs)?")
                  (range 0 10000))
               (ramp_out_time
                  float
                  (help
                     "How long does it take to blend out of this cutscene (secs)?")
                  (range 0 10000))
               (anim_delay
                  float
                  (help
                     "After we've started blending into the first frame of the animation, how long do we wait before playing the animation?")
                  (range 0 10000))
               (ramp_out_offset
                  float
                  (help
                     "After the animation has finished, how much time do you expect to elapse before the animation is done blending out?"
                     (range 0 10000)))
               (apply_weight
                  bool
                  (help
                     "Does this animation want to be weighted?"))
               (autosave_on_complete
                  bool
                  (default TRUE)
                  (help
                     "The game should autosave upon completion of this cutscene."))
               (should_teleport_character_after_cutscene
                  bool
                  (help
                     "True if a specified character should be teleported after the cutscene, false otherwise."))
               (character_to_teleport
                  object
                  (class Character)
                  (hide
                     {==
                        {$this
                           get
                           {editor_prop_path_sibling should_teleport_character_after_cutscene}}
                        FALSE})
                  (help
                     "The character to teleport."))
               (teleport_to_location
                  object
                  (class Trans)
                  (hide
                     {==
                        {$this
                           get
                           {editor_prop_path_sibling should_teleport_character_after_cutscene}}
                        FALSE})
                  (help
                     "The location to teleport the character to."))
               (teleport_time_offset
                  float
                  (hide
                     {==
                        {$this
                           get
                           {editor_prop_path_sibling should_teleport_character_after_cutscene}}
                        FALSE})
                  (help
                     "The number of seconds before the end of the cutscene that the character should be teleported."))
               (play_cutscene
                  script
                  (alias
                     "Play Cutscene")
                  (help
                     "Plays this cutscene")
                  (script
                     {$this
                        play_cutscene
                        {$this
                           get
                           {editor_prop_path_sibling cutscene_name}}})
                  (custom_history)))
            (header
               {$this
                  get
                  {editor_prop_path_child cutscene_name}}))
         (alias
            "cutscenes")
         (help
            "The cutscenes in this scene"))
      (dcmc_starting_node
         symbol
         (list
            {$this get_node_names})
         (alias
            "starting node")
         (help
            "Which node are we in when the game starts?"))
      (dcmc_yen_sid_intro_cutscene
         symbol
         (list
            {$this get_cutscene_names})
         (alias
            "Yen Sid intro cutscene")
         (help
            "The cutscene played when starting the level during the Yen Sid phase."))
      (dcmc_long_intro_cutscene
         symbol
         (list
            {$this get_cutscene_names})
         (alias
            "long intro cutscene")
         (help
            "Which cutscene do we play when we first play a level?"))
      (dcmc_short_intro_cutscene
         symbol
         (list
            {$this get_cutscene_names})
         (alias
            "short intro cutscene")
         (help
            "Which cutscene do we play when we play a level again?"))
      (dcmc_long_outro_cutscene
         symbol
         (list
            {$this get_cutscene_names})
         (alias
            "long outro cutscene")
         (help
            "Which cutscene do we play when we get a hat symbol?"))
      (dcmc_short_outro_cutscene
         symbol
         (list
            {$this get_cutscene_names})
         (alias
            "short outro cutscene")
         (help
            "Which cutscene do we play when we leave the level?"))
      (dcmc_zoom_out_through_old_pos
         bool
         (alias
            "zoom out through old pos?")
         (help
            "Do we zoom out to the position the player was at when they originally zoomed in, and then scrub along that camera to their current pos? (to avoid clipping)"))
      (dcmc_use_special_zoom_out
         bool
         (no_test serialize)
         (alias
            "use special zoom out camera")
         (help
            "Set true if our next zoom out should use special zoom out camera.  Sets back to false automatically."))
      (dcmc_current_node
         symbol
         (list
            {$this get_node_names})
         (read_only TRUE)
         (alias
            "current node")
         (help
            "What is the name of the current node?"))
      (dcmc_zoom_node
         symbol
         (list
            {$this get_node_names})
         (read_only TRUE)
         (alias
            "zoom node")
         (help
            "What is the name of the node we're zooming into?"))
      (dcmc_current_cutscene
         symbol
         (list
            {$this get_cutscene_names})
         (read_only TRUE)
         (alias
            "current cutscene")
         (help
            "What is the name of the cutscene we're playing"))
      (dcmc_zoom_state
         int
         (list FLUX_DISC_ZOOM_STATE)
         (read_only TRUE)
         (alias
            "zoom state")
         (help
            "What's our camera zoom doing?"))
      (dcmc_cutscene_state
         int
         (list FLUX_DISC_CUTSCENE_STATE)
         (read_only TRUE)
         (alias
            "cutscene state")
         (help
            "What are our cutscenes doing?"))
      (dcmc_zoom_progress
         float
         (read_only TRUE)
         (alias
            "zoom progress")
         (help
            "How far along our zoom are we, 0 to 1?"))
      (dcmc_is_playing_intro_cutscene
         bool
         (read_only TRUE)
         (alias
            "is playing intro cutscene?")
         (help
            "True if an intro cutscene is currently playing, false otherwise."))
      (dcmc_cutscene_characters
         (array
            object
            (class Cutscene))
         (read_only TRUE)))
   (events_in
      (set_current_node
         (help
            "Sets the current node for the camera")
         (editor
            (camera_node
               symbol
               (list
                  {[target]
                     get_node_names})
               (help
                  "Which node should we jump to?"))))
      (zoom_in_first_child
         (help
            "Zooms in on whatever the first camera in our children list is"))
      (zoom_in
         (editor
            (camera_node
               symbol
               (list
                  {[target]
                     get_node_names})
               (help
                  "Which node should we zoom to?"))))
      (zoom_out
         (help
            "Zooms out if we can from our current node"))
      (play_cutscene
         (help
            "Plays a cutscene")
         (editor
            (cutscene
               symbol
               (list
                  {[target]
                     get_cutscene_names})
               (help
                  "Which cutscene should we play?"))))
      (play_long_intro_cutscene)
      (play_short_intro_cutscene)
      (play_long_outro_cutscene)
      (play_short_outro_cutscene)
      (skip_cutscene))
   (events_out
      (zoom_in_begin
         (help
            "We just committed to zooming in and the camera has started moving")
         (editor
            (zib_camera_node
               symbol
               (list
                  {$this get_node_names})
               (help
                  "Which node are we zooming into?"))))
      (zoom_in_complete
         (help
            "We just finished zooming in")
         (editor
            (zic_camera_node
               symbol
               (list
                  {$this get_node_names})
               (help
                  "Which node did we just zoom into?"))))
      (zoom_out_begin
         (help
            "We just committed to zooming out and the camera has started moving")
         (editor
            (zob_camera_node
               symbol
               (list
                  {$this get_node_names})
               (help
                  "Which node are we zooming out from?"))))
      (zoom_out_complete
         (help
            "We just finished zooming out")
         (editor
            (zoc_camera_node
               symbol
               (list
                  {$this get_node_names})
               (help
                  "Which node did we just zoom out from?"))))
      (cutscene_begin
         (help
            "We just committed to a cutscene and the camera has started moving")
         (editor
            (cb_cutscene
               symbol
               (list
                  {$this get_cutscene_names})
               (help
                  "Which cutscene are we playing?"))))
      (cutscene_complete
         (help
            "We just finished a cutscene")
         (editor
            (cc_cutscene
               symbol
               (list
                  {$this get_cutscene_names})
               (help
                  "Which cutscene did we finish playing?"))))
      (long_intro_cutscene_started)
      (short_intro_cutscene_started)
      (intro_cutscene_started)
      (long_outro_cutscene_started)
      (short_outro_cutscene_started)
      (outro_cutscene_started)
      (long_intro_cutscene_complete)
      (short_intro_cutscene_complete)
      (intro_cutscene_complete)
      (long_outro_cutscene_complete)
      (short_outro_cutscene_complete)
      (outro_cutscene_complete)))
(TransMeasurements
   (description
      "Object that outputs useful information about the relationship between two trans's")
   (allowed_dirs Scene Entity Character)
   (ext transmeas)
   (superclasses Poll)
   (editor
      (source
         object
         (class Trans))
      (target
         object
         (class Trans))
      (polling bool)
      (planar_angle_x
         float
         (read_only TRUE)
         (help
            "CCW from +y, about +x (-180,180)"))
      (planar_angle_y
         float
         (read_only TRUE)
         (help
            "CCW from +z, about +y (-180,180)"))
      (planar_angle_z
         float
         (read_only TRUE)
         (help
            "CCW from +x, about +z (-180,180)"))
      (axis_angle_x
         float
         (read_only TRUE)
         (help
            "Angle made with source's +x (0,180)"))
      (axis_angle_y
         float
         (read_only TRUE)
         (help
            "Angle made with source's +y (0,180)"))
      (axis_angle_z
         float
         (read_only TRUE)
         (help
            "Angle made with source's +z (0,180)"))
      (displacement_x
         float
         (read_only TRUE))
      (displacement_y
         float
         (read_only TRUE))
      (displacement_z
         float
         (read_only TRUE))
      (distance
         float
         (read_only TRUE))
      (midpoint_x
         float
         (read_only TRUE))
      (midpoint_y
         float
         (read_only TRUE))
      (midpoint_z
         float
         (read_only TRUE))
      (euler_pitch
         float
         (read_only TRUE))
      (euler_roll
         float
         (read_only TRUE))
      (euler_yaw
         float
         (read_only TRUE))
      (cam_displacement_x
         float
         (read_only TRUE))
      (cam_displacement_y
         float
         (read_only TRUE))
      (cam_displacement_z
         float
         (read_only TRUE))
      (screen_displacement_x
         float
         (read_only TRUE))
      (screen_displacement_y
         float
         (read_only TRUE))
      (screen_distance
         float
         (read_only TRUE))))
(WaypointRibbon
   (description
      "Create a ribbon that passes through a series of Trans waypoints")
   (allowed_dirs Scene Entity)
   (category Graphics)
   (superclasses Ribbon)
   (ext wrbn)
   (editor
      (sync_waypoints
         script
         (script
            {$this sync_waypoints})
         (help
            "Refresh based on current waypoint positions"))
      (waypoints
         (array
            object
            (class Trans)))
      (update_every_frame
         bool
         (help
            "Does the ribbon update its geometry every frame?  If not (which is less expensive), you need to run the sync_waypoints command to update it after you move your waypoint transes"))))
(WaveRibbon
   (description
      "Wave Ribbon")
   (allowed_dirs Scene Entity)
   (category Graphics)
   (superclasses Ribbon)
   (ext wvrbn)
   (editor
      (length
         float
         (help
            "How long is the generated mesh?")
         (read_only
            {==
               [use_endpoints]
               TRUE}))
      (amplitude
         float
         (help
            "How high are the sine wave's peaks?"))
      (frequency
         float
         (help
            "What is the frequency?  In units of periods per unit length"))
      (phase
         float
         (help
            "What is the phase?  0 to 1 spans one period"))
      (taper_distance
         float
         (help
            "Where do we begin our taper?  Distance is constant regardless of length"))
      (use_envelope
         bool
         (help
            "Do we modulate the amplitude by a parabola?"))
      (bowing
         float
         (help
            "Do we laterally bend the wave along y?"))
      (shape
         int
         (list WAVE_RIBBON_SHAPES)
         (help
            "What is the shape of the wave?"))
      (noise_amplitude
         float
         (help
            "How much noise do we apply?"))
      (use_endpoints
         bool
         (help
            "Do you want to move the ribbon around with trans's?"))
      (start_point
         object
         (class Trans)
         (help
            "What is the start point of the ribbon?")
         (hide
            {==
               [use_endpoints]
               FALSE}))
      (end_point
         object
         (class Trans)
         (help
            "What is the end point of the ribbon?")
         (hide
            {==
               [use_endpoints]
               FALSE}))))
(FluxProfile
   (description
      "Player profile.")
   (user_creatable FALSE)
   (editor
      (current_phase
         int
         (list DISCOVERY_SCENE_PHASES)
         (help
            "Current game phase."))
      (options
         object
         (class OptionsPersistentData)
         (help
            "Option data."))
      (is_quickplay_unlock_all_enabled
         bool
         (help
            "True if all on disc songs and remixes should be unlocked in quickplay, false otherwise."))))
(ProfileMgr
   (description
      "Houses and provides access to player profiles.")
   (user_creatable FALSE)
   (functest no_test singleton)
   (is_flow_provider TRUE)
   (editor
      (active_profile
         object
         (class FluxProfile)
         (read_only TRUE)
         (help
            "The currently active profile."))
      (persistence_enabled
         bool
         (help
            "Whether persistence is enabled or not.  Read-only in ship builds.")))
   (events_in
      (set_active
         (help
            "Sets the active profile.")
         (editor
            (user_idx
               int
               (help
                  "The user index of the profile.")))))
   (events_out
      (profile_altered
         object
         (class FluxProfile)
         (help
            "Sent when the active profile has been dirtied."))))
(WaveformRibbon
   (description
      "Waveform Ribbon")
   (allowed_dirs Scene Entity)
   (category Graphics)
   (superclasses Ribbon)
   (ext wvfrm)
   (editor
      (color_anim
         object
         (class Anim)
         (help
            "Anim with 0-1 frame range which dictates the color along the path of the ribbon, start to end"))
      (color_mat
         object
         (class Mat)
         (help
            "Mat whose color is being modified by color_anim"))))
(TargetPaintGroup
   (description
      "A grouping of targets that implement a rhythmic 'target painting' mechanic  - you wipe over a # of targets with the cursor, and then a 'cursor echo' passes through them rhythmically in the same order")
   (allowed_dirs Scene Entity)
   (ext tgrp)
   (superclasses Poll)
   (editor
      (enabled
         bool
         (alias
            "Enabled?")
         (help
            "Is the interaction involving these targets enabled?"))
      (targets
         (array
            object
            (class Object)
            (components
               (TargetPaintableCom)))
         (alias
            "Targets")
         (help
            "Targets for the cursor, which must have the DiscoveryCursorTargetCom on them"))
      (num_to_start_echo
         int
         (alias
            "Num Painted To Start Echo")
         (range 1 20)
         (slider)
         (help
            "How many must be targets must be painted for the  echo to start rhythmically bursting them?"))
      (first_quantization_min_secs
         float
         (alias
            "First Quantization Min (secs)")
         (range 0.0 6.0)
         (slider)
         (help
            "If you want to make sure the FIRST target doesn't 'burst' too quickly, you can set this minimum time in secs.  Note that it will still quantize to beats, 8ths, etc, but this might make it wait several intervals"))
      (anticipation_time
         float
         (alias
            "Anticipation Time (secs)")
         (range 0.0 3.0)
         (slider)
         (help
            "The # of seconds in advance of the normal echo to receive a special 'anticipation echo' event, mostly to trigger animations that have a bit of anticipation baked in.  Note, we will guaruntee that this time will elapse after painting, extending when echo will happen to make room."))
      (num_targets_painted
         int
         (alias
            "Num Targets Painted")
         (read_only TRUE)
         (no_test)
         (help
            "How many targets are currently in the queue?"))
      (max_chain_length
         int
         (alias
            "Max Chain Length")
         (help
            "If non-zero, what is the maximum length of a target paint chain?"))
      (ribbon_style
         int
         (alias
            "Ribbon Style Num")
         (slider)
         (range
            1
            {$this num_ribbon_styles})
         (help
            "Which ribbon visual style does this target paint group get?")))
   (events_in
      (force_release_all
         (help
            "force release all targets"))
      (add_entity_to_group
         (editor
            (entity_to_add
               object
               (class Entity)
               (help
                  "The entity to add to this target group.  Will be ignored if already in the group")))
         (help
            "Add the given entity to the target group.  Will ignore if already in the group.  Useful to linking entities spawned with EntityPools to target painting to get ribbon/echo/sequenced quantization..."))
      (remove_entity_from_group
         (editor
            (entity_to_remove
               object
               (class Entity)
               (help
                  "The entity to remove to this target group.  Will be ignored if not in the group")))
         (help
            "Remove the given entity from the target group.  Will ignore if not in the group."))
      (clear_all_entities_from_group
         (help
            "Clears all entities from target paint group...")))
   (events_out
      (on_target_echoed
         (editor
            (echoed_target_idx
               int
               (default 0)
               (help
                  "starting at 0, the index of the target that the echo just 'burst'.  This is the index in the targets list"))
            (echoed_slot_num
               int
               (default 0)
               (help
                  "The slot number of note we played/should play for the this target.  Same number set when target was painted"))
            (echoed_souvenir_tag
               symbol
               (list
                  {elem
                     {find $syscfg target_painting souvenir_tags}
                     1})
               (help
                  "The souvenir tag associated with the target")))
         (help
            "Sent out when cursor arrives at a target"))
      (on_anticipation_echo
         (editor
            (anticipate_target_idx
               int
               (default 0)
               (help
                  "starting at 0, the index of the target that the echo just 'burst'.  This is the index in the targets list"))
            (anticipate_slot_num
               int
               (default 0)
               (help
                  "The slot number of note we played/should play for the this target.  Same number set when target was painted"))
            (anticipate_souvenir_tag
               symbol
               (list
                  {elem
                     {find $syscfg target_painting souvenir_tags}
                     1})
               (help
                  "The souvenir tag associated with the target")))
         (help
            "Called prior to normal echo, for things like animations that want to start in advance of when music will play"))
      (on_target_painted
         (editor
            (painted_target_idx
               int
               (default 0)
               (help
                  "starting at 0, the index of the target that was just painted.  It is now queued up to be burst rhythmically by the echo.")))
         (help
            "Called when a new target is painted (i.e. shows its reticle)"))))
(MatSpecNoise
   (description
      "Material template for rendering noise effect")
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (noise_map
         object
         (class VolumeTex)
         (alias
            "Noise Volume Texture")
         (help
            "3D Noise texture"))
      (color_1
         color
         (help
            "First color of noise"))
      (color_1_alpha
         float
         (alias
            "alpha")
         (range 0 1)
         (help
            "Opacity of first noise color"))
      (color_2
         color
         (help
            "Second color of noise"))
      (color_2_alpha
         float
         (alias
            "alpha")
         (range 0 1)
         (help
            "Opacity of second noise color"))
      (noise_scale
         float
         (alias
            "Noise Scale")
         (help
            "Texture scale for noise texture")
         (range 0.0 1000.0))
      (noise_offset
         VECTOR3
         (alias
            "Noise Offset")
         (help
            "Texture offset for noise texture"))))
(FluxMatSpecScreenTex
   (description
      "Material template for Flux's screen space textures.")
   (allowed_dirs MatSpecDir)
   (superclasses MatSpecStd MatSpec)
   (ext mspec)
   (editor
      (screen_space_tex
         object
         (class Tex)
         (alias
            "Screen Space Texture")
         (help
            "The texture which will be displayed using the screen's coordinate system."))
      (screen_space_mask
         object
         (class Tex)
         (alias
            "Screen Space Mask")
         (help
            "Red channel dictates where the screen-space texture shows up. White = screen space."))
      (screen_space_alpha
         float
         (help
            "Alpha to control screen space texture. 0 means full diffuse."))
      (u_fade_position
         float
         (help
            "Pixels in U-coordinates less than this are completely transparent."))
      (u_fade_width
         float
         (help
            "Pixels between [u_fade_position, u_fade_position + u_fade_width] become more opaque."))
      (u_fade_flip
         bool
         (help
            "Flips the U fade to be a fade-in instead of fade-out."))
      (v_antialias_width
         float
         (help
            "Width of the antialiased boarder in V direction. [0, 1]"))
      (u_antialias_width
         float
         (help
            "Width of the antialiased boarder in U direction. [0, 1]"))
      (fresnel
         float
         (help
            "Fresnel effect of screen-space texture. 0 means no fresnel. Bigger means more narrowing."))
      (u_wave_amplitude
         float
         (help
            "Amplitude of the wave travelling down the U-axis which deflects in the world Z. 0 means no wave."))
      (u_wave_frequency
         float
         (help
            "Frequency of the wave travelling down the U-axis."))
      (u_wave_speed
         float
         (help
            "Speed of the wave travelling down the U-axis."))
      (u_wave_lighting
         float
         (help
            "Fake lighting contribution on the U-wave. 0 means none."))
      (ripple_using_uv
         bool
         (help
            "Do the ripples use UV coords (true) or world-space ones (false)?"))
      (ripple_amplitude
         float
         (help
            "The amplitude of the ripples."))
      (ripple_frequency
         float
         (help
            "The frequency of the ripples."))
      (ripple_speed
         float
         (help
            "The speed of the ripples in time."))))
(SculptableCollisionSurface
   (description
      "Sculptable Collision Surface")
   (allowed_dirs Entity Scene)
   (superclasses Trans Draw)
   (ext tsurf)
   (editor
      (num_control_points
         int
         (range 0 200)
         (alias
            "Number of Control Points")
         (hide propanim flow)
         (record_all))
      (control_points
         (array
            (struct
               (local_xfm
                  TRANSFORM
                  (alias
                     "Local Transform")
                  (help
                     "Control Point transform (relative to the surface's main transform)."))
               (control_type
                  int
                  (list TRI_SURF_CONTROL_POINT_TYPES)
                  (help
                     "What type of control point is this?"))))
         (hide propanim flow)
         (no_test))
      (active
         bool
         (help
            "Is this body active?")
         (no_test))
      (collision_filter_name
         symbol
         (alias
            "Collision Filter Preset")
         (list
            {$physics collision_filter_symbols kFilterTypeRB})
         (help
            "The applied collision filter preset used to define what other RigidBodies this object collides with."))
      (collision_is_a
         bitfield
         (alias
            "is-a flags")
         (list
            {$physics rb_collision_is_a})
         (help
            "Flags that represent the collision type that I am"))
      (collision_collides_with
         bitfield
         (alias
            "collides-with flags")
         (list
            {$physics rb_collision_with})
         (help
            "Flags that represent the collision types that I collide with"))
      (create_point
         script
         (script
            {set
               $new_index
               {$this
                  size
                  (control_points)}}
            {$this
               insert
               (control_points $new_index)}
            {$this
               set
               (control_points $new_index control_type)
               kControlPoint})
         (no_test))
      (create_cylinder
         script
         (script
            {set
               $new_index
               {$this
                  size
                  (control_points)}}
            {$this
               insert
               (control_points $new_index)}
            {$this
               set
               (control_points $new_index control_type)
               kControlCylinder})
         (no_test))
      (create_quad
         script
         (script
            {set
               $new_index
               {$this
                  size
                  (control_points)}}
            {$this
               insert
               (control_points $new_index)}
            {$this
               set
               (control_points $new_index control_type)
               kControlQuad})
         (no_test)))
   (init
      {set
         [collision_filter_name]
         receive_hand_cursor}))
(SculptableCollisionPoint
   (description
      "Sculptable Surface Control Point")
   (allowed_dirs)
   (superclasses Trans)
   (editor))
(StorageMgr
   (description
      "Storage Manager (Base)")
   (functest no_test singleton)
   (user_creatable FALSE))
(StorageMgr_Durango
   (description
      "Storage Manager (Durango)")
   (functest no_test singleton)
   (user_creatable FALSE))
(StorageMgr_XB360
   (description
      "Storage Manager (XB360)")
   (functest no_test singleton)
   (user_creatable FALSE))
(StorageMgr_PC
   (description
      "Storage Manager (PC)")
   (functest no_test singleton)
   (user_creatable FALSE))
(StepSequencerRow
   (description
      "A single row in a step sequencer, consisting of a # of 'step' entities that have SequenceStepCom's on them")
   (allowed_dirs Scene Entity)
   (ext seq)
   (superclasses Poll)
   (editor
      (on
         bool
         (alias
            "On?")
         (help
            "Is this sequencer row on?")
         (read_only TRUE))
      (steps
         (array
            object
            (class Object)
            (components
               (SequencerStepCom)))
         (alias
            "Steps")
         (help
            "The steps for this sequencer row (these are entities with SequencerStepCom components on them). Order matters."))
      (beats_per_loop
         float
         (help
            "How many beats does sequencer loop over?  normally the sum of all the steps, but could be longer if you want."))
      (beat_offset
         float
         (alias
            "Beat Offset")
         (help
            "Where, in beats, do we start our loop?"))
      (num_steps
         int
         (read_only TRUE)
         (alias
            "Num Steps")
         (no_test)
         (help
            "How many steps does this sequencer have?"))
      (cur_step
         int
         (read_only TRUE)
         (alias
            "Cur Step")
         (no_test)
         (help
            "Starting at 1, which step is current?  Will be -1 if none of the steps are current because we're waiting to loop (i.e 'beats_per_loop' is longer than the sum of the steps we have)"))
      (num_toggled_on
         int
         (read_only TRUE)
         (alias
            "Num Toggled On")
         (no_test)
         (help
            "How many steps in this sequencer are currently toggled on?"))
      (sampler
         object
         (class FusionSampler))
      (channel
         int
         (alias
            "forwards channel")
         (help
            "FusionSampler channel"))
      (backwards_channel
         int
         (help
            "FusionSampler channel"))
      (transposer
         object
         (class Transposer))
      (midi_file
         file
         (ext
            "MIDI Files"
            "mid")
         (help
            "Optional midi file to define steps. Steps are defined in a 16th note grid."))
      (midi_track
         int
         (help
            "Track index to use in the midi file"))
      (reload_midi
         script
         (script
            {$this reload_midi}))
      (start_quantization
         int
         (list
            (BEAT_QUANTIZATIONS_BASE))
         (help
            "Quantization when using play_forward or play_backward events."))
      (play_forward
         script
         (script
            {$this play_forward}))
      (play_backward
         script
         (script
            {$this play_backward}))
      (play_forward_available
         bool
         (read_only TRUE))
      (sequencer_position
         float
         (read_only TRUE)
         (help
            "Current position, range 0-beats_per_loop")))
   (events_in
      (force_all_toggled_on
         (editor
            (on
               bool
               (default TRUE)
               (help
                  "toggling on or off?")))
         (help
            "Force all steps to be toggled on or off"))
      (assign_step
         (editor
            (step_idx
               int
               (default 0)
               (help
                  "Starting at 0, the index of the step to replace"))
            (new_step_obj
               object
               (class Object)
               (components
                  (SequencerStepCom))
               (help
                  "The new step to assign at the given index"))
            (swap_on_replace
               bool
               (default FALSE)
               (help
                  "If new step is present elsewhere in the sequencer, swap step its replacing with the step's old loc")))
         (help
            "Lets you replace a step within the sequencer at a particular position with a different step"))
      (play_forward)
      (play_backward)
      (reset_sequencer))
   (events_out
      (on_new_step_current
         (editor
            (which_step_current
               int
               (default 1)
               (help
                  "The # of the step that just became current, starting at 1. Called BEFORE any triggering"))))
      (on_step_triggered
         (editor
            (which_step_triggered
               int
               (default 1)
               (help
                  "The # of the step that triggered, starting at 1"))
            (which_pitch_triggered
               int
               (default 1)
               (help
                  "The pitch that was just triggered")))
         (help
            "Called when a step should play a pitch, meaning its been toggled on and has just become current."))
      (recorder_cleared
         (help
            "Sent when we've started a new recording"))))
(ConductorNavController
   (description
      "An object that feeds conductor-menu-appropriate control events to the UINavCom")
   (allowed_dirs UIScreen)
   (ext cnc)
   (superclasses UINavController)
   (editor
      (is_enabled
         bool
         (no_test serialize)
         (help
            "When false, conductor input is ignored"))
      (center_point
         object
         (class Trans)
         (help
            "the center point for the radial navigation"))
      (hand_at_side_degrees
         float
         (range 0.0 180.0)
         (help
            "degrees away from down that counts as \\"
            hand
            at
            'side\\""'))
      (hover_degrees
         float
         (range 0.0 180.0)
         (help
            "degrees away from a focusable where it starts to hover"))
      (select_degrees
         float
         (range 0.0 180.0)
         (help
            "degrees away from a focusable where it starts to select"))
      (selection_seconds
         float
         (range 0.0 5.0)
         (help
            "seconds of time to select an object"))
      (drain_multiplier
         float
         (range 1.0 10.0)
         (help
            "how much faster the selections drain than accumulate"))
      (focus_selection_value
         float
         (read_only TRUE)
         (help
            "selection value for focused object"))
      ('Auto-Layout Config'
         (indent
            (should_override_global_layout_center
               bool
               (help
                  "True if this conductor nav controller overrides the global layout center, false otherwise."))
            (layout_center
               object
               (class Trans)
               (hide
                  {!
                     [should_override_global_layout_center]})
               (help
                  "The trans used as the center point of the layout. If this is null, the origin is used as the center point."))
            (should_override_global_layout_radius
               bool
               (help
                  "True if this conductor nav controller overrides the global layout radius, false otherwise."))
            (layout_radius
               float
               (hide
                  {!
                     [should_override_global_layout_radius]})
               (help
                  "The radius, in in-game meters, that this conductor nav layout system puts between the center point and the buttons if it overrides the global radius."))
            (should_override_global_layout_gap_degrees
               bool
               (help
                  "True if this conductor nav controller overrides the global layout gap degrees, false otherwise."))
            (layout_gap_degrees
               float
               (hide
                  {!
                     [should_override_global_layout_gap_degrees]})
               (help
                  "The number of degrees that the conductor nav layout system puts between each button."))
            (layout_objects
               (array
                  object
                  (class Trans))
               (help
                  "The objects that are moved by the conductor nav layout system."))
            (apply_auto_layout
               script
               (no_test)
               (script
                  {$this apply_auto_layout})
               (help
                  "Applies the specific layout configuration to the layout objects."))))
      (is_tracking_hand
         bool
         (read_only TRUE)
         (help
            "True if the player's hand angle is currently being tracked, false otherwise."))
      (hand_angle
         float
         (read_only TRUE)
         (help
            "The player's current hand angle."))
      (back_button
         object
         (components
            (UIFocusableCom))
         (help
            "The button that's selected when the 'Go Back' speech command is triggered on Durango, if any.")))
   (events_in
      (reset
         (help
            "Resets the selection state of the focusables."))
      (enable_layout_object
         (editor
            (object_to_enable
               object
               (class Trans)
               (list
                  {[target]
                     on_get_layout_objects})))
         (help
            "Enables the specified layout object and updates the auto-layout."))
      (disable_layout_object
         (editor
            (object_to_disable
               object
               (class Trans)
               (list
                  {[target]
                     on_get_layout_objects})))
         (help
            "Disables and removes the specified object from the auto-layout, and redistributes the remaining objects."))))
(MusicBoxManipulator
   (description
      "Manipulator that has you moving music box 'teeth' in the way of static 'pluckers'.")
   (superclasses Entity)
   (editor
      (pluckers
         file
         (ext
            "MIDI Files"
            "mid")
         (instance_prop))
      (reload_pluckers
         script
         (script
            {$this reload_pluckers})
         (no_test)
         (instance_prop))
      (sampler
         object
         (class FusionSampler)
         (instance_prop))
      (polling
         bool
         (help
            "Are we producing music and events?")
         (instance_prop))
      (crash_pitches
         (array int)
         (help
            "List of all crashes or other long-sustain samples that get played by this music box, to be sent to channel 1 for separate voice pooling")))
   (events_in)
   (events_out))
(BeatWheelManipulator
   (description
      "Manipulator that stretches a waveform around you in a circle and lets you beatslice it.")
   (superclasses Entity)
   (editor
      (hand_up
         bool
         (no_test)
         (history FALSE)
         (help
            "For testing in Forge."))
      (clock_pos
         float
         (range 0.0 0.999)
         (no_test)
         (history FALSE)
         (help
            "For testing in Forge."))
      (num_slices
         int
         (range 4 16)
         (no_test)
         (history FALSE)
         (help
            "For testing in Forge."))
      (print_recorded
         script
         (script
            {$this print_recorded})
         (no_test))
      (playback_pos
         float
         (read_only TRUE))
      (recorder_pos
         float
         (read_only TRUE))
      (audio_level
         float
         (read_only TRUE))
      (display_num_slices
         int
         (read_only TRUE))
      (cursor_radius
         float
         (disk_prop))
      (sampler
         object
         (class FusionSampler)
         (instance_prop))
      (chord_follow_midi
         file
         (ext
            "MIDI Files"
            "mid")
         (instance_prop))
      (reload_midi
         script
         (script
            {$this reload_midi})
         (no_test)
         (instance_prop))
      (fixed_tempo
         float
         (help
            "If not -1, overrides tempo used for beatwheel")
         (instance_prop))
      (allow_last_voice_to_continue
         bool
         (help
            "Should we stop the last segment when we mute, or allow it to continue to the end of its sample?"))
      (increase_visual_dynamic_range
         bool
         (help
            "Should we make the waveform peaks visually more distinct from the quieter parts?")))
   (events_in)
   (events_out))
(LatheManipulator
   (description
      "Manipulator that allows you to select rhythmic density of multiple tracks.")
   (superclasses Entity)
   (editor
      (hands_up
         bool
         (no_test)
         (history FALSE)
         (help
            "For testing in Forge."))
      (write_width
         float
         (range 0.0 1.0)
         (no_test)
         (history FALSE)
         (help
            "For testing in Forge."))
      (write_twist
         float
         (range -1.0 1.0)
         (no_test)
         (history FALSE)
         (help
            "For testing in Forge."))
      (bacon_selector
         float
         (range 0.0 1.0)
         (no_test)
         (history FALSE)
         (help
            "For testing in Forge."))
      (lathe_spacing
         float
         (disk_prop)
         (help
            "Spacing of the lathes"))
      (current_bacon
         int
         (read_only TRUE)
         (instance_prop))
      (fade_effects_out
         bool
         (instance_prop))
      (lathe_tracks
         (array
            (struct
               (scale_params
                  (array
                     (struct
                        (fx_enable_param
                           string
                           (help
                              "Wwise param to enable the effect")
                           (instance_prop))
                        (fx_param
                           string
                           (help
                              "Wwise param controlled by scale")
                           (instance_prop))
                        (fx_property
                           PROPREF_FLOAT
                           (require_complete_ref FALSE)
                           (help
                              "Property controlled by scale"))
                        (fx_curve
                           waveform_float
                           (instance_prop)))))
               (scale_set_all
                  bool
                  (help
                     "Disables scale parameter modulation over time, parameter is just set to a single static value")
                  (instance_prop))
               (current_scale
                  float
                  (read_only TRUE))
               (rotation_params
                  (array
                     (struct
                        (fx_enable_param
                           string
                           (help
                              "Wwise param to enable the effect")
                           (instance_prop))
                        (fx_param
                           string
                           (help
                              "Wwise param controlled by rotation")
                           (instance_prop))
                        (fx_property
                           PROPREF_FLOAT
                           (require_complete_ref FALSE)
                           (help
                              "Property controlled by rotation"))
                        (fx_curve
                           waveform_float
                           (instance_prop)))))
               (rotation_set_all
                  bool
                  (help
                     "Disables rotation parameter modulation over time, parameter is just set to a single static value")
                  (instance_prop))
               (current_rotation
                  float
                  (read_only TRUE))
               (level_meter_param
                  string
                  (help
                     "Wwise RTCP which should return an audio level from the bus that this lathe is affecting"))))))
   (events_in)
   (events_out))
(RopeManipulator
   (description
      "Manipulator that allows you to freestyle a melody.")
   (superclasses Entity)
   (editor
      (right_hand
         (struct
            (x
               float
               (range 0.0 1.0))
            (y
               float
               (range 0.0 1.0))
            (z
               float
               (range 0.0 1.0)))
         (editor_type vector)
         (no_test)
         (history FALSE))
      (left_hand
         (struct
            (x
               float
               (range 0.0 1.0))
            (y
               float
               (range 0.0 1.0))
            (z
               float
               (range 0.0 1.0)))
         (editor_type vector)
         (no_test)
         (history FALSE))
      (measure_pos
         float
         (range 0.0 1.0)
         (read_only TRUE))
      (note_density
         int
         (range 0 2)
         (read_only TRUE))
      (notch_blur_width
         int
         (range 0 50)
         (disk_prop))
      (sampler
         object
         (class FusionSampler)
         (instance_prop))
      (polling
         bool
         (help
            "Are we producing music and events?")
         (instance_prop))
      (midi
         file
         (ext
            "MIDI Files"
            "mid")
         (instance_prop))
      (reload_midi
         script
         (script
            {$this reload_midi})
         (no_test)
         (instance_prop))
      (depth_anim
         object
         (class Anim)
         (help
            "Anim scrubbed 0-1 for depth of ball position")
         (instance_prop))
      (pan_anim
         object
         (class Anim)
         (help
            "Anim scrubbed 0-1 for left-right position of ball")
         (instance_prop)))
   (events_in)
   (events_out))
(SpaceJamManipulator
   (description
      "Manipulator that allows you to freestyle a melody.")
   (superclasses Entity)
   (editor
      (right_hand
         (struct
            (x
               float
               (range 0.0 1.0))
            (y
               float
               (range 0.0 1.0))
            (z
               float
               (range -1.0 1.0)))
         (editor_type vector)
         (no_test)
         (history FALSE))
      (left_hand
         (struct
            (x
               float
               (range 0.0 1.0))
            (y
               float
               (range 0.0 1.0))
            (z
               float
               (range- 1.0 1.0)))
         (editor_type vector)
         (no_test)
         (history FALSE))
      (body_position
         float
         (read_only TRUE))
      (hand_z
         float
         (range 0.0 1.0)
         (read_only TRUE))
      (quantized_recorder
         object
         (class QuantizedRecorder)
         (disk_prop))
      (polling
         bool
         (help
            "Are we producing music and events?")
         (instance_prop)))
   (events_in)
   (events_out))
(FluxCueProxyPool
   (description
      "Holds proxy entities for editing cue positions")
   (superclasses EntityPool)
   (allowed_dirs UIScreen)
   (editor))
(EntityTransformer
   (description
      "Lets you spawn entities that can transform into 1 or more different entities, recursively down several 'generations'.")
   (superclasses Poll)
   (allowed_dirs Scene Entity UIScreen)
   (ext et)
   (editor
      (1st_gen_entity_pool
         object
         (class EntityPool)
         (help
            "The entity pool to spawn from for generation entities"))
      (1st_gen_spline
         object
         (class Spline)
         (help
            "Optional spline to put 1st generation entities onto"))
      (1st_gen_spline_speed
         float
         (help
            "Speed of 1st generation entities along their spline"))
      (1st_gen_transform_at_spline_end
         bool
         (help
            "When 1st generation reaches spline end, do we recall it or transform it?"))
      (generations
         (array
            (struct
               (entity_pool
                  object
                  (class EntityPool)
                  (help
                     "The entity pool to spawn from for this generation"))
               (num_to_spawn
                  int
                  (help
                     "How many entities do we spawn when transforming from previous generation to this generation"))
               (rotation_offsets
                  (array VECTOR3)
                  (help
                     "Rotational offsets to apply to each entity born this generation.  Should be same length as 'num_to_spawn'"))
               (position_with_pool
                  bool
                  (help
                     "Normally we position this generation with prev generation, but this option forces us to always just spawn wherever the pool is"))))
         (help
            "Describes the chain of entities we transform into, and related parameters to apply as each generation is born"))
      (loop_transformations
         bool
         (help
            "When we reach last generation, do we loop back to first, or are we done?"))
      (only_copy_position
         bool
         (help
            "When we transform, do we only copy over the position of the object we're transforming from?"))
      (Testing
         (indent
            (Spawn
               script
               (script
                  {$this spawn_entity})
               (help
                  "Spawn a first generation entity"))
            (Transform
               script
               (script
                  {$this transform_all})
               (help
                  "Transforms all active entities to their next generation"))
            ('Recall All'
               script
               (script
                  {$this recall_all})
               (help
                  "Removes all active entities that we've spawned from the world")))))
   (events_in
      (spawn_entity
         (help
            "spawns a first generation entity.  Will put it onto a spline if '1stGenSpline' property is set"))
      (transform_all
         (help
            "transforms all active entities to their next generation"))
      (recall_all
         (help
            "remove all active entities that we have spawned from the world. Will call any recall anims the entity pool has been setup for.")))
   (events_out
      (on_spawned_generation
         (editor
            (spawned_entity
               object
               (class Entity)
               (components
                  (EntityTransformerCom))
               (help
                  "the entity that was just spawned"))
            (spawned_gen_num
               int
               (help
                  "which generation #, starting at 0."))
            (spawned_split_num
               int
               (help
                  "which split #, starting at 0.")))
         (help
            "Called right after an entity is spawned, providing which generation #, which split #,  and the entity itself"))
      (on_spawn_generation_requested
         (editor
            (requester_gen_num
               int
               (help
                  "which generation # triggering the spawn, starting at 0."))
            (requester_split_num
               int
               (help
                  "which split #, starting at 0."))
            (requested_gen_num
               int
               (help
                  "The requested generation num")))
         (help
            "Called when an entity requests spawning a generation with the spawn_generation command.  This does NOT guaruntee a generation will spawn if this is the last generation, but a signal that a request was made."))
      (on_transformed_generation
         (editor
            (transformed_entity
               object
               (class Entity)
               (components
                  (EntityTransformerCom))
               (help
                  "the entity that was just transformed"))
            (transformed_gen_num
               int
               (help
                  "the generation # of the entity that transformed, starting at 0"))
            (transformed_split_num
               int
               (help
                  "the original split # of the entity that transformed, starting at 0")))
         (help
            "Called right after an entity is transformed, providing which generation #, which split #,  and the entity itself"))))
(ScreenDistProximityGroup
   (description
      "Tracks a bunch of entities with ScreenDistProximityComs on them and communicates when they are close in screenspace.  For perspective puzzles...")
   (allowed_dirs Scene Entity)
   (ext grp)
   (superclasses Poll)
   (editor
      (items_to_track
         (array
            object
            (class Object)
            (components
               (ScreenDistProximityCom)))
         (alias
            "Tracked Items")
         (help
            "Entities/Transes with a ScreenDistProximityComs on them, to track for screenspace proximity"))
      (activation_screen_thresh
         float
         (range 0.0 1.0)
         (slider)
         (alias
            "Activation Thresh")
         (help
            "0..1, An entity is 'activated' when it gets within this screen distance away")))
   (events_in)
   (events_out))
(ChordWatcher
   (description
      "Component that forwards MIDI chord and scale events back to Wwise")
   (allowed_dirs Scene Entity)
   (ext wat)
   (superclasses AxeVirtualHarmonyProvider)
   (editor
      (sound
         object
         (class Sound)
         (help
            "The name of the sound to get data from"))
      (track_name
         string
         (alias
            "track name")
         (help
            "Name of the track with axe data"))
      (scale_degree_prop
         prop_ref
         (alias
            "scale degree property")
         (fixed_obj wwise_globals)
         (allowed_prop_types
            (symbol))
         (allow_read_only_props FALSE)
         (require_complete_ref FALSE))
      (scale_quality_prop
         prop_ref
         (alias
            "scale quality property")
         (fixed_obj wwise_globals)
         (allowed_prop_types
            (symbol))
         (allow_read_only_props FALSE)
         (require_complete_ref FALSE))
      (chord_degree_prop
         prop_ref
         (alias
            "chord degree property")
         (fixed_obj wwise_globals)
         (allowed_prop_types
            (symbol))
         (allow_read_only_props FALSE)
         (require_complete_ref FALSE))
      (chord_quality_prop
         prop_ref
         (alias
            "chord quality property")
         (fixed_obj wwise_globals)
         (allowed_prop_types
            (symbol))
         (allow_read_only_props FALSE)
         (require_complete_ref FALSE))))
(DiscoveryInput
   (description
      "The global discovery input object that lives in ObjectDir::Main(); used to communicate input state to the Discovery scene.")
   (allowed_dirs)
   (functest no_test)
   (editor
      (is_tracking_skeleton
         bool
         (help
            "True if a player's skeleton is being tracked, false otherwise."))
      (active_skeleton
         int
         (help
            "The last skeleton being actively tracked."))
      (left_hand_zoom_out_primed
         bool
         (default FALSE)
         (help
            "True if the left hand is in the zoom out primed position, false otherwise"))
      (right_hand_zoom_out_primed
         bool
         (default FALSE)
         (help
            "True if the right hand is in the zoom out primed position, false otherwise"))
      (zoom_out_primed
         bool
         (default FALSE))
      (zoom_out_engaged
         bool
         (default FALSE))
      (zoom_progress
         float
         (default 0.0))
      (zoom_out_progress
         float
         (default 0.0))
      (camera_lr
         float
         (default 0.5))
      (camera_lr_raw
         float
         (default 0.5))
      (camera_forward_raw
         float
         (read_only TRUE)
         (help
            "The distance from the player to the camera, in real-world meters."))
      (manipulator_engage_progress
         float
         (default 0.0)
         (help
            "The progress towards engaging a manipulator."))
      (manipulator_return
         bool
         (default FALSE))
      (is_cursor_off_screen
         bool
         (default FALSE)
         (help
            "True if the cursor is off-screen, false otherwise."))
      (cursor_x
         float
         (default 0.5)
         (help
            "The cursor's x, from 0 to 1"))
      (cursor_y
         float
         (default 0.5)
         (help
            "The cursor's y, from 0 to 1"))
      (cursor_z
         float
         (default 0.5)
         (help
            "The cursor's z, from 0 to 1"))
      (left_hand_down
         bool
         (help
            "True if the left hand is down, false if it's up."))
      (left_hand_x
         float
         (read_only TRUE)
         (default 0.5)
         (help
            "The left hand's x, from 0 to 1"))
      (left_hand_y
         float
         (read_only TRUE)
         (default 0.5)
         (help
            "The left hand's y, from 0 to 1"))
      (left_hand_z
         float
         (read_only TRUE)
         (default 0.5)
         (help
            "The left hand's z, from 0 to 1"))
      (right_hand_down
         bool
         (help
            "True if the right hand is down, false if it's up."))
      (right_hand_x
         float
         (read_only TRUE)
         (default 0.5)
         (help
            "The right hand's x, from 0 to 1"))
      (right_hand_y
         float
         (read_only TRUE)
         (default 0.5)
         (help
            "The right hand's y, from 0 to 1"))
      (right_hand_z
         float
         (read_only TRUE)
         (default 0.5)
         (help
            "The right hand's z, from 0 to 1"))
      (in_dual_hand_mode
         bool
         (read_only TRUE)
         (default FALSE)
         (help
            "Are both hands up right now? (this is what's used to warn player to use one hand only)"))
      (hand_separation_distance
         float
         (read_only TRUE)
         (default 0.0)
         (help
            "Distance between the hands."))
      (zoom_in_engage_progress
         float
         (read_only TRUE)
         (default 0.0)
         (help
            "How close the player is to engaging a zoom-in."))
      (handedness
         int
         (list SKELETON_HANDS)
         (help
            "Righty or lefty?"))
      (left_hand_conductor_mode_primed
         bool
         (default FALSE)
         (help
            "True if the left hand is in the Conductor Mode primed position, false otherwise."))
      (right_hand_conductor_mode_primed
         bool
         (default FALSE)
         (help
            "True if the right hand is in the Conductor Mode primed position, false otherwise."))
      (conductor_mode_primed
         bool
         (default FALSE)
         (help
            "True if Conductor Mode is currently primed, false otherwise."))
      (conductor_mode_engaged
         bool
         (default FALSE)
         (help
            "True if Conductor Mode is currently engaged, false otherwise."))
      (gamepad_mix_switch_velocity
         float
         (range -1.0 1.0)
         (help
            "The mix switch velocity that's driven by the gamepad. NOTE: This is not the actual velocity when the player is using a Kinect, only when they're using a gamepad to test.")))
   (events_in
      (trigger_engage)
      (trigger_zoom_out_engage)
      (trigger_disengage)
      (trigger_activate)
      (trigger_cursor_dropped)
      (trigger_cursor_raised)))
(ClickTrack
   (description
      "Metronome that plays a sampler note every beat")
   (allowed_dirs Scene Entity UIScreen)
   (superclasses Poll)
   (editor
      (mute
         bool
         (no_test)
         (history FALSE))
      (sampler
         object
         (class FusionSampler))
      (downbeat_note
         int
         (help
            "Pitch to play on first note of measure"))
      (downbeat_velocity
         int
         (help
            "Velocity to play on first note of measure"))
      (beat_note
         int
         (help
            "Pitch to play on other beats"))
      (beat_velocity
         int
         (help
            "Velocity to play on other beats"))))
(QuantizedRecorder
   (description
      "Used to record an x&y input at a provided musical quantization")
   (allowed_dirs Scene Entity)
   (superclasses Poll)
   (editor
      (enabled
         bool
         (help
            "Are we polling?"))
      (state
         int
         (list QUANTIZEDRECORDER_STATES)
         (no_test serialize))
      (measures_per_loop
         int
         (range 1 16)
         (help
            "How many measures do we record?"))
      (beats_per_measure
         int
         (help
            "How many beats per loop do we have?"))
      (num_x_slots
         int
         (help
            "How many discrete x slots do we have?"))
      (num_y_slots
         int
         (help
            "How many discrete y slots do we have?"))
      (slot_hysteresis_amount
         float
         (range 0.0 0.5)
         (slider)
         (help
            "How much do we want to prevent hopping back and forth between slots on a slot boundary?"))
      (quantize_during_recording
         bool
         (help
            "Do we quantize when recording, or play notes on every quantum?"))
      (input_x
         float
         (no_test serialize)
         (help
            "What is the input x value?"))
      (input_y
         float
         (no_test serialize)
         (help
            "What is the input y value?"))
      (input_on
         bool
         (no_test serialize)
         (help
            "Is our input engaging right now?"))
      ('Recorded output'
         (indent
            (fine_x_slot
               int
               (read_only TRUE)
               (alias
                  "x slot")
               (help
                  "What is our non-quantized x slot?"))
            (fine_y_slot
               int
               (read_only TRUE)
               (alias
                  "y slot")
               (help
                  "What is our non-quantized y slot?"))
            (fine_output_x
               float
               (read_only TRUE)
               (alias
                  "x")
               (help
                  "What is the fine-resolution blended x value between this sample and the next"))
            (fine_output_y
               float
               (read_only TRUE)
               (alias
                  "y")
               (help
                  "What is the fine-resolution blended y value between this sample and the next"))
            (fine_output_on
               bool
               (read_only TRUE)
               (alias
                  "on")
               (help
                  "What is our non-quantized on state?"))))
      ('Quantized recorded output'
         (indent
            (output_x_slot
               int
               (read_only TRUE)
               (alias
                  "quantized x slot")
               (help
                  "Which x bucket did the last note fall in?"))
            (output_y_slot
               int
               (read_only TRUE)
               (alias
                  "quantized y slot")
               (help
                  "Which y bucket did the last note fall in?"))
            (output_x
               float
               (read_only TRUE)
               (alias
                  "quantized x")
               (help
                  "What is the output x value?"))
            (output_y
               float
               (read_only TRUE)
               (alias
                  "quantized y")
               (help
                  "What is the output y value?"))
            (output_on
               bool
               (read_only TRUE)
               (alias
                  "quantized on")
               (help
                  "Was the output engaged at this sample?"))))
      (speed
         float
         (read_only TRUE)
         (help
            "How fast is the QR output moving? (units/second)"))
      (loop_progress
         float
         (read_only TRUE)
         (range 0.0 1.0)
         (slider)
         (help
            "How far are we through our loop?"))
      ('Audio Outputs'
         (indent
            (audio_output_type
               int
               (list QUANTIZEDRECORDER_AUDIOOUTPUTTYPES)
               (help
                  "What audio output mode are we in?"))
            (sampler
               object
               (class FusionSampler)
               (help
                  "What sampler do we use for playback?"))
            (channel
               int
               (range 0 15)
               (help
                  "Which sampler channel do we use?"))
            (note_playback_trigger
               int
               (list QUANTIZEDRECORDER_NOTEPLAYBACKTRIGGER)
               (help
                  "What determines when we play notes?"))
            (use_mode_data
               bool
               (help
                  "If true, notes will be selected using the mode data below, otherwise we pass the slot # directly to the sampler"))
            (mode_root
               symbol
               (list
                  {$this get_pitch_names})
               (help
                  "What is the root of our current mode?")
               (hide
                  {!=
                     [audio_output_type]
                     kQuantizedRec_SingleNotes})
               (read_only
                  {!
                     [use_mode_data]}))
            (mode
               symbol
               (list
                  {$this get_mode_names})
               (help
                  "What is our current mode?")
               (hide
                  {!=
                     [audio_output_type]
                     kQuantizedRec_SingleNotes})
               (read_only
                  {!
                     [use_mode_data]}))
            (chord_root
               symbol
               (list
                  {$this get_pitch_names})
               (help
                  "What is the root of our current chord?")
               (hide
                  {!=
                     [audio_output_type]
                     kQuantizedRec_Chords})
               (read_only
                  {!
                     [use_mode_data]}))
            (chord
               symbol
               (list
                  {$this get_chord_names})
               (help
                  "What is our current chord?")
               (hide
                  {!=
                     [audio_output_type]
                     kQuantizedRec_Chords})
               (read_only
                  {!
                     [use_mode_data]}))
            (chord_step
               int
               (help
                  "How many chord notes do we jump per slot as we play with the QR?")
               (hide
                  {!=
                     [audio_output_type]
                     kQuantizedRec_Chords}
                  (read_only
                     {!
                        [use_mode_data]}))
               (range 1 4))
            (chord_mask
               (indent
                  (chord_mask_1 bool)
                  (chord_mask_2 bool)
                  (chord_mask_3 bool)
                  (chord_mask_4 bool))
               (hide
                  {!=
                     [audio_output_type]
                     kQuantizedRec_Chords}
                  (read_only
                     {!
                        [use_mode_data]})))
            (base_note
               int
               (help
                  "Which midi note do we start from in slot 0?")
               (read_only
                  {!
                     [use_mode_data]})
               (range 0 127))
            (retrigger_delay
               float
               (help
                  "How long do we force a wait between notes? (seconds)"))
            (allow_repeat_notes
               bool
               (help
                  "Do we allow the same note to be played twice in a row?"))
            (require_slot_change_for_midi_playback
               bool
               (help
                  "When doing midi playback, do we require you to change slot to keep playing?"))
            (beats_to_play_after_slot_change
               float
               (help
                  "How many beats to we play after changing slot?")
               (read_only
                  {'||'
                     {==
                        [require_slot_change_for_midi_playback]
                        FALSE}
                     {==
                        [use_note_pitch]
                        FALSE}}))
            (note_set_midi
               file
               (ext
                  "MIDI Files"
                  "mid")
               (instance_prop)
               (help
                  "Note set for chord following that follows the song timeline. If this is used, the other note data (base note, mode, etc) specified in Audio Outputs will be ignored."))
            (reload_midi
               script
               (script
                  {$this reload_midi})
               (no_test)
               (instance_prop))
            (debug_print_notes
               bool
               (no_test)
               (help
                  "Do we print the notes we play to the console? For testing."))))
      ('Visual Outputs'
         (indent
            (waypoint_ribbon
               object
               (class WaypointRibbon)
               (help
                  "A ribbon object that connects our beacons")))))
   (events_in
      (clear_recording))
   (events_out
      (play_recorded_note)
      (slots_updated)
      (on_quantum)
      (play_midi_note
         (editor
            (qr_midi_note_num int)))))
(MidiXYPlayer
   (description
      "Used to play tracks in a midi file, with track choice made in an XY grid")
   (allowed_dirs Scene Entity UIScreen)
   (superclasses Poll)
   (editor
      (mute
         bool
         (no_test)
         (history FALSE))
      (input_x
         int
         (no_test)
         (history FALSE))
      (input_y
         int
         (no_test)
         (history FALSE))
      (num_x_slots
         int
         (help
            "Number of X slots in range"))
      (sampler
         object
         (class FusionSampler))
      (midi
         file
         (ext
            "MIDI Files"
            "mid"))
      (reload_midi
         script
         (script
            {$this reload_midi})
         (no_test))
      (advanced_mode
         bool
         (help
            "Advanced mode uses a different midi spec to allow you to use positional history to do slides and neat stuff like that"))
      (rhythm_note
         int
         (range -1 127)
         (help
            "Midi note that is only used to broadcast out and show the rhythm of a complex patch, -1 = none"))))
(RecordPlayMgr
   (description
      "Manages record/play state for UI overlay in manipulators and discovery nodes")
   (superclasses Object)
   (editor
      (recording_state
         int
         (list DISCOVERY_RECORDABLE_STATES)
         (no_test serialize))
      (sampler
         object
         (class FusionSampler)
         (help
            "Current Fusion sampler to show the output of")
         (no_test serialize))
      (num_bars
         int
         (help
            "Number of measures in current recording")
         (no_test serialize))
      (record_start_bar
         int
         (help
            "Bar that recording should use as a reference point for the start")
         (no_test serialize))
      (commit_progress
         float
         (read_only TRUE)
         (range 0.0 1.0)
         (slider)
         (no_test serialize))
      (recording_locked
         bool
         (read_only TRUE))
      (unlock_progress
         float
         (read_only TRUE)
         (range 0.0 1.0)
         (slider)
         (no_test serialize)
         (help
            "Once locked, this is progress towards unlocking when player raises hand again, for discovery."))
      (displayed_recording_player
         int
         (list
            (0 1))
         (read_only TRUE))
      (is_multiplayer
         bool
         (read_only TRUE)))
   (events_in
      (clear_samplers
         (help
            "Clear the list of samplers"))
      (add_sampler
         (editor
            (sampler
               object
               (class FusionSampler)))
         (help
            "Add a sampler to the list")))
   (events_out
      (recording_committed
         (help
            "Sent out when recording is finalized"))))
(MidiClipPlayer
   (description
      "Used to play tracks in a midi file, with track choice made in an XY grid")
   (allowed_dirs Scene Entity UIScreen)
   (superclasses Poll)
   (editor
      (mute
         bool
         (no_test)
         (history FALSE))
      (num_slots
         int
         (help
            "Number of slots in range")
         (read_only TRUE))
      (sampler
         object
         (class FusionSampler))
      (channel
         int
         (help
            "FusionSampler channel to play on"))
      (transposer
         object
         (class Transposer)
         (help
            "Transpose notes in pattern to a target key/scale (optional)"))
      (midi
         file
         (ext
            "MIDI Files"
            "mid"))
      (reload_midi
         script
         (script
            {$this reload_midi})
         (no_test)))
   (events_in
      (start_clip
         (editor
            (clip
               int
               (help
                  "Which clip to play")
               (range 0 48))
            (start_tick
               int
               (default -1)
               (help
                  "Tick to start playback at. -1 to use current tick.")))
         (help
            "Start a MIDI clip"))))
(ParallelSampleLooper
   (description
      "Used to effectively play a bunch of samples in parallel and choose which one you can hear, for faking a vocoder effect")
   (allowed_dirs Scene Entity)
   (superclasses Poll)
   (editor
      (mute
         bool
         (no_test)
         (history FALSE))
      (note
         int
         (no_test)
         (history FALSE))
      (sampler
         object
         (class FusionSampler))
      (num_bars
         int
         (help
            "Number of measures this sample spans"))
      (channel
         int
         (help
            "Which channel in the sampler should we play?"))
      (slice_ordering
         (array int)
         (help
            "Used to subdivide and reshuffle samples"))
      ('Slice Data'
         (indent
            (slice_idx
               int
               (help
                  "Which slice are we on?")
               (read_only TRUE))
            (slice_progress
               float
               (help
                  "How far are we through our current slice?")
               (range 0.0 1.0)
               (slider)
               (read_only TRUE))
            (remapped_slice_idx
               int
               (help
                  "Which slice are we actually playing?")
               (read_only TRUE))
            (sample_progress
               float
               (help
                  "How far are we through our current sample?")
               (range 0.0 1.0)
               (slider)
               (read_only TRUE))
            (remapped_sample_progress
               float
               (help
                  "How far are we through our current sample?")
               (range 0.0 1.0)
               (slider)
               (read_only TRUE)))
         (hide
            {==
               {size
                  [slice_ordering]}
               0}))))
(FusionSamplerTextureWriter
   (description
      "Writes audio output from a FusionSampler into a 512x8 texture")
   (allowed_dirs Scene Entity UIScreen)
   (superclasses Poll)
   (editor
      (enabled
         bool
         (no_test)
         (history FALSE))
      (sampler
         object
         (class FusionSampler))
      (tex
         object
         (class Tex)
         (help
            "A 512x8 texture"))
      (num_bars
         int
         (help
            "Number of measures to show"))
      (gain
         float
         (help
            "Multiplier to make audio more visible"))
      (scrolling bool)
      (use_recplaymgr_samplers
         bool
         (help
            "Use the samplers that are set in record_play_mgr rather than the sampler specified here"))
      (recorder_pos
         float
         (read_only TRUE))
      (write_output
         bool
         (help
            "Set this to false to stop writing to the texture")
         (no_test serialize))
      (auto_gain
         bool
         (help
            "Automatically adjust gain based on input"))
      (input_override
         float
         (range 0.0 1.0)
         (help
            "Use this value as input instead of the audio level from the sampler. Runtime property only, unsaved.")
         (history FALSE)
         (no_test serialize))
      (use_input_override
         bool
         (help
            "Use input_override. Ignores input from other sources, ignores auto-gain, sets gain to 1. Runtime property only, unsaved.")
         (history FALSE)
         (no_test serialize)))
   (events_in
      (clear_texture
         (help
            "Clears texture and audio data history to all zero"))))
(CatchLane
   (description
      "Represents a lane in the 'Space Catch' interaction")
   (allowed_dirs Scene Entity)
   (superclasses Poll)
   (ext lane)
   (editor
      (enabled
         bool
         (help
            "Is this lane enabled? "))
      (can_capture
         bool
         (no_test)
         (help
            "Is the player in front of this lane? Notes will be captured when this is true. not saved..."))
      (midi_file
         file
         (help
            "MIDI file to load pattern from"))
      (midi_track_idx
         int
         (help
            "Index of MIDI track to load pattern from, starting at 0"))
      (num_midi_tracks
         int
         (read_only TRUE)
         (no_test)
         (help
            "How many tracks does the MIDI file we loaded have?"))
      (note_pattern
         string
         (hide
            {>
               [num_midi_tracks]
               0})
         (help
            "The note pattern to play.  If no sampler: Each letter is tick_per_note in length, and O means silence and X means note. if we have a sampler, its midi note numbers separated by dashes with non-numbers being silence.  You can use '|' anywhere to separate things visually.  Chords can also be specified by separating note numbers by '*' characters"))
      (debug_name_pattern
         string
         (no_test)
         (hide
            {>
               [num_midi_tracks]
               0})
         (help
            "Just converts note_pattern midi #'s to note names for convenience"))
      (ticks_per_note
         int
         (help
            "How many ticks does each note in the pattern represent (examples: 120 = 16th note, 240 = 8th note, 480 =  quarter note"))
      (loop_beats
         float
         (help
            "Loop this pattern, every time this many beats elapses"))
      (sampler
         object
         (class FusionSampler)
         (help
            "The sampler to play notes to"))
      (sampler_channel
         int
         (help
            "Channel to communicate with sampler on"))
      (transposer
         object
         (class Transposer)
         (help
            "Transpose notes in pattern to a target key/scale (optional)"))
      (beats_on_lane
         float
         (help
            "how many beats do we show notes on the lane in advance of when they should be caught?"))
      (chord_mode
         int
         (list CATCHLANE_CHORD_MODES)
         (help
            "How to we play back chords?"))
      (sync_with_local_time
         bool
         (help
            "Do we sync with local or global beat time?  Should probably be true unless your pattern is LONGER than your backing loop.  Will cause bugs otherwise..."))
      ('Track Lock Inputs'
         (indent
            (enable_lane_locking
               bool
               (help
                  "Is lane locking system enabled?"))
            (show_pattern_during_lock
               bool
               (help
                  "Is the pattern still shown on the track when its locked?"))
            (pattern_pct_to_lock
               float
               (help
                  "Percent of the # of notes in the pattern you need to catch to lock. used to calculate 'credit' per catch. 1.0 would mean a pull pattern worth of notes needs to be caught to lock."))
            (miss_penalty_mult
               float
               (range 0.0 1.0)
               (slider)
               (help
                  "0 to 1, how much do we penalize for misses.  this is a percentage of the 'credit' you normally get for a catch"))
            (stay_locked_amount
               float
               (help
                  "How long do we stay locked?  this is expressed at a percent of the LONGEST beat gap in the current pattern. 1.25 is the default, giving you 25% more time than the longest gap in the authoring before it unlocks."))
            (lock_decay
               float
               (range 0.0 1.0)
               (slider)
               (help
                  "0 to 1, a steady decay of energy when we're NOT yet locked"))
            (freeze_lock
               bool
               (no_test)
               (help
                  "freeze ourselves in the locked state.  Not saved..."))))
      ('Track Lock Outputs'
         (indent
            (is_lane_locked
               bool
               (no_test)
               (help
                  "Is this lane locked?"))
            (lock_progress
               float
               (range 0.0 1.0)
               (slider)
               (no_test)
               (help
                  "0 to 1, progress towards locking the lane.  will be locked when it reaches 1.0"))
            (unlock_progress
               float
               (range 0.0 1.0)
               (slider)
               (no_test)
               (help
                  "0 to 1, how close to unlocking we are.  Will be unlocked when it reaches 1.0"))))
      (note_pool
         object
         (class EntityPool)
         (help
            "The entity pool to spawn notes from"))
      (special_pool
         object
         (class EntityPool)
         (help
            "the entity pool to spawn special notes from"))
      (special_probability
         float
         (range 0.0 1.0)
         (slider)
         (help
            "0 to 1, the probability of spawning a special gem"))
      (lane_start
         object
         (class Trans)
         (help
            "The starting position of this lane"))
      (lane_end
         object
         (class Trans)
         (help
            "The ending position of this lane"))
      (num_notes_in_pattern
         int
         (read_only TRUE)
         (no_test)
         (help
            "How many notes are there in the current pattern?"))
      (num_caught_this_loop
         int
         (read_only TRUE)
         (no_test)
         (help
            "How many notes were caught this loop of the pattern?"))
      (loop_counter
         int
         (read_only TRUE)
         (no_test)
         (help
            "Counts up each time the pattern loops around, to reset some gameplay state?")))
   (events_in
      (force_lock
         (help
            "Force track to lock"))
      (force_unlock
         (help
            "Force track to unlock if its locked"))
      (force_clear_notes
         (help
            "force any notes on the track to clear"))
      (force_reset_everything
         (help
            "unlocks track, clears notes, sets energy to 0")))
   (events_out
      (on_note_caught
         (editor
            (note_caught_num
               int
               (default 1)
               (help
                  "which note number in the pattern was just caught, starting at 1.")))
         (help
            "called when note is caught"))
      (on_special_caught
         (editor
            (note_caught_num
               int
               (default 1)
               (help
                  "which note number in the pattern was just caught, starting at 1.")))
         (help
            "called when a special note is caught"))
      (on_note_missed
         (help
            "called when note is missed"))
      (on_pattern_looped
         (help
            "called when we loop around on a pattern"))
      (on_caught_all_notes
         (help
            "called if you catch all the notes in one loop for the current pattern"))
      (on_lane_locked
         (help
            "Lane was just locked"))
      (on_lane_unlocked
         (help
            "Lane was just unlocked"))))
(CatchLaneRecorder
   (description
      "Recording functionality for a series of CatchLanes - for Space Catch node")
   (allowed_dirs Scene Entity)
   (superclasses Poll)
   (ext rec)
   (editor
      (lanes_to_record
         (array
            object
            (class Object)
            (components
               (CatchLaneRecordableCom)))
         (help
            "Which lanes are we recording?"))
      (record_state
         int
         (list DISCOVERY_RECORDABLE_STATES)
         (help
            "State of the recorder"))
      (record_window_size
         float
         (help
            "Size of the recording, in beats"))
      (playback_speed
         float
         (range 0.25 8.0)
         (slider)
         (help
            "Increase/decrease playback speed of recording"))
      (recording_has_data
         bool
         (read_only TRUE)
         (no_test)
         (help
            "Do we have any data recorded?")))
   (events_in
      (clear_recording
         (help
            "Clear any existing recording data")))
   (events_out
      (on_recorded_event_played
         (editor
            (played_lane
               object
               (class CatchLane)
               (help
                  "Lane event just played on"))
            (played_lane_idx
               int
               (help
                  "Index of lane in this recorders list of lanes")))
         (help
            "Recorded event just played back on the given lane"))))
(NonCampaignVoiceOverMgr
   (description
      "Triggers the non-campaign voice-over clips.")
   (allowed_dirs Scene)
   (superclasses Poll)
   (editor
      (is_player_idle
         bool
         (no_test serialize)
         (help
            "True if the player is currently idle, false otherwise. The idle voice-over timers only accumulate when this is true."))
      (min_cooldown_time
         float
         (help
            "The minimum amount of time, in seconds, that must elapse between voice-overs triggered by the player being idle."))
      (max_cooldown_time
         float
         (help
            "The maximum amount of time, in seconds, that can elapse between voice-overs triggered by the player being idle."))
      (idle_trigger_time
         float
         (help
            "The amount of time, in seconds, that the player must be idle to trigger idle voice-overs."))
      (auto_generate_ncvo_propanims
         script
         (script
            {$this auto_generate_ncvo_propanims})
         (no_test)
         (custom_history)
         (help
            "Auto-generates the NCVO PropAnims based on the dialogue DTA, and updates any existing NCVO PropAnims.")))
   (events_in
      (trigger_voice_over
         (help
            "Triggers a voice-over clip from the available pool."))))
(PlayerProgression
   (description
      "Keeps track of the player's overall game progression (see progression_states.dta).")
   (user_creatable FALSE)
   (functest no_test)
   (editor
      (state_idx
         int
         (list PLAYER_PROGRESSION_STATES)
         (read_only TRUE)
         (help
            "The index of the player's current progression state."))
      (state_sym
         symbol
         (read_only TRUE)
         (help
            "The symbol of the player's current progression state."))
      (bump_state
         script
         (script
            {$this bump})))
   (events_in
      (update
         (help
            "Temporary event to force the state to update."))
      (bump
         (help
            "Bump progression state to the next."))))
(DiscoveryCameraCoordinator
   (description
      "Coordinates common Discovery scene camera logic (i.e. intro/outro camera, restoring camera node after Pulse, etc.).")
   (allowed_dirs Scene))
(DialogPromptMgr
   (description
      "Manages communication with the dialog prompt screen.")
   (events_in
      (cancel_open_dialog
         (help
            "Cancels a dialog if there is one open. No effect if there is not any open."))))
(DiscoveryFactoryBotMgr
   (description
      "Manages and configures the factory bot AIs")
   (allowed_dirs Scene)
   (ext botmgr)
   (superclasses Object)
   (editor
      (spawn_bot
         script
         (script
            {$this spawn_bot})
         (no_test))
      (recall_bot
         script
         (script
            {$this recall_bot})
         (no_test))
      (reset_bots
         script
         (script
            {$this reset_bots})
         (no_test))
      (place_bots_at_red_machine
         script
         (script
            {$this place_bots_at_red_machine})
         (no_test))
      (place_bots_at_blue_machine
         script
         (script
            {$this place_bots_at_blue_machine})
         (no_test))
      (place_bots_at_yellow_machine
         script
         (script
            {$this place_bots_at_yellow_machine})
         (no_test))
      (place_bots_on_hub
         script
         (script
            {$this place_bots_on_hub 5})
         (no_test))
      (bot_pool
         object
         (class EntityPool))
      (enter_spline
         object
         (class Spline))
      (exit_spline
         object
         (class Spline))
      (hub_spline
         object
         (class Spline))
      (hub_enter_parameter float)
      (hub_exit_parameter float)
      (path_branches
         (array
            (struct
               (spline
                  object
                  (class Spline))
               (hub_to_path_param float)
               (path_to_hub_param float)
               (repairable
                  object
                  (class Entity))
               (attempt_but_fail_to_repair bool)
               (repair_targets
                  (array
                     (struct
                        (target
                           object
                           (class Trans))
                        (path_param float)))))
            (header
               {do
                  ($num 0)
                  {set
                     $num
                     {elem $editor_prop_path 1}}
                  {if_else
                     {== $num 0}
                     "red"
                     {if_else
                        {== $num 1}
                        "yellow"
                        {if_else
                           {== $num 2}
                           "blue"
                           {if_else
                              {== $num 3}
                              "tiny red"
                              {if_else
                                 {== $num 4}
                                 "tiny yellow"
                                 "tiny blue"}}}}}}))
         (fixed_size TRUE))
      (all_robots_uncolored
         bool
         (help
            "Are all of the robots uncolored?")
         (read_only TRUE))
      (color_picker_selection
         int
         (list FACTORY_ROBOT_TYPES)
         (help
            "What color is the color picker now?")
         (no_test serialize)))
   (events_in
      (spawn_bot)
      (recall_bot)
      (recall_bot_from_main_spline)
      (reset_bots)
      (place_bots_at_red_machine)
      (place_bots_at_blue_machine)
      (place_bots_at_yellow_machine)
      (place_bots_on_hub
         (editor
            (num_bots int)))))
(DiscoveryKinectSettings
   (description
      "Holds all global Discovery Kinect settings.")
   (allowed_dirs Scene UIScreen)
   (editor
      ('Hand Frame'
         (indent
            ('Xbox 360'
               (indent
                  (xbox_hand_frame_width
                     float
                     (help
                        "The width of the hand frames on the Xbox360, in hand frame units. (1 hand frame unit = distance from head to hip center)"))
                  (xbox_hand_frame_height
                     float
                     (help
                        "The height of the hand frames on the Xbox360, in hand frame units. (1 hand frame unit = distance from head to hip center)"))
                  (xbox_hand_frame_x_offset
                     float
                     (help
                        "The distance the left/right hand frames are offset towards their respective directions from the player's center on the Xbox360, in hand frame units. (1 hand frame unit = distance from head to hip center)"))
                  (xbox_hand_frame_y_offset
                     float
                     (help
                        "The distance the hand frames are offset down from the player's hip center joint on the Xbox360, in hand frame units. (1 hand frame unit = distance from head to hip center)"))))
            (Durango
               (indent
                  (durango_hand_frame_width
                     float
                     (help
                        "The width of the hand frames on the Durango, in hand frame units. (1 hand frame unit = distance from head to spine base)"))
                  (durango_hand_frame_height
                     float
                     (help
                        "The height of the hand frames on the Durango, in hand frame units. (1 hand frame unit = distance from head to spine base)"))
                  (durango_hand_frame_x_offset
                     float
                     (help
                        "The distance the left/right hand frames are offset towards their respective directions from the player's center on the Durango, in hand frame units. (1 hand frame unit = distance from head to spine base)"))
                  (durango_hand_frame_y_offset
                     float
                     (help
                        "The distance the hand frames are offset down from the player's spine base joint on the Durango, in hand frame units. (1 hand frame unit = distance from head to spine base)"))))))
      (Smoothing
         (indent
            (hand_smooth_s
               float
               (help
                  "The position smoothing coefficient used to smooth the player's hand position in hand frame space."))
            (hand_smooth_t
               float
               (help
                  "The trend smoothing coefficient used to smooth the player's predicted hand velocity in hand frame space."))
            (hand_depth_smoothing_s
               float
               (help
                  "The depth smoothing coefficient used to smooth the player's predicted hand depth in hand frame space."))
            (hand_depth_smoothing_t
               float
               (help
                  "The depth trend smoothing coefficient used to smooth the player's predicted hand depth in hand frame space."))))
      (Playspace
         (indent
            (playspace_position_joint
               int
               (list PLAYSPACE_POSITION_JOINT_ENUM)
               (help
                  "The skeleton joint used to determine the player's position in the playspace."))
            (is_playspace_trapezoidal
               bool
               (help
                  "True if the playspace is mapped to a trapezoidal space where left/right range decreases as you near the camera, false if it's mapped to a rectangular space."))
            (playspace_left_right_smooth_s
               float
               (help
                  "The smoothing coefficient used to smooth the player's left-right position."))
            (playspace_easing_function
               waveform_float
               (help
                  "Mirrored 0-1 mapping of half the playspace. Used to smooth player movement at edges.")
               (allowed_types kWaveformCurve)
               (range 0.0 1.0))
            (playspace_stillness_end_ramp_seconds
               float
               (help
                  "When the player starts moving after being still, we use extra smoothing for this long to smooth the transition."))
            (playspace_stillness_end_smoothing
               float
               (help
                  "After stillness ends, we remain this smooth for a while to smooth the transition to moving."))
            (playspace_stillness_radius
               float
               (help
                  "If the player moves beyond this distance, they are no longer considered still."))
            (playspace_stillness_begin_seconds
               float
               (help
                  "This is how long the player must remain in place before we call them still."))
            (min_playspace_left_right
               float
               (help
                  "The distance, in real-world meters, that maps to a playspace left-right position of 0."))
            (max_playspace_left_right
               float
               (help
                  "The distance, in real-world meters, that maps to a playspace left-right position of 1."))
            (playspace_left_warning
               float
               (help
                  "The left-right distance, in real-world meters, at which the player is warned that they're too far left."))
            (playspace_right_warning
               float
               (help
                  "The left-right distance, in real-world meters, at which the player is warned that they're too far right."))
            (playspace_forward_warning
               float
               (help
                  "The distance from the camera, in real-world meters, at which the player is warned that they're too close."))
            (camera_forward_raw
               float
               (no_test)
               (help
                  "Set from code to be the player's position in depth."))))
      ('Cursor Position'
         (indent
            (depth_range_mappings
               PROPERTYRANGEMAPPER_STRUCT
               (help
                  "The mappings from the player's physical hand position to the cursor's in-game depth. The input is in normalized physical space, where 0.0 corresponds to the player's hand being flush with their body, and 1.0 represents the player's arm being fully extended in front of them."))
            (screen_margin
               float
               (help
                  "The margin inside the edges of the screen, in screenspace coordinates, that the cursor is considered out of bounds."))
            (hand_z_close_margin_min
               float
               (help
                  "If the hand is closer to the body (the z-axis) than this, we consider it 'down' and invalid for input.")
               (range 0.0 1.0))
            (hand_z_close_margin_max
               float
               (help
                  "If the hand moves further from the body (the z-axis) than this, we consider it 'up' and available for input.")
               (range 0.0 1.0))
            (hand_z_close_falloff_percentage
               float
               (help
                  "When the hand is this far past its shoulder (as a percentage of the shoulder width), we ignore the too close z value.")
               (range 0.0 1.0))
            (hand_to_screen_rotation_blend
               float
               (help
                  "How much we rotate a player's hands to have z-push be towards the camera (1.0) or perpendicular to the camera (0.0).")
               (range 0.0 1.0)
               (slider))
            (hand_switch_slop
               float
               (help
                  "How much more the non-cursor hand needs to be in front of the current cursor hand to take control of the cursor.")
               (range 0.0 1.0))
            (dual_hand_separation
               float
               (help
                  "If both hands are closer than this, we're in dual hand mode.")
               (range 0.0 1.0))
            (hand_noise_ratio_min
               float
               (help
                  "Noise values below this are ignored."))
            (hand_noise_decay
               float
               (help
                  "How the overall hand noise value decays. Higher means a slower decay. [0, 1).")
               (range 0.0 1.0))
            (hand_noise_min
               float
               (help
                  "When the overall noise is less than this, we do no additional smoothing."))
            (hand_noise_max
               float
               (help
                  "When the overal noise is greater than this, we do complete smoothing. Between this and min we ramp the smoothing."))
            (hand_noise_smoothing
               float
               (help
                  "How much we smooth the hand when most noisy. [0, 1).")
               (range 0.0 1.0))))
      (Gestures
         (indent
            (zoom_hand_drop_delay_seconds
               float
               (help
                  "The number of seconds a hand must be dropped before the zoom gesture disengages."))
            (zoom_hand_too_high_delay_seconds
               float
               (help
                  "The number of seconds a hand must be too high before the zoom gesture disengages."))
            (zoom_hands_engage_distance
               float
               (help
                  "How close the player's hands need to be to each other before the zoom gesture engages."))
            (zoom_hands_engage_progress_start_distance
               float
               (help
                  "Defines the start of the zoom progress animation. When hands are this close or further, progress = 0.0. As they get closer to zoom_hands_engage_distance, progress approaches 1.0."))
            (zoom_in_spring_inertia
               float
               (help
                  "How much inertia spreading the hands imparts on the zoom-in arrows. Bigger means they fly apart easier with less hand motion."))
            (zoom_in_spring_return
               float
               (help
                  "How quickly the zoom-in arrows return to the current position of the hands. Bigger means they come back together quicker, like a tighter spring."))
            (zoom_in_reject_spread_degrees
               float
               (help
                  "If the hands drop within this many degrees of straight down, they don't contribute at all to zoom-in progress."))))
      (Sitting
         (indent
            (sitting_lean_min_angle
               float
               (help
                  "While sitting and leaning, the minimum angle to start having an effect."))
            (sitting_lean_max_angle
               float
               (help
                  "While sitting and leaning, the maximum angle to have full effect."))
            (sitting_lean_change_per_second
               float
               (help
                  "While sitting and leaning, the speed of movement when at full lean angle."))))))
(FluxCutsceneStateMgr
   (description
      "A global object that tracks and exposes what cutscene should be played.")
   (editor
      (cutscene_to_play
         symbol
         (read_only TRUE)
         (list
            {$this get_flux_cutscenes})
         (help
            "The ID of the cutscene that should be played, or the empty symbol if no cutscene should currently be played.")))
   (events_in
      (mark_cutscene_custom_trigger_satisfied
         (editor
            (cutscene
               symbol
               (list
                  {[target]
                     get_flux_cutscenes})))
         (help
            "Marks the specified cutscene's custom trigger as satisfied."))
      (request_cutscene_played_state
         (editor
            (cutscene
               symbol
               (list
                  {[target]
                     get_flux_cutscenes})))
         (help
            "Requests the played state of the specified cutscene. Fires the cutscene_played_state_returned event to respond.")))
   (events_out
      (cutscene_played_state_returned
         (editor
            (cutscene
               symbol
               (list
                  {$this get_flux_cutscenes})
               (help
                  "The cutscene whose played state is being returned."))
            (was_played
               bool
               (help
                  "True if the cutscene has been played, false otherwise."))))))
(Transposer
   (description
      "Object for transposing notes specified in scale degrees to some target scale/chord. Targets scale/chord can come from any AxeHarmonyProvider like the chord watcher, or be explicitly set.")
   (superclasses Enterable)
   (allowed_dirs Scene Entity Character)
   (ext transpose)
   (editor
      ('Transpose From'
         (indent
            (input_note_type
               int
               (list TRANSPOSER_INPUT_NOTE_TYPES)
               (help
                  "How input notes are specified, either in scale degrees or a an explicit mode (scale/key)"))
            (input_mode_root
               symbol
               (list
                  {$this get_pitch_names})
               (hide
                  {!=
                     [input_note_type]
                     kInputNote_ExplicitMode})
               (help
                  "What is the root note of the mode our input notes are specified in?"))
            (input_mode
               symbol
               (list
                  {$this get_mode_names})
               (hide
                  {!=
                     [input_note_type]
                     kInputNote_ExplicitMode})
               (help
                  "What is the mode or our input notes?"))
            (input_base_octave
               int
               (range 0 12)
               (hide
                  {!=
                     [input_note_type]
                     kInputNote_ExplicitMode})
               (help
                  "starting at 0, the base octave # your input MIDI is written in.  Transposing will occur relative to the root note in this octave.  NO input notes are expected to be below this input octave"))
            (input_min_pitch
               int
               (read_only TRUE)
               (no_test)
               (hide
                  {!=
                     [input_note_type]
                     kInputNote_ExplicitMode})
               (help
                  "The minimum input MIDI pitch you can send through the transposer given the input_base_octave"))
            (input_note
               int
               (range 1 128)
               (hide
                  {==
                     [input_note_type]
                     kInputNote_ExplicitMode})
               (help
                  "starting at 1, a note expressed as a scale degree. To be converted to a MIDI note in the target mode. 1 would be the current root note, and 3 would be the 4th note in the current scale."))
            (input_note_midi
               int
               (range 0 127)
               (units
                  {midi_note_to_text
                     [input_note_midi]})
               (hide
                  {!=
                     [input_note_type]
                     kInputNote_ExplicitMode})
               (help
                  "midi note in input mode to transpose"))))
      ('Transpose To'
         (indent
            (target_base_octave
               int
               (range 0 12)
               (help
                  "starting at 0, the octave # to start generating notes from"))
            (target_harmony_provider
               object
               (class AxeVirtualHarmonyProvider)
               (help
                  "Source of target harmony we transpose to.  If not set, harmony can be set explicity with 'target_mode_root' and 'target_mode' properties."))
            (target_mode_root
               symbol
               (list
                  {$this get_pitch_names})
               (read_only
                  {!=
                     [target_harmony_provider]
                     ''})
               (help
                  "What is the root note of the mode we will transpose to."))
            (target_mode
               symbol
               (list
                  {$this get_mode_names})
               (read_only
                  {!=
                     [target_harmony_provider]
                     ''})
               (help
                  "What is the target mode we will transpose to?"))))
      (output_midi_note
         int
         (units
            {midi_note_to_text
               [output_midi_note]})
         (read_only TRUE)
         (no_test)
         (help
            "'input_note' transposed to a midi note"))
      ('Fusion Testing'
         (indent
            (test_fusion_channel
               object
               (class FusionChannel)
               (no_test)
               (help
                  "For testing purposes, a fusion channel to play output midi notes to"))
            (test_play_midi_note
               script
               (no_test)
               (script
                  {if
                     [test_fusion_channel]
                     {[test_fusion_channel]
                        note_on
                        [output_midi_note]
                        127}})
               (custom_history)
               (help
                  "For testing, sends output_midi_note to the test fusion channel"))))))
(DiscoveryNeighborhoodData
   (description
      "Stores data from a neighborhood.  Plug in to DiscoverySceneProgressionCom.")
   (allowed_dirs Scene Entity UIScreen)
   (superclasses Object)
   (ext neighborhood)
   (editor
      (neighborhood_state
         int
         (list NEIGHBORHOOD_STATES)
         (help
            "What is the state of this neighborhood?")
         (read_only TRUE))
      (a_switch_hit
         bool
         (help
            "Have we hit the a switch?  Same as neighborhood_state>=kNeighborhood_TransformationA (Phase 0)")
         (read_only TRUE))
      (b_switch_hit
         bool
         (help
            "Have we hit the b switch?  Same as neighborhood_state>=kNeighborhood_TransformationB")
         (read_only TRUE))
      (complete
         bool
         (help
            "Have we finished this neighborhood?  Same as neighborhood_state>=kNeighborhood_Complete")
         (read_only TRUE))))
(ClosestObjectFinder
   (description
      "Prototyping object that outputs closest target to a source trans")
   (allowed_dirs Scene Entity)
   (superclasses Poll)
   (ext close)
   (editor
      (source_trans
         object
         (class Trans)
         (alias
            "source"))
      (target_transs
         (array
            object
            (class Trans))
         (alias
            "targets"))
      (closest_target
         object
         (class Trans)
         (read_only TRUE))
      (closest_distance
         float
         (read_only TRUE))
      (closest_index
         int
         (read_only TRUE))))
(FluxTutorialScreenMgr
   (description
      "Manages displaying and passing configuration data to the tutorial screens.")
   (events_in
      (show_tutorial_screen
         (editor
            (tutorial_id
               symbol
               (list
                  {the_flux_tutorial_screen_mgr get_tutorial_ids})
               (help
                  "The ID of the tutorial to display.")))
         (help
            "Displays a tutorial screen for the tutorial with the specified ID."))
      (hide_tutorial_screen
         (editor
            (tutorial_id
               symbol
               (list
                  {the_flux_tutorial_screen_mgr get_tutorial_ids})
               (help
                  "The ID of the tutorial to hide.")))
         (help
            "Hides the active tutorial screen if it's for the specified tutorial."))
      (check_have_shown_tutorial
         (editor
            (tutorial_id
               symbol
               (list
                  {the_flux_tutorial_screen_mgr get_tutorial_ids})
               (help
                  "The ID of the tutorial to check.")))
         (help
            "Stores the result of if this tutorial has been seen in the have_shown_tutorial property.")))
   (editor
      (have_shown_tutorial
         bool
         (no_test)
         (help
            "Has the tutorial from the last call to check_have_shown_tutorial been seen yet?"))))
(FluxGlobalShaderParams
   (description
      "Global parameters for flux shader nodes")
   (allowed_dirs)
   (editor
      (world_select_curve_enabled
         bool
         (no_test serialize copy))
      (world_select_curve_pivot
         VECTOR3
         (no_test serialize copy))
      (world_select_curve_axis
         VECTOR3
         (no_test serialize copy))))
(CutsceneCharacter
   (description
      "A character that can load and unload its layers and banks based on the current cutscene")
   (category Character)
   (file_ext
      ".char")
   (superclasses Character)
   (editor
      (cutscene_configs
         (array
            (struct
               (cutscenes
                  (array
                     symbol
                     (list
                        {the_flux_cutscene_state_mgr get_flux_cutscenes}))
                  (help
                     "The cutscenes to set up loading for"))
               (layers
                  (array
                     file
                     (ext
                        "Animation Layers"
                        "layer"))
                  (help
                     "The clip layers to load for these cutscenes"))
               (banks
                  (array
                     symbol
                     (list
                        {audio_mgr get_soundbank_names}))
                  (help
                     "The sound banks to load for these cutscenes"))))
         (disk_prop))))
(WorkshopDir
   (description
      "A SceneDir that doesn't do anything interesting anymore")
   (file_ext
      ".scene")
   (superclasses Scene))
(DiscoveryRecorderGroup
   (description
      "A way to drive the states of several IDiscoveryRecordables together, for integration into DiscoveryNodeCom.")
   (superclasses Enterable)
   (allowed_dirs Scene Entity Character)
   (ext recgrp)
   (editor
      (recorders
         (array
            object
            (class Object))
         (help
            "Recorders to keep in sync"))
      (selected_recorder_mode
         bool
         (help
            "an optional mode that has the interaction define a 'selected' recorder, which is the only one that can be recording at once (others are playing back).  Used for HoverBand..."))
      (selected_recorder_idx
         int
         (hide
            {!
               [selected_recorder_mode]})
         (help
            "index of selected recorder, for use with special mode"))))
(PulseMgr
   (description
      "Global manager of Pulse state")
   (user_creatable FALSE)
   (editor
      (song
         symbol
         (list
            {song_mgr get_song_list TRUE})
         (help
            "The pulse song the player has chosen to play, is playing, or just played")
         (no_test))
      (mixes
         (array
            int
            (list FLUX_TARGET_MIXES_OPTIONAL))
         (help
            "Which mixes are in each slot"))
      (no_choice
         bool
         (help
            "Disable choice gestures"))
      (starting_slot
         int
         (list FLUX_TARGET_SLOTS)
         (help
            "Which slot to start on"))
      (slots_enabled
         bitfield
         (list FLUX_TARGET_SLOTS_ENABLED)
         (help
            "You must have at least 1 slot enabled"))
      (manipulators_enabled
         bitfield
         (list MANIPULATOR_TYPES_ENABLED)
         (help
            "Which manipulators are enabled"))
      (num_players
         int
         (range 1 2)
         (help
            "How many players? (1 or 2)"))
      (in_playback
         bool
         (help
            "Do we want to playback a recording instead of playing the song?"))
      (is_quickplay
         bool
         (help
            "Are we playing this song in quickplay?"))
      (in_pulse
         bool
         (help
            "Are we in a pulse screen?"))
      (use_songbuilder
         bool
         (read_only TRUE)
         (help
            "Should songbuilder be enabled?"))
      (has_seen_songbuilder
         int
         (list SONG_BUILDER_TUTORIAL_TYPES)
         (no_test)
         (help
            "Which songbuilder tutorials have we already played?"))
      (autoplay_mode
         int
         (list FLUX_AUTOPLAY_MODES))
      (choice_map
         (array
            (struct
               (focused_part_index int)
               (slots
                  (array
                     int
                     (list FLUX_TARGET_SLOTS_OPTIONAL)))))
         (read_only TRUE)
         (no_test))
      (current_goal
         int
         (range -1 3)
         (help
            "index of current goal"))))
(FluxLoadingMgr
   (description
      "Keeps track of all the levels, screens, and scenes to load")
   (user_creatable FALSE)
   (editor)
   (events_in
      (push_and_load_level
         (editor
            (level
               symbol
               (help
                  "The name of the level to load."))
            (level_ui_screen
               file
               (ext
                  "UI Screens"
                  "uiscreen")
               (help
                  "The UI screen to load for the level."))
            (level_scene
               file
               (ext
                  "Scenes"
                  "scene")
               (help
                  "The scene to load for the level.")))
         (help
            "Pushes the specified level onto the level stack and loads it."))
      (pop_and_load_level
         (help
            "Pops the top level off of the level stack, and loads the level underneath it."))
      (pop_level
         (help
            "Pops the top level off of the level stack."))))
(CustomPreloader
   (description
      "Used to specify objects to be preloaded for use during the time this object exists")
   (allowed_dirs Scene Entity UIScreen)
   (editor
      (entries
         (array
            (struct
               (objectdir_path
                  file
                  (help
                     "The path to the objectdir you want to preload")))))))
(DiscoveryLightingMgr
   (description
      "Manages discovery scene lighting")
   (superclasses Poll)
   (allowed_dirs Scene)
   (ext litman)
   (category Light)
   (editor
      (blender
         object
         (class PropertyBlender)
         (help
            "The scene's lighting property blender"))
      (scene_states
         (array
            symbol
            (list
               {if_else
                  [blender]
                  {[blender]
                     get_config_names}
                  ('')}))
         (fixed_size TRUE)
         (help
            "An ordered list of the scene's states.  We start at state 0, and go up a state every time we hit an A transformation target"))
      (ducked_state
         symbol
         (list
            {if_else
               [blender]
               {[blender]
                  get_config_names}
               ('')})
         (help
            "What is our ducked lighting state?"))
      (neighborhood_anims
         (array
            object
            (class PropAnim))
         (fixed_size TRUE)
         (help
            "A list of animations, one corresponding to each neighborhood in order.  The convention is, we are originally at frame 0, frame 1 after hitting A target, frame 2 after B target, frame 3 after mixswitch"))
      (neighborhood_blend_time
         float
         (help
            "How long do we ramp our neighborhood anims?"))
      (node_lighting
         (array
            (struct
               (node_object
                  object
                  (class Object)
                  (components
                     (DiscoveryNodeCom))
                  (help
                     "Which node is this for? Needs DiscoveryNodeCom"))
               (use_blender
                  bool
                  (help
                     "Are we using the scene's property blender?  If not, we'll just use an animation"))
               (blender_blend_time
                  float
                  (hide
                     {!
                        {$this
                           get
                           {editor_prop_path_sibling use_blender}}})
                  (help
                     "How long our blend take?  -1 for default"))
               (anim
                  object
                  (class PropAnim)
                  (hide
                     {$this
                        get
                        {editor_prop_path_sibling use_blender}})
                  (help
                     "We go to start frame when you're not in this node, and end frame when you are"))
               (anim_blend_time
                  float
                  (hide
                     {$this
                        get
                        {editor_prop_path_sibling use_blender}})
                  (help
                     "How long does it take to ramp this animation?"))
               (use_build_state_lighting
                  bool
                  (hide
                     {!
                        {$this
                           get
                           {editor_prop_path_sibling use_blender}}})
                  (help
                     "Do we want to modify the scene's lighting when in build state?  If not, use progression driven config"))
               (build_state_lighting
                  symbol
                  (list
                     {if_else
                        [blender]
                        {[blender]
                           get_config_names}
                        ('')})
                  (hide
                     {'||'
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling use_build_state_lighting}}}
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling use_blender}}}}))
               (use_record_state_lighting
                  bool
                  (hide
                     {!
                        {$this
                           get
                           {editor_prop_path_sibling use_blender}}})
                  (help
                     "Do we want to modify the scene's lighting when in record state?  If not, use progression driven config"))
               (record_state_lighting
                  symbol
                  (list
                     {if_else
                        [blender]
                        {[blender]
                           get_config_names}
                        ('')})
                  (hide
                     {'||'
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling use_record_state_lighting}}}
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling use_blender}}}}))
               (use_playback_state_lighting
                  bool
                  (hide
                     {!
                        {$this
                           get
                           {editor_prop_path_sibling use_blender}}})
                  (help
                     "Do we want to modify the scene's lighting when in playback state?  If not, use progression driven config"))
               (playback_state_lighting
                  symbol
                  (list
                     {if_else
                        [blender]
                        {[blender]
                           get_config_names}
                        ('')})
                  (hide
                     {'||'
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling use_playback_state_lighting}}}
                        {!
                           {$this
                              get
                              {editor_prop_path_sibling use_blender}}}}))))
         (help
            "Configure special lighting for each node"))
      (disable_automatic_lighting
         bool
         (help
            "Tells the light manager not to update anything")
         (no_test))
      (current_config
         symbol
         (list
            {if_else
               [blender]
               {[blender]
                  get_config_names}
               ('')})
         (read_only TRUE)
         (help
            "what are we telling the blender to do?"))
      (using_custom_config
         bool
         (read_only TRUE)
         (help
            "Are we overriding the scene's blender state?"))
      (scene_lighting_index
         int
         (read_only TRUE)))
   (events_in
      (enable_custom_config
         (editor
            (config
               symbol
               (list
                  {if_else
                     {[target]
                        get
                        blender}
                     {{[target]
                           get
                           blender}
                        get_config_names}
                     ('')}))
            (override_all
               bool
               (help
                  "True if this overrides all possible lighting, false if this just applies to normal backplane states")))
         (help
            "Allows us to override the scene's property blender.  Call disable_custom_config to return to normal"))
      (disable_custom_config
         (help
            "Returns scene's property blender to normal after calling enable_custom_config"))))
(DiscoveryNodeInfoMgr)
(FluxPauseGestureMgr
   (user_creatable FALSE)
   (editor
      (pause_mode
         int
         (read_only TRUE)
         (list PAUSE_MODES)
         (help
            "The game's current pause mode."))
      (is_game_paused
         bool
         (read_only TRUE)
         (help
            "True if the game is paused, false otherwise."))
      (pause_gesture_progress
         float
         (read_only TRUE)
         (help
            "The pause gesture progress, from 0.0 to 1.0."))))
(TargetPaintTuning
   (description
      "Global object to provide easy access to the target paint system's tuning params in DTA")
   (allowed_dirs)
   (functest no_test)
   (editor
      (Params
         (indent
            (enable_echo
               bool
               (read_only TRUE)
               (help
                  "Enable echo visual globally"))
            (enable_echo_for_recording
               bool
               (read_only TRUE)
               (help
                  "Enable echo visual override just for recording mode"))
            (enable_echo_for_playback
               bool
               (read_only TRUE)
               (help
                  "Enable echo visual override just for playback mode"))
            (enable_ribbon
               bool
               (read_only TRUE)
               (help
                  "Enable ribbon visual globally"))
            (enable_ribbon_for_recording
               bool
               (read_only TRUE)
               (help
                  "Enable ribbon visual override just for recording mode"))
            (enable_ribbon_for_playback
               bool
               (read_only TRUE)
               (help
                  "Enable ribbon visual override just for playback mode"))
            (enable_reticle
               bool
               (read_only TRUE)
               (help
                  "Enable reticle visual globally"))
            (enable_reticle_for_recording
               bool
               (read_only TRUE)
               (help
                  "Enable reticle visual override just for recording mode"))
            (enable_reticle_for_playback
               bool
               (read_only TRUE)
               (help
                  "Enable reticle visual override just for playback mode"))
            (reticle_scale
               float
               (read_only TRUE)
               (help
                  "Scaling factor applied globally to reticle art, hopefully to bring bounding sphere size into strict alignment with the visual."))
            (reticle_to_echo_scale
               float
               (read_only TRUE)
               (help
                  "Relative size of reticle to the echo visual.  A value of .5 would be an echo that is half the size of the reticle"))
            (reticle_to_ribbon_scale
               float
               (read_only TRUE)
               (help
                  "Relative size of reticle to the ribbon width.  A value of .5 would be an ribbon width that is half the size of the reticle"))
            (echo_wait_factor
               float
               (alias
                  "Echo Wait Factor")
               (range 0.0 1.0)
               (read_only TRUE)
               (help
                  "From 0 to 1, this says how much of the beat quantization time that the echo spends waiting at previous target before moving to the next one."))
            (reticle_use_fixed_progress_beats
               bool
               (read_only TRUE)
               (help
                  "is progress driven a fixed # of beats ahead of echo?  Or do we drive it only when the reticle is "
                  'next"'
                  in
                  'line?"'))
            (reticle_fixed_progress_beats
               float
               (read_only TRUE)
               (hide
                  {!
                     [reticle_use_fixed_progress_beats]})
               (help
                  "# of beats of ahead of echo to start driving reticle progress"))
            (reticle_progress_start
               float
               (read_only TRUE)
               (hide
                  [reticle_use_fixed_progress_beats])
               (help
                  "rom 0 to 1, when does reticle progress start?  if 0, it will be as soon as the previous target echoes.  if .5, it would be half of the time between prev target echo and when I echo.  basically same as echo wait factor, but for reticle progress..."))))
      (reload_config_params
         script
         (alias
            "Reload Config Params")
         (script
            {$this reload_config_params})
         (help
            "Reload config params from config DTA"))
      (edit_config_dta
         script
         (alias
            "Edit Config DTA")
         (script
            {$this edit_dta})
         (help
            "Edit the DTA file with target painting config params in it"))))
(DiscoveryParticleAttractor
   (browser_name
      "Discovery Particle Attractor")
   (description
      "Allows this object to affect particle systems in a special way City02 needs")
   (category Particles)
   (superclasses Trans ParticleAffector)
   (ext attractor)
   (editor
      (radius
         float
         (help
            "physical size of the attrator"))
      (min_radius
         float
         (help
            "don't apply force when particle closer than this distance to attractor.  combats oscillating motion..."))
      (strength
         float
         (help
            "how much force to apply, negative values for repulsion"))
      (velocity_max
         float
         (help
            "clamp on velocity to avoid explosions"))
      (num_attracted_radius
         float
         (help
            "Only particles within this radius are reported as being attracted with the 'num_attracted' property"))
      (num_attracted
         int
         (read_only TRUE)
         (no_test)
         (help
            "The number of particles currently attracted by this attractor."))))
(FluxContextualHelpMgr
   (description
      "Manages the Xbox One contextual help.")
   (superclasses Object)
   (editor
      (contextual_help_state
         int
         (read_only TRUE)
         (help
            "The current contextual help state."))))
#include flux_shader_nodes.dta