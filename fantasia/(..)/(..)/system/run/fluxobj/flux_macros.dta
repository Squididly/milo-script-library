#define kFlap_InAndOut
(0)
#define kFlap_UpAndDown
(1)
#define kFlap_Any
(2)
#define FLUX_FLAP_GESTURE_TYPES
((("kFlap_InAndOut"
         (help
            "Measures arm movement towards and away from the player's facing dir"))
      ("kFlap_UpAndDown"
         (help
            "Traditional up/down flap, measuring vertical angle of arms"))
      ("kFlap_Any"
         (help
            "Measures how deviated arms are angled relative to a t-pose, regardless of specific axes"))))
#define kCameraRayTarget_ScreenCoords
(0)
#define kCameraRayTarget_Trans
(1)
#define FLUX_CAMERA_RAY_TARGET_TYPES
((("kCameraRayTarget_ScreenCoords"
         (help
            "Cast the ray through the given screen coordinates"))
      ("kCameraRayTarget_Trans"
         (help
            "Cast the ray through the given trans"))))
#define kSPStraight
(0)
#define kSPPBendRight1
(1)
#define kSPPBendRight2
(2)
#define kSPPBendRight3
(3)
#define kSPPBendRight4
(4)
#define kSPPBendRight5
(5)
#define kSPPBendRight6
(6)
#define kSPPBendRight7
(7)
#define kSPPBendLeft1
(8)
#define kSPPBendLeft2
(9)
#define kSPPBendLeft3
(10)
#define kSPPBendLeft4
(11)
#define kSPPBendLeft5
(12)
#define kSPPBendLeft6
(13)
#define kSPPBendLeft7
(14)
#define SEGMENTPATH_SHAPES
((("kSPStraight"
         (alias
            "straight"))
      ("kSPPBendRight1"
         (alias
            "bend right 1"))
      ("kSPPBendRight2"
         (alias
            "bend right 2"))
      ("kSPPBendRight3"
         (alias
            "bend right 3"))
      ("kSPPBendRight4"
         (alias
            "bend right 4"))
      ("kSPPBendRight5"
         (alias
            "bend right 5"))
      ("kSPPBendRight6"
         (alias
            "bend right 6"))
      ("kSPPBendRight7"
         (alias
            "bend right 7"))
      ("kSPPBendLeft1"
         (alias
            "bend left 1"))
      ("kSPPBendLeft2"
         (alias
            "bend left 2"))
      ("kSPPBendLeft3"
         (alias
            "bend left 3"))
      ("kSPPBendLeft4"
         (alias
            "bend left 4"))
      ("kSPPBendLeft5"
         (alias
            "bend left 5"))
      ("kSPPBendLeft6"
         (alias
            "bend left 6"))
      ("kSPPBendLeft7"
         (alias
            "bend left 7"))))
#define kSPSNotCurrent
(0)
#define kSPSCurrent
(1)
#define kSPSFail
(2)
#define kSPSSuccess
(3)
#define kSPSActivated
(4)
#define SEGMENTPATHSECTIONSTATES
((("kSPSNotCurrent"
         (alias
            "not current")
         (help
            "Section is not part of an active path"))
      ("kSPSCurrent"
         (alias
            "current")
         (help
            "Section is currently the one being scored"))
      ("kSPSFail"
         (alias
            "fail")
         (help
            "Section has been failed"))
      ("kSPSSuccess"
         (alias
            "success")
         (help
            "Section has been passed!"))
      ("kSPSActivated"
         (alias
            "activated")
         (help
            "Path has been activated but section is not currently being scored"))))
#define kTransRaySource_Point
(0)
#define kTransRaySource_Trans
(1)
#define FLUX_TRANS_RAY_SOURCE_TYPES
((("kTransRaySource_Point"
         (help
            "Cast the ray from the given point"))
      ("kTransRaySource_Trans"
         (help
            "Cast the ray from the given trans"))))
#define kTransRayTarget_Point
(0)
#define kTransRayTarget_Trans
(1)
#define kTransRayTarget_Direction
(2)
#define kTransRayTarget_SourceX
(3)
#define kTransRayTarget_SourceY
(4)
#define kTransRayTarget_SourceZ
(5)
#define FLUX_TRANS_RAY_TARGET_TYPES
((("kTransRayTarget_Point"
         (help
            "Cast the ray through the given point"))
      ("kTransRayTarget_Trans"
         (help
            "Cast the ray through the given trans"))
      ("kTransRayTarget_Direction"
         (help
            "Cast the ray in the given direction"))
      ("kTransRayTarget_SourceX"
         (help
            "Cast the ray along the source's local x axis"))
      ("kTransRayTarget_SourceY"
         (help
            "Cast the ray along the source's local y axis"))
      ("kTransRayTarget_SourceZ"
         (help
            "Cast the ray along the source's local z axis"))))
#define kBeatSubdiv_Measure
(0)
#define kBeatSubdiv_Beat
(1)
#define kBeatSubdiv_8thNote
(2)
#define kBeatSubdiv_16thNote
(3)
#define kBeatSubdiv_Beats_1_and_3
(4)
#define FLUX_BEAT_SUBDIV_TYPES
((("kBeatSubdiv_Measure"
         (alias Measures)
         (help
            "Timing window centered on measure boundaries"))
      ("kBeatSubdiv_Beat"
         (alias Beats)
         (help
            "Timing window centered on every beat boundaries"))
      ("kBeatSubdiv_8thNote"
         (alias '8th Notes')
         (help
            "Timing window centered on 8th note boundaries"))
      ("kBeatSubdiv_16thNote"
         (alias '16th Notes')
         (help
            "Timing window centered on 16h note boundaries"))
      ("kBeatSubdiv_Beats_1_and_3"
         (alias 'Beats 1 + 3')
         (help
            "Timing window centered only on beats 1 and 3"))))
#define kBodyUnits_Screenspace
(0)
#define kBodyUnits_ShoulderWidth
(1)
#define kBodyUnits_ArmLength
(2)
#define kBodyUnits_TorsoLength
(3)
#define kBodyUnits_HipWidth
(4)
#define kBodyUnits_LegLength
(5)
#define FLUX_BODY_UNITS_TYPES
((("kBodyUnits_Screenspace"
         (alias Screenspace)
         (help
            "From 0 to 1, representing percent of screen width/height"))
      ("kBodyUnits_ShoulderWidth"
         (alias ShoulderWidth)
         (help
            "Units expressed in #'s of shoulder widths"))
      ("kBodyUnits_ArmLength"
         (alias ArmLength)
         (help
            "Units expressed in #'s of arm lengths"))
      ("kBodyUnits_TorsoLength"
         (alias TorsoLength)
         (help
            "Units expressed in #'s of torso lengths"))
      ("kBodyUnits_HipWidth"
         (alias HipWidth)
         (help
            "Units expressed in #'s of hip widths"))
      ("kBodyUnits_LegLength"
         (alias LegLength)
         (help
            "Units expressed in #'s of leg lengths"))))
#define kLeftHand
(0)
#define kRightHand
(1)
#define kEitherHand
(2)
#define FLUX_TARGET_HAND_TYPES
((("kLeftHand"
         (alias
            "Left hand"))
      ("kRightHand"
         (alias
            "Right hand"))
      ("kEitherHand"
         (alias
            "Either hand"))))
#define kTargetDir_N
(0)
#define kTargetDir_S
(1)
#define kTargetDir_E
(2)
#define kTargetDir_W
(3)
#define kTargetDir_NE
(4)
#define kTargetDir_NW
(5)
#define kTargetDir_SE
(6)
#define kTargetDir_SW
(7)
#define kTargetDir_Push
(8)
#define kTargetDir_IV
(9)
#define kTargetDir_VIII
(10)
#define TARGET_DIRECTIONS
((("kTargetDir_N"
         (alias
            "N"))
      ("kTargetDir_S"
         (alias
            "S"))
      ("kTargetDir_E"
         (alias
            "E"))
      ("kTargetDir_W"
         (alias
            "W"))
      ("kTargetDir_NE"
         (alias
            "NE"))
      ("kTargetDir_NW"
         (alias
            "NW"))
      ("kTargetDir_SE"
         (alias
            "SE"))
      ("kTargetDir_SW"
         (alias
            "SW"))
      ("kTargetDir_Push"
         (alias
            "Push"))
      ("kTargetDir_IV"
         (alias
            "4 o'clock"))
      ("kTargetDir_VIII"
         (alias
            "8 o'clock"))))
#define kTargetShape_Straight
(0)
#define kTargetShape_BentCW
(1)
#define kTargetShape_BentCCW
(2)
#define FLUX_TARGET_SHAPES
((("kTargetShape_Straight"
         (alias
            "Straight"))
      ("kTargetShape_BentCW"
         (alias
            "Bent Clockwise"))
      ("kTargetShape_BentCCW"
         (alias
            "Bent Counterclockwise"))))
#define kTargetSuffix_None
(0)
#define kTargetSuffix_Sustain
(1)
#define kTargetSuffix_SegmentPath
(4)
#define FLUX_TARGET_SUFFIXES
((("kTargetSuffix_None"
         (alias
            "None"))
      ("kTargetSuffix_Sustain"
         (alias
            "Sustain"))
      ("kTargetSuffix_SegmentPath"
         (alias
            "Segment Path"))))
#define kTargetSuffixState_Hookup
(0)
#define kTargetSuffixState_Reset
(1)
#define kTargetSuffixState_Active
(2)
#define kTargetSuffixState_Success
(3)
#define kTargetSuffixState_Fail
(4)
#define kTargetSuffixState_Inactive
(5)
#define FLUX_TARGET_SUFFIX_STATES
((("kTargetSuffixState_Hookup"
         (alias
            "Hookup"))
      ("kTargetSuffixState_Reset"
         (alias
            "Reset"))
      ("kTargetSuffixState_Active"
         (alias
            "Active"))
      ("kTargetSuffixState_Success"
         (alias
            "Success"))
      ("kTargetSuffixState_Fail"
         (alias
            "Fail"))
      ("kTargetSuffixState_Inactive"
         (alias
            "Inactive"))))
#define kTargetColor_White
(0)
#define kTargetColor_Blue
(1)
#define kTargetColor_Pink
(2)
#define kTargetColor_Green
(3)
#define kTargetColor_Yellow
(4)
#define kTargetColor_Purple
(5)
#define kTargetColor_Silver
(6)
#define kTargetColor_Gold
(7)
#define FLUX_TARGET_COLORS
((("kTargetColor_Blue"
         (alias
            "Blue"))
      ("kTargetColor_Pink"
         (alias
            "Pink"))
      ("kTargetColor_Green"
         (alias
            "Green"))
      ("kTargetColor_Yellow"
         (alias
            "Yellow"))
      ("kTargetColor_Purple"
         (alias
            "Purple"))
      ("kTargetColor_Silver"
         (alias
            "Silver"))
      ("kTargetColor_Gold"
         (alias
            "Gold"))
      ("kTargetColor_White"
         (alias
            "White"))))
#define kTargetSlot_None
(-1)
#define kTargetSlot_Mix1
(0)
#define kTargetSlot_Mix2
(1)
#define kTargetSlot_Mix3
(2)
#define FLUX_TARGET_SLOTS
((("kTargetSlot_Mix1"
         (alias
            "Slot 1"))
      ("kTargetSlot_Mix2"
         (alias
            "Slot 2"))
      ("kTargetSlot_Mix3"
         (alias
            "Slot 3"))))
#define FLUX_TARGET_SLOTS_OPTIONAL
((("kTargetSlot_None"
         (alias
            "None"))
      ("kTargetSlot_Mix1"
         (alias
            "Slot 1"))
      ("kTargetSlot_Mix2"
         (alias
            "Slot 2"))
      ("kTargetSlot_Mix3"
         (alias
            "Slot 3"))))
#define kTargetSlotEnabled_Mix1
(1)
#define kTargetSlotEnabled_Mix2
(2)
#define kTargetSlotEnabled_Mix3
(4)
#define kTargetSlotEnabled_2Mixes
(3)
#define kTargetSlotEnabled_All
(7)
#define FLUX_TARGET_SLOTS_ENABLED
((("kTargetSlotEnabled_Mix1"
         (alias
            "Slot 1"))
      ("kTargetSlotEnabled_Mix2"
         (alias
            "Slot 2"))
      ("kTargetSlotEnabled_Mix3"
         (alias
            "Slot 3"))))
#define kTargetMix_None
(-1)
#define kTargetMix_Original
(0)
#define kTargetMix_Remix1
(1)
#define kTargetMix_Remix2
(2)
#define kTargetMix_Remix3
(3)
#define kTargetMix_Remix4
(4)
#define FLUX_TARGET_MIXES
((("kTargetMix_Original"
         (alias
            "Original"))
      ("kTargetMix_Remix1"
         (alias
            "Remix 1"))
      ("kTargetMix_Remix2"
         (alias
            "Remix 2"))
      ("kTargetMix_Remix3"
         (alias
            "Remix 3"))
      ("kTargetMix_Remix4"
         (alias
            "Remix 4"))))
#define FLUX_TARGET_MIXES_OPTIONAL
((("kTargetMix_None"
         (alias
            "None"))
      ("kTargetMix_Original"
         (alias
            "Original"))
      ("kTargetMix_Remix1"
         (alias
            "Remix 1"))
      ("kTargetMix_Remix2"
         (alias
            "Remix 2"))
      ("kTargetMix_Remix3"
         (alias
            "Remix 3"))
      ("kTargetMix_Remix4"
         (alias
            "Remix 4"))))
#define kTargetPart_Drums
(0)
#define kTargetPart_Bass
(1)
#define kTargetPart_Guitar
(2)
#define kTargetPart_Vocals
(3)
#define kTargetPart_Misc
(4)
#define FLUX_TARGET_PARTS
((("kTargetPart_Drums"
         (alias
            "Drums"))
      ("kTargetPart_Bass"
         (alias
            "Bass"))
      ("kTargetPart_Guitar"
         (alias
            "Guitar/Synth"))
      ("kTargetPart_Vocals"
         (alias
            "Vocals"))
      ("kTargetPart_Misc"
         (alias
            "Misc"))))
#define kTargetPart_NumParts
(5)
#define FLUX_TARGET_PARTS_OPTIONAL
((("kTargetPart_NumParts"
         (alias
            "None"))
      ("kTargetPart_Drums"
         (alias
            "Drums"))
      ("kTargetPart_Bass"
         (alias
            "Bass"))
      ("kTargetPart_Guitar"
         (alias
            "Guitar/Synth"))
      ("kTargetPart_Vocals"
         (alias
            "Vocals"))
      ("kTargetPart_Misc"
         (alias
            "Misc"))))
#define FLUX_TARGET_PARTS_FULL
((("kTargetPart_Drums"
         (alias
            "Drums"))
      ("kTargetPart_Bass"
         (alias
            "Bass"))
      ("kTargetPart_Guitar"
         (alias
            "Guitar/Synth"))
      ("kTargetPart_Vocals"
         (alias
            "Vocals"))
      ("kTargetPart_Misc"
         (alias
            "Misc"))
      ("kTargetPart_NumParts"
         (alias
            "Full Mix"))))
#define kTargetPartBitfield_Drums
(1)
#define kTargetPartBitfield_Bass
(2)
#define kTargetPartBitfield_Guitar
(4)
#define kTargetPartBitfield_Vocals
(8)
#define kTargetPartBitfield_Misc
(16)
#define FLUX_TARGET_PARTS_BITFIELD
((("kTargetPartBitfield_Drums"
         (alias
            "Drums"))
      ("kTargetPartBitfield_Bass"
         (alias
            "Bass"))
      ("kTargetPartBitfield_Guitar"
         (alias
            "Guitar/Synth"))
      ("kTargetPartBitfield_Vocals"
         (alias
            "Vocals"))
      ("kTargetPartBitfield_Misc"
         (alias
            "Misc"))))
#define kPulseGoalType_None
(0)
#define kPulseGoalType_Tutorial
(1)
#define kPulseGoalType_Progression
(2)
#define kPulseGoalType_Exploratory
(3)
#define PULSE_GOAL_TYPES
((("kPulseGoalType_None"
         (alias
            "None"))
      ("kPulseGoalType_Tutorial"
         (alias
            "Tutorial"))
      ("kPulseGoalType_Progression"
         (alias
            "Progression"))
      ("kPulseGoalType_Exploratory"
         (alias
            "Exploratory"))))
#define kTargetPlayer_LeftPlayer
(0)
#define kTargetPlayer_RightPlayer
(1)
#define kTargetPlayer_BothPlayers
(2)
#define kTargetPlayer_OuterArms
(3)
#define kTargetPlayer_UnisonLeft
(4)
#define kTargetPlayer_UnisonRight
(5)
#define kTargetPlayer_SplitAuthoring
(6)
#define kTargetPlayer_SinglePlayer
(7)
#define FLUX_TARGET_PLAYER_DISPOSITIONS
((("kTargetPlayer_SinglePlayer"
         (alias
            "Single Player"))
      ("kTargetPlayer_LeftPlayer"
         (alias
            "Left Player"))
      ("kTargetPlayer_RightPlayer"
         (alias
            "Right Player"))
      ("kTargetPlayer_BothPlayers"
         (alias
            "Unison"))
      ("kTargetPlayer_OuterArms"
         (alias
            "Outer Arms (DEPRECATED)"))
      ("kTargetPlayer_UnisonLeft"
         (alias
            "Unison Left Half (DEPRECATED)"))
      ("kTargetPlayer_UnisonRight"
         (alias
            "Unison Right Half (DEPRECATED)"))))
#define FLUX_TARGET_PLAYER_AUTHORING
((("kTargetPlayer_LeftPlayer"
         (alias
            "Left Player"))
      ("kTargetPlayer_RightPlayer"
         (alias
            "Right Player"))
      ("kTargetPlayer_BothPlayers"
         (alias
            "Unison"))
      ("kTargetPlayer_SplitAuthoring"
         (alias
            "Split Authoring"))))
#define kAutoplayMode_None
(0)
#define kAutoplayMode_LeftPlayer
(1)
#define kAutoplayMode_RightPlayer
(2)
#define kAutoplayMode_All
(3)
#define FLUX_AUTOPLAY_MODES
((("kAutoplayMode_None"
         (alias
            "None"))
      ("kAutoplayMode_LeftPlayer"
         (alias
            "Left Player"))
      ("kAutoplayMode_RightPlayer"
         (alias
            "Right Player"))
      ("kAutoplayMode_All"
         (alias
            "All"))))
#define kTargetGoalCom_Hidden
(0)
#define kTargetGoalCom_Active
(1)
#define kTargetGoalCom_Hit
(2)
#define kTargetGoalCom_Passed
(3)
#define kTargetGoalCom_Engaged
(4)
#define kTargetGoalCom_OtherHit
(5)
#define FLUX_TARGETGOAL_STATE
((("kTargetGoalCom_Hidden"
         (alias
            "Hidden"))
      ("kTargetGoalCom_Active"
         (alias
            "Active"))
      ("kTargetGoalCom_Hit"
         (alias
            "Hit"))
      ("kTargetGoalCom_Passed"
         (alias
            "Passed"))
      ("kTargetGoalCom_Engaged"
         (alias
            "Engaged"))
      ("kTargetGoalCom_OtherHit"
         (alias
            "OtherHit"))))
#define kManipulator_None
(0)
#define kManipulator_MusicBox
(1)
#define kManipulator_BeatWheel
(2)
#define kManipulator_Lathe
(3)
#define kManipulator_Rope
(4)
#define kManipulator_SpaceJam
(5)
#define MANIPULATOR_TYPES
((("kManipulator_MusicBox"
         (alias
            "Music Box"))
      ("kManipulator_BeatWheel"
         (alias
            "Beat Wheel"))
      ("kManipulator_Lathe"
         (alias
            "Lathe"))
      ("kManipulator_Rope"
         (alias
            "Rope"))
      ("kManipulator_SpaceJam"
         (alias
            "Space Jam"))))
#define MANIPULATOR_TYPES_OPTIONAL
((("kManipulator_None"
         (alias
            "None"))
      ("kManipulator_MusicBox"
         (alias
            "Music Box"))
      ("kManipulator_BeatWheel"
         (alias
            "Beat Wheel"))
      ("kManipulator_Lathe"
         (alias
            "Lathe"))
      ("kManipulator_Rope"
         (alias
            "Rope"))
      ("kManipulator_SpaceJam"
         (alias
            "Space Jam"))))
#define kManipulatorEnabled_MusicBox
(2)
#define kManipulatorEnabled_BeatWheel
(4)
#define kManipulatorEnabled_Lathe
(8)
#define kManipulatorEnabled_Rope
(16)
#define kManipulatorEnabled_SpaceJam
(32)
#define kManipulatorEnabled_All
(62)
#define MANIPULATOR_TYPES_ENABLED
((("kManipulatorEnabled_MusicBox"
         (alias
            "Music Box"))
      ("kManipulatorEnabled_BeatWheel"
         (alias
            "Beat Wheel"))
      ("kManipulatorEnabled_Lathe"
         (alias
            "Lathe"))
      ("kManipulatorEnabled_Rope"
         (alias
            "Rope"))
      ("kManipulatorEnabled_SpaceJam"
         (alias
            "Space Jam"))
      ("kManipulatorEnabled_All"
         (alias
            "All"))))
#define kSongBuilderTutorial_None
(0)
#define kSongBuilderTutorial_NoRemix
(1)
#define kSongBuilderTutorial_Remix
(2)
#define SONG_BUILDER_TUTORIAL_TYPES
((("kSongBuilderTutorial_None"
         (alias
            "None"))
      ("kSongBuilderTutorial_NoRemix"
         (alias
            "Without Remixes"))
      ("kSongBuilderTutorial_Remix"
         (alias
            "With Remixes"))))
#define kPulseManipulatorState_Disabled
(0)
#define kPulseManipulatorState_Prepared
(1)
#define kPulseManipulatorState_Active
(2)
#define kPulseManipulatorState_Watching
(3)
#define kPulseManipulatorState_Background
(4)
#define PULSE_MANIPULATOR_STATES
((("kPulseManipulatorState_Disabled"
         (alias
            "Disabled"))
      ("kPulseManipulatorState_Prepared"
         (alias
            "Prepared"))
      ("kPulseManipulatorState_Active"
         (alias
            "Active"))
      ("kPulseManipulatorState_Watching"
         (alias
            "Watching"))
      ("kPulseManipulatorState_Background"
         (alias
            "Background"))))
#define kSongBuilder_None
(0)
#define kSongBuilder_Intro
(1)
#define kSongBuilder_Active
(2)
#define kSongBuilder_Listen
(3)
#define kSongBuilder_Outro
(4)
#define SONG_BUILDER_STATES
((("kSongBuilder_None"
         (alias
            "None"))
      ("kSongBuilder_Intro"
         (alias
            "Intro"))
      ("kSongBuilder_Active"
         (alias
            "Active"))
      ("kSongBuilder_Listen"
         (alias
            "Listen"))
      ("kSongBuilder_Outro"
         (alias
            "Outro"))))
#define kOverlayOff
(0)
#define kOverlayColor
(1)
#define kOverlayColorAndSkeleton
(2)
#define kOverlayDepth
(3)
#define kOverlayDepthAndSkeleton
(4)
#define kOverlaySkeleton
(5)
#define kOverlayTracking
(6)
#define FLUX_OVERLAY_STATES
((("kOverlayOff"
         "Off")
      ("kOverlayColor"
         "Color Only")
      ("kOverlayColorAndSkeleton"
         "Color And Skeleton")
      ("kOverlayDepth"
         "Depth Only")
      ("kOverlayDepthAndSkeleton"
         "Depth And Skeleton")
      ("kOverlaySkeleton"
         "Skeleton Only")
      ("kOverlayTracking"
         "Skeleton Tracking Data")))
#define kManipulationMode_Raw
(0)
#define kManipulationMode_SimpleSmooth
(1)
#define kManipulationMode_Physics
(2)
#define FLUX_MANIPULATION_MODE
((("kManipulationMode_Raw"
         (alias
            "No smoothing"))
      ("kManipulationMode_SimpleSmooth"
         (alias
            "Simple smoothing"))
      ("kManipulationMode_Physics"
         (alias
            "Physics modeled smoothing"))))
#define kManipulatableState_Disengaged
(0)
#define kManipulatableState_PreEngaged
(1)
#define kManipulatableState_ReadyingEngaged
(2)
#define kManipulatableState_Engaged
(3)
#define kManipulatableState_PostEngaged
(4)
#define FLUX_MANIPULATABLE_STATE
((("kManipulatableState_Disengaged"
         (alias
            "Disengaged"))
      ("kManipulatableState_PreEngaged"
         (alias
            "PreEngaged"))
      ("kManipulatableState_ReadyingEngaged"
         (alias
            "ReadyingEngaged"))
      ("kManipulatableState_Engaged"
         (alias
            "Engaged"))
      ("kManipulatableState_PostEngaged"
         (alias
            "PostEngaged"))))
#define kManipulatorState_Disengaged
(0)
#define kManipulatorState_PreEngaged
(1)
#define kManipulatorState_ReadyingEngaged
(2)
#define kManipulatorState_Engaged
(3)
#define kManipulatorState_PostEngaged
(4)
#define FLUX_MANIPULATOR_STATE
((("kManipulatorState_Disengaged"
         (alias
            "Disengaged"))
      ("kManipulatorState_PreEngaged"
         (alias
            "PreEngaged"))
      ("kManipulatorState_ReadyingEngaged"
         (alias
            "ReadyingEngaged"))
      ("kManipulatorState_Engaged"
         (alias
            "Engaged"))
      ("kManipulatorState_PostEngaged"
         (alias
            "PostEngaged"))))
#define kZoomState_NotZooming
(0)
#define kZoomState_ZoomingIn
(1)
#define kZoomState_ZoomingOut
(2)
#define FLUX_DISC_ZOOM_STATE
((("kZoomState_NotZooming"
         (alias
            "Not Zooming"))
      ("kZoomState_ZoomingIn"
         (alias
            "Zooming In"))
      ("kZoomState_ZoomingOut"
         (alias
            "Zooming Out"))))
#define kCutsceneState_NoCutscene
(0)
#define kCutsceneState_RampingIn
(1)
#define kCutsceneState_PlayingCutscene
(2)
#define kCutsceneState_RampingOut
(3)
#define FLUX_DISC_CUTSCENE_STATE
((("kCutsceneState_NoCutscene"
         (alias
            "No Cutscene"))
      ("kCutsceneState_RampingIn"
         (alias
            "Ramping In"))
      ("kCutsceneState_PlayingCutscene"
         (alias
            "Playing Cutscene"))
      ("kCutsceneState_RampingOut"
         (alias
            "Ramping Out"))))
#define kSurfaceTypeNear
(0)
#define kSurfaceTypeFar
(1)
#define kSurfaceTypeWall
(2)
#define FLUX_DISC_SURFACE_TYPE
((("kSurfaceTypeNear"
         (alias
            "Near collision surface"))
      ("kSurfaceTypeFar"
         (alias
            "Far collision surface"))
      ("kSurfaceTypeWall"
         (alias
            "Wall collision surface"))))
#define kRailEngageThrust
(0)
#define kRailEngageWorldHover
(1)
#define kRailEngageScreenHover
(2)
#define FLUX_RAIL_ENGAGE_MODE
((("kRailEngageThrust"
         (alias
            "Thrust cursor into sensor to engage"))
      ("kRailEngageWorldHover"
         (alias
            "Hover inside sensor"))
      ("kRailEngageScreenHover"
         (alias
            "Hover over sensor"))))
#define kDiscSceneStateDisengaged
(0)
#define kDiscSceneStateDisengagedCursorDropped
(1)
#define kDiscSceneStateEngaged
(2)
#define kDiscSceneStateDisabledForPulse
(3)
#define kDiscSceneStateManipulatorPsuedoengaged
(4)
#define FLUX_DISC_SCENE_STATE
((("kDiscSceneStateDisengaged"
         (alias
            "Disengaged"))
      ("kDiscSceneStateDisengagedCursorDropped"
         (alias
            "Disengaged - no cursor"))
      ("kDiscSceneStateEngaged"
         (alias
            "Engaged"))
      ("kDiscSceneStateDisabledForPulse"
         (alias
            "Disabling most Discovery systems for Pulse"))
      ("kDiscSceneStateManipulatorPsuedoengaged"
         (alias
            "Actively interacting with Discovery manipulator"))))
#define kTargetMode_Manual
(0)
#define kTargetMode_AutoBeatTicks
(1)
#define FLUX_CURSOR_TARGET_MODES
((("kTargetMode_Manual"
         (help
            "Advancing to next target trigger manually using flow command 'goto_next_target'"))
      ("kTargetMode_AutoBeatTicks"
         (help
            "Quantize movement between targets to a specified beat interval, in ticks (480 ticks per beat)"))))
#define kCursorAction_None
(0)
#define kCursorAction_Touch
(1)
#define kCursorAction_Hover
(2)
#define kCursorAction_Swipe
(3)
#define kCursorAction_Push
(4)
#define kCursorAction_Scrub
(5)
#define CURSOR_ACTION_ENUMS
((("kCursorAction_None"
         (alias
            "None")
         (help
            "No cursor action."))
      ("kCursorAction_Touch"
         (alias
            "Touch")
         (help
            "Just touching an object."))
      ("kCursorAction_Hover"
         (alias
            "Hover")
         (help
            "Stayed in one place for long enough."))
      ("kCursorAction_Swipe"
         (alias
            "Swipe")
         (help
            "Moved quickly across the screen."))
      ("kCursorAction_Push"
         (alias
            "Push")
         (help
            "Moved quickly into/out of the screen."))
      ("kCursorAction_Scrub"
         (alias
            "Scrub")
         (help
            "Jazz hands!"))))
#define kCursorActionAxis_PosX
(0)
#define kCursorActionAxis_NegX
(1)
#define kCursorActionAxis_PosY
(2)
#define kCursorActionAxis_NegY
(3)
#define kCursorActionAxis_PosZ
(4)
#define kCursorActionAxis_NegZ
(5)
#define CURSOR_ACTION_AXIS_ENUMS
((("kCursorActionAxis_PosX"
         (alias
            "+X")
         (help
            "Moved down the +X axis."))
      ("kCursorActionAxis_NegX"
         (alias
            "-X")
         (help
            "Moved down the -X axis."))
      ("kCursorActionAxis_PosY"
         (alias
            "+Y")
         (help
            "Moved down the +Y axis."))
      ("kCursorActionAxis_NegY"
         (alias
            "-Y")
         (help
            "Moved down the -Y axis."))
      ("kCursorActionAxis_PosZ"
         (alias
            "+Z")
         (help
            "Moved down the +Z axis."))
      ("kCursorActionAxis_NegZ"
         (alias
            "-Z")
         (help
            "Moved down the -Z axis."))))
#define kQuantize_Quarter
(0)
#define kQuantize_8th
(1)
#define kQuantize_16th
(2)
#define kQuantize_32nd
(3)
#define kQuantize_Triplet_8th
(4)
#define kQuantize_Dotted_Quarter
(5)
#define kQuantize_Dotted_8th
(6)
#define kQuantize_Dotted_16th
(7)
#define kQuantize_Dotted_32nd
(8)
#define kQuantize_Custom
(9)
#define kQuantize_Manual
(10)
#define kQuantize_Half
(11)
#define kQuantize_Dotted_Half
(12)
#define kQuantize_Whole
(13)
#define kQuantize_64th
(14)
#define kQuantize_Triplet_Quarter
(15)
#define kQuantize_Triplet_16th
(16)
#define kQuantize_128th
(17)
#define BEAT_QUANTIZATIONS_BASE
(("kQuantize_Whole"
      (help
         "Quantize to the next whole note"))
   ("kQuantize_Half"
      (help
         "Quantize to the next half note"))
   ("kQuantize_Quarter"
      (help
         "Quantize to the next quarter note"))
   ("kQuantize_8th"
      (help
         "Quantize to the next 8th note"))
   ("kQuantize_16th"
      (help
         "Quantize to the next 16th note"))
   ("kQuantize_32nd"
      (help
         "Quantize to the next 32nd note"))
   ("kQuantize_64th"
      (help
         "Quantize to the next 64th note"))
   ("kQuantize_Triplet_8th"
      (help
         "Quantize to the next 8th triplet note"))
   ("kQuantize_Dotted_Half"
      (help
         "Quantize to the next dotted half note"))
   ("kQuantize_Dotted_Quarter"
      (help
         "Quantize to the next dotted quarter note"))
   ("kQuantize_Dotted_8th"
      (help
         "Quantize to the next dotted 8th note"))
   ("kQuantize_Dotted_16th"
      (help
         "Quantize to the next dotted 16th note"))
   ("kQuantize_Dotted_32nd"
      (help
         "Quantize to the next dotted 32nd note"))
   ("kQuantize_Triplet_Quarter"
      (help
         "Quantize to the next quarter triplet note"))
   ("kQuantize_Triplet_16th"
      (help
         "Quantize to the next 16th triplet note"))
   ("kQuantize_128th"
      (help
         "Quantize to the next 128th note")))
#define BEAT_QUANTIZATIONS_INC_CUSTOM
((BEAT_QUANTIZATIONS_BASE
      ("kQuantize_Custom"
         (help
            "Quantize to a custom beat interval, entered below"))))
#define kInputContextDisengaged
(0)
#define kInputContextDisengagedCursorDropped
(1)
#define kInputContextEngaged
(2)
#define kInputContextDisabledForPulse
(3)
#define DISCOVERY_INPUT_CONTEXT_ENUM
((("kInputContextDisengaged"
         "")
      ("kInputContextDisengagedCursorDropped"
         "")
      ("kInputContextEngaged"
         "")
      ("kInputContextDisabledForPulse"
         "")))
#define kWaveShapeSine
(0)
#define kWaveShapeSquare
(1)
#define WAVE_RIBBON_SHAPES
((("kWaveShapeSine"
         (alias
            "Sine wave"))
      ("kWaveShapeSquare"
         (alias
            "Square wave"))))
#define kControlPoint
(0)
#define kControlCylinder
(1)
#define kControlQuad
(2)
#define TRI_SURF_CONTROL_POINT_TYPES
((("kControlPoint"
         (alias
            "A single point"))
      ("kControlCylinder"
         (alias
            "A pair of points"))
      ("kControlQuad"
         (alias
            "A rectangle"))))
#define DISCOVERY_COLLECTIBLE_QUANTIZATION
((BEAT_QUANTIZATIONS_BASE
      ("kQuantize_Custom"
         "Quantize to a custom beat interval, entered below")
      ("kQuantize_Manual"
         "Unlocks only happen when manual unlock command is received")))
#define kPluckerType_Round
(0)
#define kPluckerType_Cube
(1)
#define kPluckerType_Spiky
(2)
#define FLUX_CUE
((struct
      (direction
         int
         (list TARGET_DIRECTIONS))
      (destination int)
      (suffix
         int
         (list FLUX_TARGET_SUFFIXES))
      (duration_beats float)
      (segment_path symbol)
      (line_shape
         int
         (list FLUX_TARGET_SHAPES))
      (lead_beats float)
      (source int)
      (position VECTOR3)
      (scale float)
      (reverse_edge bool))
   (propanim_type fluxcue)
   (propanim_annotate
      ($anim $prop $index)
      {if_else
         {>= $index 0}
         {do
            ($frame
               {$anim frame_from_index $this $prop $index})
            ($cue '')
            ($suffix kTargetSuffix_None)
            ($duration 0)
            ($lead 0)
            ($ary
               {array 0})
            {$anim value_from_index $this $prop $index $cue}
            {set
               $suffix
               {elem $cue 2}}
            {set
               $duration
               {'*'
                  {elem $cue 3}
                  480}}
            {set
               $lead
               {'*'
                  {elem $cue 6}
                  480}}
            {if
               {> $lead 0}
               {push_back
                  $ary
                  {flatten
                     {- $frame $lead}
                     {sprintf
                        "lead: %g"
                        {/ $lead 480}}}}}
            {if
               {> $duration 0}
               {push_back
                  $ary
                  {flatten
                     {'+' $frame $duration}
                     {sprintf
                        "%s: %g"
                        {switch
                           $suffix
                           (kTargetSuffix_Sustain
                              "sustain")
                           (kTargetSuffix_Path
                              "path")
                           (kTargetSuffix_SegmentPath
                              "path")
                           "suffix"}
                        {/ $duration 480}}}}}
            $ary}
         kDataUnhandled})
   (propanim_keyframe_selected
      ($anim $prop $index $selected)
      {if
         {$this has_component TargetPropAnimCom}
         {$this toggle_proxy $anim $prop $index $selected}})
   (propanim_editing
      ($anim $prop $editing)
      {$this update_proxies $anim $prop $editing}))
#define kManipulatorUIOff
(0)
#define kManipulatorUIPrimed
(1)
#define kManipulatorUIEngaging
(2)
#define kManipulatorUIEngaged
(3)
#define kManipulatorUIDisengaging
(4)
#define MANIPULATOR_UI_STATES
((("kManipulatorUIOff"
         "off")
      ("kManipulatorUIPrimed"
         "rings locking")
      ("kManipulatorUIEngaging"
         "energy flowing")
      ("kManipulatorUIEngaged"
         "manipulating")
      ("kManipulatorUIDisengaging"
         "energy unflowing")))
#define kHatPieceUIOff
(0)
#define kHatPieceUIPrimed
(1)
#define kHatPieceUIEngaging
(2)
#define kHatPieceUIEngaged
(3)
#define HATPIECE_UI_STATES
((("kHatPieceUIOff"
         (alias
            "off")
         (help
            "Off"))
      ("kHatPieceUIPrimed"
         (alias
            "hovered")
         (help
            "When cursor is hovered over hatpiece and UI appears"))
      ("kHatPieceUIEngaging"
         (alias
            "building energy")
         (help
            "When two hands are up and we're making progress towards collection"))
      ("kHatPieceUIEngaged"
         (alias
            "collected")
         (help
            "The moment the collection event happens"))))
#define kForceField_Radial
(0)
#define kForceField_Constant
(1)
#define SENSOR_FORCE_FIELD_TYPES
((("kForceField_Radial"
         "Force is apply towards center of sensor, falling off as object moves away from center")
      ("kForceField_Constant"
         "A constant force no matter where the object is in the sensor")))
#define kPlayspacePositionJointHead
(0)
#define kPlayspacePositionJointShoulderCenter
(1)
#define kPlayspacePositionJointSpine
(2)
#define kPlayspacePositionJointHipCenter
(3)
#define PLAYSPACE_POSITION_JOINT_ENUM
((("kPlayspacePositionJointHead"
         (alias Head))
      ("kPlayspacePositionJointShoulderCenter"
         (alias 'Shoulder Center'))
      ("kPlayspacePositionJointSpine"
         (alias Spine))
      ("kPlayspacePositionJointHipCenter"
         (alias 'Hip Center'))))
#define kSLNoError
(0)
#define kSLNoActiveProfile
(1)
#define kSLNoDevice
(2)
#define kSLMultipleDevices
(3)
#define kSLNoSaveNeeded
(4)
#define kSLIncompatibleVers
(5)
#define kSLDeviceFull
(6)
#define kSLUnknownError
(15)
#define SAVELOAD_ERRORS
((("kSLNoError"
         (help
            "No error; everything went as expected."))
      ("kSLNoActiveProfile"
         (help
            "Active profile is not signed in for save/load ops."))
      ("kSLNoDevice"
         (help
            "No device is selected for save; none found for load."))
      ("kSLMultipleDevices"
         (help
            "Multiple save files exist. A device must be chosen to save/load"))
      ("kSLNoSaveNeeded"
         (help
            "No save was necessary (profile unmodified)."))
      ("kSLIncompatibleVers"
         (help
            "Version found is not compatible w/this build."))
      ("kSLDeviceFull"
         (help
            "The selected storage device is full."))
      ("kSLUnknownError"
         (help
            "Catch-all general error."))))
#define kQuantizedRec_Playback
(0)
#define kQuantizedRec_Recording
(1)
#define QUANTIZEDRECORDER_STATES
((("kQuantizedRec_Playback"
         (alias
            "Playback"))
      ("kQuantizedRec_Recording"
         (alias
            "Recording"))))
#define kQuantizedRec_SingleNotes
(0)
#define kQuantizedRec_Chords
(1)
#define QUANTIZEDRECORDER_AUDIOOUTPUTTYPES
((("kQuantizedRec_SingleNotes"
         (alias
            "SingleNotes"))
      ("kQuantizedRec_Chords"
         (alias
            "Chords"))))
#define kQuantizedRec_AlongX
(0)
#define kQuantizedRec_AlongY
(1)
#define kQuantizedRec_2DGrid
(2)
#define QUANTIZEDRECORDER_NOTEPLAYBACKTRIGGER
((("kQuantizedRec_AlongX"
         (alias
            "Along X"))
      ("kQuantizedRec_AlongY"
         (alias
            "Along Y"))
      ("kQuantizedRec_2DGrid"
         (alias
            "2D Grid"))))
#define kNeighborhood_NotTransformed
(0)
#define kNeighborhood_TransformationANoised
(1)
#define kNeighborhood_TransformationAPhase0
(3)
#define kNeighborhood_TransformationAPhase1
(4)
#define kNeighborhood_TransformationB
(6)
#define kNeighborhood_Complete
(9)
#define NEIGHBORHOOD_STATES
((("kNeighborhood_NotTransformed"
         (alias
            "Not Transformed"))
      ("kNeighborhood_TransformationANoised"
         (alias
            "Transformation A (suppressed by noise)"))
      ("kNeighborhood_TransformationAPhase0"
         (alias
            "Transformation A (in phase 0)"))
      ("kNeighborhood_TransformationAPhase1"
         (alias
            "Transformation A (in phase 1)"))
      ("kNeighborhood_TransformationB"
         (alias
            "Transformation B"))
      ("kNeighborhood_Complete"
         (alias
            "Complete"))))
#define kDiscoveryVisitState_VisitFromWorkshop
(0)
#define kDiscoveryVisitState_VisitFromPulseNewGoalComplete
(1)
#define kDiscoveryVisitState_VisitFromPulseNoNewGoalComplete
(2)
#define DISCOVERY_VISIT_STATES
((("kDiscoveryVisitState_VisitFromWorkshop"
         (alias
            "From workshop"))
      ("kDiscoveryVisitState_VisitFromPulseNewGoalComplete"
         (alias
            "From pulse - new goal complete"))
      ("kDiscoveryVisitState_VisitFromPulseNoNewGoalComplete"
         (alias
            "From pulse - no new goal complete"))))
#define kPostPulse_TransformationA
(0)
#define kPostPulse_ReduceNoise
(1)
#define kPostPulse_TransformationB
(2)
#define kPostPulse_Complete
(3)
#define kPostPulse_None
(4)
#define POST_PULSE_EVENTS
((("kPostPulse_TransformationA"
         (alias
            "Transformation A"))
      ("kPostPulse_ReduceNoise"
         (alias
            "Noise Reduction")
         (help
            "We've already gotten transformation A"))
      ("kPostPulse_TransformationB"
         (alias
            "Transformation B"))
      ("kPostPulse_Complete"
         (alias
            "Complete"))
      ("kPostPulse_None"
         (alias
            "None"))))
#define NEIGHBORHOOD_STATES_REDUCED
((("kNeighborhood_NotTransformed"
         (alias
            "Not Transformed"))
      ("kNeighborhood_TransformationAPhase1"
         (alias
            "Transformation A"))
      ("kNeighborhood_TransformationB"
         (alias
            "Transformation B"))))
#define kPhaseYenSid
(0)
#define kPhaseScout
(1)
#define DISCOVERY_SCENE_PHASES
((("kPhaseYenSid"
         (alias
            "Yen Sid Phase"))
      ("kPhaseScout"
         (alias
            "Scout Phase"))))
#define kDialogPromptTypeYesNo
(0)
#define kDialogPromptTypeOk
(1)
#define kDialogPromptTypeYesNoWithBackground
(2)
#define kDialogPromptTypeOkWithBackground
(3)
#define DIALOG_PROMPT_TYPES
((("kDialogPromptTypeYesNo"
         (alias
            "Yes/No Dialog Prompt"))
      ("kDialogPromptTypeOk"
         (alias
            "Ok Dialog Prompt"))
      ("kDialogPromptTypeYesNoWithBackground"
         (alias
            "Yes/No Dialog Prompt with Background"))
      ("kDialogPromptTypeOkWithBackground"
         (alias
            "Ok Dialog Prompt with Background"))))
#define kDialogPromptResponseYes
(0)
#define kDialogPromptResponseNo
(1)
#define kDialogPromptResponseOk
(2)
#define DIALOG_PROMPT_RESPONSES
((("kDialogPromptResponseYes"
         (alias
            "Yes"))
      ("kDialogPromptResponseNo"
         (alias
            "No"))
      ("kDialogPromptResponseOk"
         (alias
            "Ok"))))
#define kFcRobotRed
(0)
#define kFcRobotYellow
(1)
#define kFcRobotBlue
(2)
#define kFcRobotNoColor
(3)
#define FACTORY_ROBOT_TYPES
((("kFcRobotRed"
         (alias
            "red"))
      ("kFcRobotYellow"
         (alias
            "yellow"))
      ("kFcRobotBlue"
         (alias
            "blue"))
      ("kFcRobotNoColor"
         (alias
            "no color"))))
#define HEDRON_SHAPE_NAMES
((cube octahedron tetrahedron pyramid dipyramid))
#define kDiscoveryRecordable_Off
(0)
#define kDiscoveryRecordable_Recording
(1)
#define kDiscoveryRecordable_Playback
(2)
#define kDiscoveryRecordable_PreRecord
(3)
#define DISCOVERY_RECORDABLE_STATES
((("kDiscoveryRecordable_Off"
         (alias
            "Off"))
      ("kDiscoveryRecordable_Recording"
         (alias
            "Recording"))
      ("kDiscoveryRecordable_Playback"
         (alias
            "Playback"))
      ("kDiscoveryRecordable_PreRecord"
         (alias
            "PreRecord"))))
#define kRecordDisengaged
(0)
#define kRecordEngaging
(1)
#define kRecordEngaged
(2)
#define kRecordDisengaging
(3)
#define DISCOVERY_REC_ENGAGE_STATES
((("kRecordDisengaged"
         (alias
            "Disengaged")
         (help
            "Currently disengaged"))
      ("kRecordEngaging"
         (alias
            "Engaging")
         (help
            "Currently disengaged, but hand is getting close to engaging.  We show analog progress in this state."))
      ("kRecordEngaged"
         (alias
            "Engaged")
         (help
            "Currently engaged"))
      ("kRecordDisengaging"
         (alias
            "Disengaging")
         (help
            "Currently engaged, but hand is getting close to disengaging.  We show analog progress in this state."))))
#define kDiscoveryNode_Off
(0)
#define kDiscoveryNode_Build
(1)
#define kDiscoveryNode_Play
(2)
#define kDiscoveryNode_Backplane
(3)
#define DISCOVERY_NODE_STATES
((("kDiscoveryNode_Off"
         (alias
            "off"))
      ("kDiscoveryNode_Build"
         (alias
            "build"))
      ("kDiscoveryNode_Play"
         (alias
            "play"))
      ("kDiscoveryNode_Backplane"
         (alias
            "backplane"))))
#define kSampleSet_Original
(0)
#define kSampleSet_Pulse
(1)
#define DISCOVERY_NODE_SAMPLE_SETS
((("kSampleSet_Original"
         (alias
            "original stems"))
      ("kSampleSet_Pulse"
         (alias
            "pulse song stems"))))
#define kSouvenir_Off
(0)
#define kSouvenir_Cutscene
(1)
#define kSouvenir_BackplaneApproach
(2)
#define kSouvenir_BackplanePlayback
(3)
#define DISCOVERY_NODE_SOUVENIR_STATES
((("kSouvenir_Off"
         (alias
            "off")
         (help
            "Souvenir off"))
      ("kSouvenir_Cutscene"
         (alias
            "cutscene")
         (help
            "Currently playing souvenir cutscene"))
      ("kSouvenir_BackplaneApproach"
         (alias
            "backplane approach")
         (help
            "Going to play souvenir audio on the backplane soon"))
      ("kSouvenir_BackplanePlayback"
         (alias
            "backplane playback")
         (help
            "Currently playing souvenir audio on the backplane"))))
#define kSouvenirOverride_NoOverride
(0)
#define kSouvenirOverride_ForceOn
(1)
#define kSouvenirOverride_ForceOff
(2)
#define DISCOVERY_NODE_SOUVENIR_OVERRIDE_STATES
((("kSouvenirOverride_NoOverride"
         (alias
            "no override")
         (help
            "Default souvenir behavior"))
      ("kSouvenirOverride_ForceOn"
         (alias
            "forced on")
         (help
            "Souvenir must be on if we have one"))
      ("kSouvenirOverride_ForceOff"
         (alias
            "forced off")
         (help
            "Souvenir must be off"))))
#define kCatchLane_ChordAllAtOnce
(0)
#define kCatchLane_ChordRandom
(1)
#define CATCHLANE_CHORD_MODES
((("kCatchLane_ChordAllAtOnce"
         (alias
            "All At Once")
         (help
            "Play all the notes in the chord all at once"))
      ("kCatchLane_ChordRandom"
         (alias
            "Pick One Random")
         (help
            "Just play one of the notes in the chord randomly, no repeats."))))
#define kIncrementStateNone
(0)
#define kIncrementStateFastDecrement
(1)
#define kIncrementStateNormalDecrement
(2)
#define kIncrementStateNormalIncrement
(3)
#define kIncrementStateFastIncrement
(4)
#define INCREMENT_STATES
((("kIncrementStateNone"
         (alias
            "None")
         (help
            "Don't increment the value."))
      ("kIncrementStateFastDecrement"
         (alias
            "Fast Decrement")
         (help
            "Decrement the value at fast speed."))
      ("kIncrementStateNormalDecrement"
         (alias
            "Normal Decrement")
         (help
            "Decrement the value at normal speed."))
      ("kIncrementStateNormalIncrement"
         (alias
            "Normal Increment")
         (help
            "Increment the value at normal speed."))
      ("kIncrementStateFastIncrement"
         (alias
            "Fast Increment")
         (help
            "Increment the value at fast speed."))))
#define kInputNote_ScaleDegree
(0)
#define kInputNote_ExplicitMode
(1)
#define TRANSPOSER_INPUT_NOTE_TYPES
((("kInputNote_ScaleDegree"
         (alias
            "Scale Degrees")
         (help
            "Starting at 1, input notes specified in scale degrees (i.e 1 is root note of scale, etc)"))
      ("kInputNote_ExplicitMode"
         (alias
            "MIDI Explicit Mode")
         (help
            "All input notes are MIDI note numbers in a given key, like C major"))))
#define TARGET_HIT
(target_hit
   (editor
      (target_hit_hand
         int
         (list FLUX_TARGET_HAND_TYPES)
         (help
            "which hand hit the target"))
      (vel_x
         float
         (help
            "x speed of hand hitting this target"))
      (vel_y
         float
         (help
            "y speed of hand hitting this target"))
      (hit_target_obj
         object
         (class Target)
         (help
            "target object that was hit"))
      (hit_target_shape
         symbol
         (list
            {elem
               {find $syscfg targets shapes}
               1})
         (help
            "type of target hit")
         (no_validate))))
#define TARGET_PASS
(target_pass
   (editor
      (target_pass_hand
         int
         (list FLUX_TARGET_HAND_TYPES)
         (help
            "UNUSED"))
      (pass_target_obj
         object
         (class Target)
         (help
            "target object that was missed"))
      (pass_target_shape
         symbol
         (list
            {elem
               {find $syscfg targets shapes}
               1})
         (help
            "type of target missed")
         (no_validate))))
#define kDiscoverySceneProgression_Type1
(0)
#define kDiscoverySceneProgression_Type2
(1)
#define DISCOVERY_SCENE_PROGRESSION_TYPES
((("kDiscoverySceneProgression_Type1"
         (alias
            "Type 1"))
      ("kDiscoverySceneProgression_Type2"
         (alias
            "Type 2"))))
#define kDiscoverySceneProgression_NoiseRegionOff
(0)
#define kDiscoverySceneProgression_NoiseRegionOn
(1)
#define kDiscoverySceneProgression_NoiseRegionAttack
(2)
#define kDiscoverySceneProgression_NoiseRegionDying
(3)
#define DISCOVERY_SCENE_PROGRESSION_NOISE_REGION_STATES
((("kDiscoverySceneProgression_NoiseRegionOff"
         (alias
            "Noise off"))
      ("kDiscoverySceneProgression_NoiseRegionOn"
         (alias
            "Noise on"))
      ("kDiscoverySceneProgression_NoiseRegionAttack"
         (alias
            "Noise attack"))
      ("kDiscoverySceneProgression_NoiseRegionDying"
         (alias
            "Noise dying"))))
#define kDiscoverySceneProgression_NoiseSceneOff
(0)
#define kDiscoverySceneProgression_NoiseSceneNeighborhood
(1)
#define kDiscoverySceneProgression_NoisePremanip
(2)
#define kDiscoverySceneProgression_NoiseOutro
(3)
#define kDiscoverySceneProgression_NoiseNeighborhoodDeath
(4)
#define DISCOVERY_SCENE_PROGRESSION_NOISE_SCENE_STATES
((("kDiscoverySceneProgression_NoiseSceneOff"
         (alias
            "Noise off"))
      ("kDiscoverySceneProgression_NoiseSceneNeighborhood"
         (alias
            "Neighborhood noise"))
      ("kDiscoverySceneProgression_NoisePremanip"
         (alias
            "Premanip noise"))
      ("kDiscoverySceneProgression_NoiseOutro"
         (alias
            "Outro noise"))
      ("kDiscoverySceneProgression_NoiseNeighborhoodDeath"
         (alias
            "Neighborhood death"))))
#define kBallisticType_PassThroughPeak
(0)
#define kBallisticType_ArriveInFixedTime
(1)
#define BALLISTIC_PATH_TYPES
((("kBallisticType_PassThroughPeak"
         (alias
            "Pass through peak"))
      ("kBallisticType_ArriveInFixedTime"
         (alias
            "Arrive in fixed time"))))
#define kRotationNoAlignment
(0)
#define kRotationAlignToTarget
(1)
#define kRotationAlignAlongPath
(2)
#define BALLISTIC_ROTATION_MODES
((("kRotationNoAlignment"
         (alias
            "Position only")
         (help
            "Don't touch the rotation of the trans, just position it along the path"))
      ("kRotationAlignToTarget"
         (alias
            "Align to target")
         (help
            "point positive Y at the target when launched, then leave rotation alone"))
      ("kRotationAlignAlongPath"
         (alias
            "Align along path")
         (help
            "Keep positive Y aligned along ballistic path"))))
#define kSongInfoState_Bronze
(0)
#define kSongInfoState_Silver
(1)
#define kSongInfoState_Gold
(2)
#define FLUX_SONGINFO_STATES
((("kSongInfoState_Bronze"
         (alias
            "Bronze"))
      ("kSongInfoState_Silver"
         (alias
            "Silver"))
      ("kSongInfoState_Gold"
         (alias
            "Gold"))))
#define kSongInfoMode_PrePulse
(0)
#define kSongInfoMode_InPulse
(1)
#define kSongInfoMode_PostPulse
(2)
#define FLUX_SONGINFO_MODES
((("kSongInfoMode_PrePulse"
         (alias
            "Pre-Pulse"))
      ("kSongInfoMode_InPulse"
         (alias
            "In Pulse"))
      ("kSongInfoMode_PostPulse"
         (alias
            "Post-Pulse"))))
#define kPulseLeaderboardStatusUnknown
(0)
#define kPulseLeaderboardStatusPending
(1)
#define kPulseLeaderboardStatusSuccess
(2)
#define kPulseLeaderboardStatusPlayerNotLoggedIn
(3)
#define kPulseLeaderboardStatusPlayerNotSignedIn
(4)
#define kPulseLeaderboardStatusNetworkError
(5)
#define PULSE_LEADERBOARD_STATUSES
((("kPulseLeaderboardStatusUnknown"
         (alias
            "Unknown"))
      ("kPulseLeaderboardStatusPending"
         (alias
            "Pending"))
      ("kPulseLeaderboardStatusSuccess"
         (alias
            "Success"))
      ("kPulseLeaderboardStatusPlayerNotLoggedIn"
         (alias
            "Player not logged in"))
      ("kPulseLeaderboardStatusPlayerNotSignedIn"
         (alias
            "Player not signed in to Live"))
      ("kPulseLeaderboardStatusNetworkError"
         (alias
            "Network error"))))
#define kCreditsEntryTypeBlank
(0)
#define kCreditsEntryTypeHeading
(1)
#define kCreditsEntryTypeHeading2
(2)
#define kCreditsEntryTypeTitleName
(3)
#define kCreditsEntryTypeImage
(4)
#define kCreditsEntryTypeCentered
(5)
#define FLUX_CREDITS_ENTRY_TYPES
((("kCreditsEntryTypeBlank"
         (alias
            "Blank"))
      ("kCreditsEntryTypeHeading"
         (alias
            "Header"))
      ("kCreditsEntryTypeHeading2"
         (alias
            "Sub-Header"))
      ("kCreditsEntryTypeTitleName"
         (alias
            "Title/Name"))
      ("kCreditsEntryTypeImage"
         (alias
            "Image"))
      ("kCreditsEntryTypeCentered"
         (alias
            "Centered Text"))))
#define kProgressionStateIndexBeforeHat
(0)
#define kProgressionStateIndexHatIntro
(1)
#define kProgressionStateIndexWhoIsScout
(2)
#define kProgressionStateIndexNotebookIntro
(3)
#define kProgressionStateIndexWarning
(4)
#define kProgressionStateIndexGotHat
(5)
#define kProgressionStateIndexInvestigating
(6)
#define kProgressionStateIndexLoopIntro
(7)
#define kProgressionStateIndexApology
(8)
#define kProgressionStateIndexFixingSong
(9)
#define kProgressionStateIndexSoClose
(10)
#define kProgressionStateIndexSoClose2
(11)
#define kProgressionStateIndexPostCampaign
(12)
#define PLAYER_PROGRESSION_STATES
((("kProgressionStateIndexBeforeHat"
         (alias
            "Before Hat"))
      ("kProgressionStateIndexHatIntro"
         (alias
            "Hat Intro"))
      ("kProgressionStateIndexWhoIsScout"
         (alias
            "Who Is Scout"))
      ("kProgressionStateIndexNotebookIntro"
         (alias
            "Notebook Intro"))
      ("kProgressionStateIndexWarning"
         (alias
            "Warning"))
      ("kProgressionStateIndexGotHat"
         (alias
            "Got Hat"))
      ("kProgressionStateIndexInvestigating"
         (alias
            "Investigating"))
      ("kProgressionStateIndexLoopIntro"
         (alias
            "Loop Intro"))
      ("kProgressionStateIndexApology"
         (alias
            "Apology"))
      ("kProgressionStateIndexFixingSong"
         (alias
            "Fixing Song"))
      ("kProgressionStateIndexSoClose"
         (alias
            "So Close"))
      ("kProgressionStateIndexSoClose2"
         (alias
            "So Close 2"))
      ("kProgressionStateIndexPostCampaign"
         (alias
            "Post-Campaign"))))
#define JOURNAL_PAGE_LIST
({do
      ($journal_pages
         {find $syscfg journal_pages})
      ($pagelist
         {array
            {size $journal_pages}})
      {set_elem
         $pagelist
         0
         {symbol ''}}
      {foreach_int
         $i
         1
         {size $pagelist}
         {set_elem
            $pagelist
            $i
            {elem
               {elem $journal_pages $i}
               0}}}
      $pagelist})
#define PULSEGOAL_TYPE_LIST
(((tutorial
         (help
            "A tutorial goal only shows up in the Yen Sid Phase"))
      (progression
         (help
            "These goals are required to unlock mixes"))
      (exploratory
         (help
            "These are bonus goals"))))
#define kWorldRewardTypeNone
(0)
#define kWorldRewardTypeHatPiece
(1)
#define kWorldRewardTypeManipulator
(2)
#define WORLD_REWARD_TYPES
((("kWorldRewardTypeNone"
         (alias
            "None"))
      ("kWorldRewardTypeHatPiece"
         (alias
            "Hat Piece"))
      ("kWorldRewardTypeManipulator"
         (alias
            "Manipulator"))))
#define kFluxEmptyStackModeMainMenu
(0)
#define kFluxEmptyStackModeTitleScreen
(1)
#define kFluxEmptyStackModeDevMenu
(2)
#define kFluxEmptyStackModeQuickplay
(3)
#define kNumEmptyStackModes
(4)
#define kReticleState_WaitingForEcho
(0)
#define kReticleState_EchoRelease
(1)
#define kReticleState_CancelledRelease
(2)
#define TPAINT_RETICLE_STATES
((("kReticleState_WaitingForEcho"
         (alias
            "WaitingForEcho")
         (help
            "we spawned, but waiting for our turn to echo"))
      ("kReticleState_EchoRelease"
         (alias
            "EchoRelease")
         (help
            "we are going away because of an echo"))
      ("kReticleState_CancelledRelease"
         (alias
            "CancelledRelease")
         (help
            "we are going because we were cancelled"))))
#define kNameTagTypeNone
(0)
#define kNameTagTypeJournalPage
(1)
#define kNameTagTypeCustom
(2)
#define NAMETAG_TYPES
((("kNameTagTypeNone"
         (alias
            "None")
         (help
            "No nametag (default value)."))
      ("kNameTagTypeJournalPage"
         (alias
            "Journal Page")
         (help
            "Journal page nametag."))
      ("kNameTagTypeCustom"
         (alias
            "Custom")
         (help
            "A custom nametag that specifies its own title and description."))))
#define kBoidPlane_Top
(1)
#define kBoidPlane_Bottom
(2)
#define kBoidPlane_Left
(4)
#define kBoidPlane_Right
(8)
#define kBoidPlane_Front
(16)
#define kBoidPlane_Back
(32)
#define FLUX_BOID_CLAMP_PLANES
((("kBoidPlane_Top"
         (alias
            "Top")
         (help
            "Along +Z"))
      ("kBoidPlane_Bottom"
         (alias
            "Bottom")
         (help
            "Along -Z"))
      ("kBoidPlane_Right"
         (alias
            "Right")
         (help
            "Along +X"))
      ("kBoidPlane_Left"
         (alias
            "Left")
         (help
            "Along -X"))
      ("kBoidPlane_Front"
         (alias
            "Front")
         (help
            "Along +Y"))
      ("kBoidPlane_Back"
         (alias
            "Back")
         (help
            "Along -Y"))))
#define kCentering_Feet
(0)
#define kCentering_Shoulders
(1)
#define DEPTH_BUFFER_CENTERING_MODES
(("kCentering_Feet"
      "kCentering_Shoulders"))
#define kMaximumAudioOffset
(100.0)
#define SYSTEM_ERRORS
((none storage_missing storage_full storage_write_error content_not_installed))
#define SYSTEM_ERROR_OPERATIONS
((save saveopt content))
#define kSkeletonID_Automatic
(0)
#define kSkeletonID_Manual
(1)
#define kSongListTypeHeader
(0)
#define kSongListTypeFunction
(1)
#define kSongListTypeDiscSong
(2)
#define kSongListTypeDownloaded
(3)
#define kSongListTypePurchased
(4)
#define kSongListTypePurchaseable
(5)
#define SONG_LIST_ITEM_TYPES
((("kSongListTypeHeader"
         (alias
            "Header")
         (help
            "not a song"))
      ("kSongListTypeFunction"
         (alias
            "Function")
         (help
            "a function row"))
      ("kSongListTypeDiscSong"
         (alias
            "Disc Song")
         (help
            "basic song"))
      ("kSongListTypeDownloaded"
         (alias
            "DLC Song")
         (help
            "bought and downloaded"))
      ("kSongListTypePurchased"
         (alias
            "Undownloaded Song")
         (help
            "bought but not downloaded"))
      ("kSongListTypePurchaseable"
         (alias
            "Unpurchased Song")
         (help
            "not bought"))))
#define kQuickplayUnlockTypeNone
(0)
#define kQuickplayUnlockTypeDiscovery
(1)
#define kQuickplayUnlockTypeStory
(2)
#define kQuickplayUnlockTypeMagicCount
(3)
#define QUICKPLAY_UNLOCK_TYPES
((("kQuickplayUnlockTypeNone"
         (alias
            "None")
         (help
            "The song is never locked in quickplay."))
      ("kQuickplayUnlockTypeDiscovery"
         (alias
            "Discovery")
         (help
            "The song must be played in a Discovery realm to unlock it in quickplay."))
      ("kQuickplayUnlockTypeStory"
         (alias
            "Story")
         (help
            "The story must be continued to unlock the song in quickplay."))
      ("kQuickplayUnlockTypeMagicCount"
         (alias
            "Magic Count")
         (help
            "The player must earn a specific number of magic fragments to unlock the song in quickplay."))))
#define kLeaderboardsTop
(0)
#define kLeaderboardsSelf
(1)
#define kLeaderboardsFriends
(2)
#define LEADERBOARD_MODES
((("kLeaderboardsTop"
         (alias
            "Top Leaderboard")
         (help
            "Retrieves the top scores for the song."))
      ("kLeaderboardsSelf"
         (alias
            "Self Leaderboard")
         (help
            "Retrieves the leaderboard scores surrounding the player's high score."))
      ("kLeaderboardsFriends"
         (alias
            "Friends Leaderboard")
         (help
            "Retrieves only the high scores of the player and their friends."))))
#define kPauseModeDisabled
(0)
#define kPauseModePause
(1)
#define kPauseModeGameGuide
(2)
#define PAUSE_MODES
((("kPauseModeDisabled"
         (alias
            "Pause Disabled")
         (help
            "The game cannot currently be paused."))
      ("kPauseModePause"
         (alias
            "Normal Pause")
         (help
            "The pause gesture will pause the game."))
      ("kPauseModeGameGuide"
         (alias
            "Game Guide")
         (help
            "The pause gesture will bring up the game guide."))))