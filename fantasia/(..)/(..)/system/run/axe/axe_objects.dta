(Axer
   (description
      "An object that performs melodic improvisations.")
   (superclasses Poll)
   (allowed_dirs Entity Scene ObjectDir)
   (ext axe)
   (editor
      (sampler
         object
         (class FusionSampler)
         (help
            "The sampler this Axer plays through."))
      (sampler_channel
         int
         (help
            "Which sampler do we use on our sampler for playback?"))
      (input_device
         object
         (class AxeVirtualInputDevice)
         (help
            "The AxeVirtualInputDevice providing real-time input."))
      (harmony_provider
         object
         (class AxeVirtualHarmonyProvider)
         (help
            "The AxeVirtualHarmony providing harmony information, otherwise, we use TheAxeSongData"))
      (last_pitch
         int
         (read_only TRUE)
         (no_test)
         (help
            "The last pitch played."))
      (activity
         float
         (read_only TRUE)
         (no_test)
         (help
            "The rhythmic activity level (0-1)."))
      (playing
         bool
         (read_only TRUE)
         (no_test)
         (help
            "Whether the player is producing notes."))
      (sustaining
         bool
         (read_only TRUE)
         (no_test)
         (help
            "Whether the player is sustaining a note.")))
   (events_out
      (note_on
         (editor
            (note_on_pitch
               int
               (default 0)
               (help
                  "The pitch that was just played"))
            (note_on_velocity
               float
               (default 0.0)
               (help
                  "The velocity of note that just played")))
         (help
            "Called when the axer plays a note"))
      (note_off
         (editor
            (note_off_pitch
               int
               (default 0)
               (help
                  "The pitch that was just shut off")))
         (help
            "Called when the axer stops playing a note"))))
(AxeVirtualInputDevice
   (description
      "An object that performs melodic improvisations.")
   (allowed_dirs Entity Scene ObjectDir)
   (ext axi)
   (editor
      (enabled
         bool
         (no_test)
         (help
            "Is axing enabled at all?"))
      (pitch
         int
         (no_test)
         (help
            "The approximate pitch being played."))
      (activity
         float
         (no_test)
         (help
            "The amount of rhythmic activity (0--1)."))
      (ticks_per_note
         int
         (no_test)
         (help
            "If non-zero, how many ticks apart each note is (overrides activity)."))
      (playing_notes
         bool
         (no_test)
         (help
            "Whether notes are being produced."))
      (sustaining
         bool
         (no_test)
         (help
            "Whether the player is sustaining a note."))
      (licking
         bool
         (no_test)
         (help
            "Whether the player is playing back a lick."))))
(AxeVirtualHarmonyProvider
   (description
      "Allows dynamic chords and scales to be used with the Axe")
   (allowed_dirs Entity Scene ObjectDir)
   (ext axh)
   (editor
      (mode_root
         symbol
         (list
            {$this get_pitch_names})
         (help
            "What is the root of our current mode?"))
      (mode
         symbol
         (list
            {$this get_mode_names})
         (help
            "What is our current mode?"))
      (chord_root
         symbol
         (list
            {$this get_pitch_names})
         (help
            "What is the root of our current chord?"))
      (chord
         symbol
         (list
            {$this get_chord_names})
         (help
            "What is our current chord?"))))