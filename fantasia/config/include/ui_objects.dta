(UIComponent
   (select_frames 3))
(UIFontImporter
   (default_bitmap_path
      "../../ui/resource/image"))
(UILabel
   (resources_path
      "ui/resource/fonts")
   (init
      {set
         [styles 0 font_resource]
         erbar_medium})
   (types
      (flux_label
         (events_in
            (set_discovery_node_name
               (editor
                  (discovery_world
                     symbol
                     (list $flux_worlds_with_null))
                  (node_id
                     symbol
                     (list
                        {the_discovery_node_info_mgr get_node_ids})))
               (help
                  "Sets the token of this label to the specified Discovery node's name."))
            (set_discovery_node_description
               (editor
                  (discovery_world
                     symbol
                     (list $flux_worlds_with_null))
                  (node_id
                     symbol
                     (list
                        {the_discovery_node_info_mgr get_node_ids})))
               (help
                  "Sets the token of this label to the specified Discovery node's description."))
            (set_song_artist
               (editor
                  (song
                     symbol
                     (list
                        {song_mgr get_song_list TRUE})))
               (help
                  "Sets this label to the artist of a given song"))
            (set_song_title
               (editor
                  (song
                     symbol
                     (list
                        {song_mgr get_song_list TRUE})))
               (help
                  "Sets this label to the title of a given song"))
            (set_song_artist_short
               (editor
                  (song
                     symbol
                     (list
                        {song_mgr get_song_list TRUE})))
               (help
                  "Sets this label to the short artist of a given song"))
            (set_song_title_short
               (editor
                  (song
                     symbol
                     (list
                        {song_mgr get_song_list TRUE})))
               (help
                  "Sets this label to the short title of a given song"))
            (set_format_int_int
               (editor
                  (format_token
                     symbol
                     (list
                        {token_list})
                     (help
                        "The token describing the format string"))
                  (int1
                     int
                     (help
                        "The first integer"))
                  (int2
                     int
                     (help
                        "The second integer")))
               (help
                  "Sets this label to a string described by the format token and 2 ints"))
            (set_format_int_int_int
               (editor
                  (format_token
                     symbol
                     (list
                        {token_list})
                     (help
                        "The token describing the format string"))
                  (int1
                     int
                     (help
                        "The first integer"))
                  (int2
                     int
                     (help
                        "The second integer"))
                  (int3
                     int
                     (help
                        "The third integer")))
               (help
                  "Sets this label to a string described by the format token and 3 ints"))
            (set_format_str
               (editor
                  (format_token
                     symbol
                     (list
                        {token_list})
                     (help
                        "The token describing the format string"))
                  (str
                     string
                     (help
                        "The string referred to by the token"))))
            (set_format_str_str
               (editor
                  (format_token
                     symbol
                     (list
                        {token_list})
                     (help
                        "The token describing the format string"))
                  (str1
                     string
                     (help
                        "The first string referred to by the token"))
                  (str2
                     string
                     (help
                        "The second string referred to by the token"))))
            (set_localized_string
               (editor
                  (str_value
                     string
                     (help
                        "The string to show")))
               (help
                  "Sets this label to an already localized string")))
         (set_discovery_node_name
            ($discovery_world $node_id)
            {set
               [text_token]
               {the_discovery_node_info_mgr get_node_name_token $discovery_world $node_id}})
         (set_discovery_node_description
            ($discovery_world $node_id)
            {set
               [text_token]
               {the_discovery_node_info_mgr get_node_description_token $discovery_world $node_id}})
         (set_song_artist
            ($song_sym)
            {$this
               set_token_fmt
               dynamic_string
               {song_mgr
                  get_data
                  $song_sym
                  artist
                  "-"}})
         (set_song_artist_short
            ($song_sym)
            {$this
               set_token_fmt
               dynamic_string
               {song_mgr
                  get_data
                  $song_sym
                  short_artist
                  "-"}})
         (set_song_title
            ($song_sym)
            {$this
               set_token_fmt
               dynamic_string
               {song_mgr
                  get_data
                  $song_sym
                  title
                  "-"}})
         (set_song_title_short
            ($song_sym)
            {$this
               set_token_fmt
               dynamic_string
               {song_mgr
                  get_data
                  $song_sym
                  short_title
                  "-"}})
         (set_format_int_int
            ($format_token $int1 $int2)
            {$this set_token_fmt $format_token $int1 $int2})
         (set_format_int_int_int
            ($format_token $int1 $int2 $int3)
            {$this set_token_fmt $format_token $int1 $int2 $int3})
         (set_format_str
            ($format_token $str)
            {$this set_token_fmt $format_token $str})
         (set_format_str_str
            ($format_token $str1 $str2)
            {$this set_token_fmt $format_token $str1 $str2})
         (set_localized_string
            ($str)
            {$this set_token_fmt dynamic_string $str}))
      (game_version_label
         (set_game_version
            #ifdef _DEBUG
            {set
               [edit_text]
               {sprintf
                  "%s (DEBUG)"
                  {elem
                     {find $syscfg version}
                     1}}}
            #else
            {set
               [edit_text]
               {elem
                  {find $syscfg version}
                  1}}
            #endif))))
(InlineHelp
   (description
      "Combines help text with a controller button icon")
   (resources_path
      "../../ui/resource/inline_help")
   (init
      {set
         [resource]
         default}
      {$this set_type default})
   (types
      (default
         (text_label
            "text.lbl")
         (action_chars
            (joypad
               ""
               "A"
               "B"
               "Y"
               "S"
               "s"
               ""
               ""
               ""
               ""
               ""
               "R"
               ""
               ""
               "X")))))
(Object
   (types
      (flux_ui_controller
         (editor
            (score
               int
               (default 0)
               (help
                  "The player's last score."))
            (earned_stars
               int
               (default 0)
               (help
                  "How many stars the player earned in the song. (Numerator)"))
            (potential_stars
               int
               (default 0)
               (help
                  "How many stars the player could have earned in the song. (Denominator)"))
            (accuracy
               int
               (default 0)
               (help
                  "The player's accuracy."))
            (longest_streak
               int
               (default 0)
               (help
                  "The player's longest streak."))
            (streak_bonus
               int
               (default 0)
               (help
                  "The score bonus for the player's longest streak."))
            (score_player0
               int
               (default 0)
               (help
                  "Player 0's solo score."))
            (stars_player0
               int
               (default 0)
               (help
                  "Player 0's solo stars"))
            (accuracy_player0
               int
               (default 0)
               (help
                  "player 0's accuracy."))
            (longest_streak_player0
               int
               (default 0)
               (help
                  "player 0's longest streak."))
            (streak_bonus_player0
               int
               (default 0)
               (help
                  "The score bonus for player 0's longest streak."))
            (score_player1
               int
               (default 0)
               (help
                  "Player 1's solo score."))
            (stars_player1
               int
               (default 0)
               (help
                  "Player 1's solo stars"))
            (accuracy_player1
               int
               (default 0)
               (help
                  "player 1's accuracy."))
            (longest_streak_player1
               int
               (default 0)
               (help
                  "player 1's longest streak."))
            (streak_bonus_player1
               int
               (default 0)
               (help
                  "The score bonus for player 1's longest streak."))
            (slots_enabled
               int
               (list FLUX_TARGET_SLOTS_ENABLED)
               (default kTargetSlotEnabled_All)
               (help
                  "Which slots are enabled by the end of the song"))
            (player_count
               int
               (default 1)
               (help
                  "The number of player's for this performance."))
            (pulse_state
               symbol
               (default in_discovery)
               (list
                  (in_discovery loading_pulse in_pulse on_results_screen))
               (help
                  "various states as you transition in and out of pulse"))
            (is_pulse_allowing_pause
               bool
               (default TRUE)
               (help
                  "Is pulse allowing a pause gesture?"))
            (game_state
               symbol
               (default init)
               (list
                  (init shell quickplay_shell loading theater workshop discovery pre_pulse pulse post_pulse pulse_multiplayer_tutorial credits))
               (help
                  "(DO NOT SET DIRECTLY, use the set_game_state event) The game's current state (i.e. in shell, Discovery, Pulse, etc.)."))
            (in_workshop
               bool
               (help
                  "Are we currently in the workshop?"))
            (current_cutscene
               string
               (help
                  "The cutscene that's currently being played, or the empty symbol."))
            (force_disable_discovery_input
               bool
               (default FALSE)
               (help
                  "True if the player's control over Discovery should be disabled, false otherwise."))
            (pulse_force_retry_count
               int
               (default 0)
               (help
                  "The number of times the player has been forced to retry a Pulse song in a row (i.e. for required campaign goals)."))
            (nametag_entity
               object
               (help
                  "The entity whose nametag is currently displayed, if any."))
            (nametag_type
               int
               (list NAMETAG_TYPES)
               (help
                  "The type of nametag currently displayed, if any."))
            (custom_nametag_title_token
               symbol
               (list
                  {token_list})
               (help
                  "The custom title token of the current nametag."))
            (custom_nametag_description_token
               symbol
               (list
                  {token_list})
               (help
                  "The custom description token  of the current nametag."))
            (highlighted_discovery_node
               symbol
               (help
                  "The Discovery node that's currently primed, or the empty symbol if no Discovery node is primed."))
            (highlighted_discovery_node_world
               symbol
               (list $flux_worlds_with_null)
               (help
                  "The world of the Discovery node that's currently primed, or the empty symbol if no Discovery node is primed."))
            (highlighted_pulse_song
               symbol
               (help
                  "The Pulse song whose portal is currently primed, or the empty symbol if no Pulse portal is primed."))
            (highlighted_node_collected_magic
               int
               (help
                  "The number of magic pieces the player has collected from the currently highlighted Discovery or Pulse node."))
            (highlighted_node_total_magic
               int
               (help
                  "The total number of magic pieces available from the currently highlighted Discovery or Pulse node."))
            (highlighted_world_reward_type
               int
               (list WORLD_REWARD_TYPES)
               (help
                  "The type of world reward that's currently highlighted."))
            (is_highlighted_world_reward_locked
               bool
               (help
                  "True if the highlighted world reward is locked, false otherwise."))
            (highlighted_world_reward_name_token
               symbol
               (help
                  "The name token of the highlighted world reward."))
            (highlighted_world_reward_description_token
               symbol
               (help
                  "The description token of the highlighted world reward."))
            (worldselect_selection
               symbol
               (default discovery_underwater_scene01)
               (list $flux_worlds_with_null)
               (help
                  "The currently-highlighted world in the balcony. This drives the world select UI info."))
            (collectibles_target
               int
               (default 1)
               (range 1 10000)
               (help
                  "The goal number of collectibles for a charge."))
            (total_collectibles_collected
               int
               (default 0)
               (range 0 10000)
               (help
                  "The collectibles that have been collected.  Never decreases in a scene."))
            (collectibles_collected
               int
               (default 0)
               (range 0 10000)
               (help
                  "The collectibles that have been collected and are unspent."))
            (cursor_charged
               bool
               (default FALSE)
               (help
                  "Does the cursor currently have a charge?"))
            (magic_collected
               int
               (default 0)
               (help
                  "How much magic have we collected in our current discovery scene?"))
            (magic_target
               int
               (default 0)
               (help
                  "How much magic do we need to get the hatpiece/manipulator?"))
            (magic_available
               int
               (default 0)
               (help
                  "How much magic is available to us in this scene?"))
            (is_multiplayer
               bool
               (help
                  "Are we in a multiplayer area?"))
            (has_active_skeleton
               bool
               (help
                  "Do we have an active skeleton?"))
            (has_second_skeleton
               bool
               (help
                  "Do we have a second skeleton?"))
            (active_player_index
               int
               (help
                  "Which skeleton is active?"))
            (force_show_hat
               bool
               (default FALSE)
               (help
                  "Should we force show the hat in the skeleton depth buffer?"))
            (force_show_hands
               bool
               (default TRUE)
               (help
                  "Should we force show the hand particles in the skeleton depth buffer?"))
            (force_title_signin
               bool
               (default FALSE)
               (help
                  "Force the title screen to manually sign in the user on entry."))
            (force_hide_balcony_hud
               bool
               (default FALSE)
               (help
                  "True if the balcony HUD should be hidden, false otherwise."))
            (show_disco_status
               bool
               (default FALSE)
               (help
                  "Do we want to show the world status UI within discovery?"))
            (is_in_cliff
               bool
               (default FALSE)
               (help
                  "True if the player is current in the Cliff sequence, false otherwise."))
            (is_playspace_warning_active
               bool
               (default TRUE)
               (help
                  "True if the playspace warning should display when the player goes outside the playspace area, false otherwise."))
            (is_persistent_podium_hidden
               bool
               (default FALSE)
               (help
                  "True if the podium on the persistent menu_shared layer should be hidden."))
            (viewing_journal
               bool
               (default FALSE)
               (help
                  "True while player is previewing an individual journal page in discovery."))
            (system_error
               symbol
               (list SYSTEM_ERRORS)
               (default none)
               (help
                  "The system error that should be handled by the system error screen."))
            (system_error_operation
               symbol
               (list SYSTEM_ERROR_OPERATIONS)
               (default save)
               (help
                  "The operation that was taking place when system_error occurred."))
            (disco_backplane_monitor
               symbol
               (list
                  (cutscene other_node backplane cutscene_in cutscene_out zooming_in zooming_out))
               (help
                  "Are we on the backplane, in another node, in a cutscene, or in transition?"))
            (mix_select_active
               bool
               (default FALSE)
               (help
                  "True while on the mix select screen"))
            (mix_select_current_slot
               int
               (default kTargetSlot_Mix1)
               (list FLUX_TARGET_SLOTS)
               (help
                  "The current slot on the mix select screen"))
            (mix_select_slot_1
               int
               (default kTargetMix_None)
               (list FLUX_TARGET_MIXES)
               (help
                  "The selected mix for slot 1"))
            (mix_select_slot_2
               int
               (default kTargetMix_None)
               (list FLUX_TARGET_MIXES)
               (help
                  "The selected mix for slot 2"))
            (mix_select_slot_3
               int
               (default kTargetMix_None)
               (list FLUX_TARGET_MIXES)
               (help
                  "The selected mix for slot 3"))
            (system_language
               symbol
               (list
                  {elem
                     {find $syscfg system language supported}
                     1})
               (read_only TRUE)
               (help
                  "The system language"))
            (song_info_pane_mix_list_alpha
               float
               (default 1.0)
               (range 0.0 1.0)
               (help
                  "HACK (fitzy): alpha for the mix list rows")))
         (init
            {gesture_mgr add_sink $this gesturemgr_player_skeleton_changes}
            {gesture_mgr add_sink $this gesturemgr_player_skeleton_swap}
            {platform_mgr add_sink $this on_suspend}
            {platform_mgr add_sink $this on_resume}
            {$this update_system_language})
         (events_in
            (rotate_debug_overlay
               (help
                  "Rotate the skeleton/camera debug state"))
            (conductor_mode_enter
               (help
                  "Trigger conductor mode enter event."))
            (conductor_mode_exit
               (help
                  "Trigger conductor mode exit event."))
            (pause_transition_out_complete
               (help
                  "Fired when pause screen is done animating out."))
            (disengage_manipulator
               (help
                  "Gets rid of manipulator UI in discovery"))
            (configure_musicbox_manip
               (help
                  "Pass config params the music box manipulator UI")
               (editor
                  (mb_sampler
                     object
                     (class FusionSampler))
                  (mb_midi_file
                     file
                     (ext
                        "MIDI Files"
                        "mid"))))
            (configure_beatwheel_manip
               (help
                  "Pass config params the beat wheel manipulator UI")
               (editor
                  (bw_sampler
                     object
                     (class FusionSampler))))
            (configure_spacejam_manip
               (help
                  "Pass config params the space jam manipulator UI")
               (editor
                  (sj_sampler
                     object
                     (class FusionSampler))
                  (sj_x_slots int)
                  (sj_y_slots int)
                  (sj_beats_per_measure int)))
            (configure_rope_manip
               (help
                  "Pass config params to the rope manipulator UI")
               (editor
                  (mr_sampler
                     object
                     (class FusionSampler))
                  (mr_midi_file
                     file
                     (ext
                        "MIDI Files"
                        "mid"))
                  (mr_pan_anim
                     object
                     (class PropAnim))
                  (mr_depth_anim
                     object
                     (class PropAnim))))
            (engage_musicbox_manipulator
               (help
                  "We should bring up the music box manipulator UI"))
            (engage_beatwheel_manipulator
               (help
                  "We should bring up the beat wheel manipulator UI"))
            (engage_spacejam_manipulator
               (help
                  "We should bring up the space jam manipulator UI"))
            (engage_lathe_manipulator
               (help
                  "We should bring up the lathe manipulator UI"))
            (engage_rope_manipulator
               (help
                  "We should bring up the rope manipulator UI"))
            (discovery_manipulator_touched
               (help
                  "We touched the discovery manipulator"))
            (enable_multiplayer
               (help
                  "Enables/disables multiplayer option and reacts accordingly")
               (editor
                  (enable bool)))
            (set_game_state
               (help
                  "Sets the game state (i.e. in shell, Discovery, Pulse, etc.)")
               (editor
                  (state
                     symbol
                     (list
                        (shell loading theater workshop discovery pre_pulse pulse post_pulse)))))
            (discovery_magic_awarded
               (editor
                  (discovery_world
                     symbol
                     (list $flux_worlds_with_null))
                  (discovery_node
                     symbol
                     (list
                        {the_discovery_node_info_mgr get_node_ids})))
               (help
                  "Called when the player has received a new piece of magic from a Discovery node."))
            (pulse_magic_awarded
               (editor
                  (song
                     symbol
                     (list
                        {song_mgr get_song_list TRUE})))
               (help
                  "Called when the player has received a new piece of magic from a Pulse song."))
            (display_magic_award_ui
               (help
                  "Displays the magic award UI for the current world."))
            (display_world_reveal_ui
               (editor
                  (reveal_world
                     symbol
                     (list $flux_worlds_with_null)
                     (help
                        "The world whose name is displayed in the reveal UI.")))
               (help
                  "Tells the UI to display the world reveal UI."))
            (update_system_language
               (help
                  "Updates the system_language property to the current system value")))
         (events_out
            (rotate_debug_overlay
               (help
                  "We should rotate the skeleton/camera debug state"))
            (conductor_mode_enter
               (help
                  "Discovery scenes should listen to this to react when the player leaves the scene into conductor mode."))
            (conductor_mode_exit
               (help
                  "Discovery scenes should listen to this to react when the player returns to the scene from conductor mode."))
            (pause_transition_out_complete
               (help
                  "Fired from pause screen, lets discovery scene know that we're done animating out the pause screen."))
            (configure_musicbox_manip
               (help
                  "Pass config params the music box manipulator UI")
               (editor
                  (mb_sampler
                     object
                     (class FusionSampler))
                  (mb_midi_file
                     file
                     (ext
                        "MIDI Files"
                        "mid"))))
            (configure_beatwheel_manip
               (help
                  "Pass config params the beat wheel manipulator UI")
               (editor
                  (bw_sampler
                     object
                     (class FusionSampler))))
            (configure_spacejam_manip
               (help
                  "Pass config params the space jam manipulator UI")
               (editor
                  (sj_sampler
                     object
                     (class FusionSampler))
                  (sj_x_slots int)
                  (sj_y_slots int)
                  (sj_beats_per_measure int)))
            (configure_rope_manip
               (help
                  "Pass config params to the rope manipulator UI")
               (editor
                  (mr_sampler
                     object
                     (class FusionSampler))
                  (mr_midi_file
                     file
                     (ext
                        "MIDI Files"
                        "mid"))
                  (mr_pan_anim
                     object
                     (class PropAnim))
                  (mr_depth_anim
                     object
                     (class PropAnim))))
            (engage_musicbox_manipulator
               (help
                  "We should bring up the music box manipulator UI"))
            (engage_beatwheel_manipulator
               (help
                  "We should bring up the beat wheel manipulator UI"))
            (engage_spacejam_manipulator
               (help
                  "We should bring up the space jam manipulator UI"))
            (engage_lathe_manipulator
               (help
                  "We should bring up the lathe manipulator UI"))
            (engage_rope_manipulator
               (help
                  "We should bring up the rope manipulator UI"))
            (disengage_manipulator
               (help
                  "We should get rid of manipulator UI"))
            (engage_manipulator
               (help
                  "We're about to engage a specific type of manipulator"))
            (collectible_spawned
               (help
                  "A collectible was spawned in the scene."))
            (visible_collectibles_collected
               (help
                  "All currently visible collectibles have been collected."))
            (intro_cutscene_complete
               (help
                  "Trigged when the intro cam has finished its path."))
            (discovery_manipulator_touched
               (help
                  "We touched the discovery manipulator"))
            (player_skeletons_swapped
               (help
                  "Player skeletons swapped sides"))
            (display_magic_award_ui
               (help
                  "Displays the magic award UI for the current world."))
            (display_world_reveal_ui
               (editor
                  (reveal_world
                     symbol
                     (list $flux_worlds_with_null)
                     (help
                        "The world whose name is displayed in the reveal UI.")))
               (help
                  "Fired when the world reveal UI should be displayed."))
            (discovery_magic_awarded
               (editor
                  (discovery_world
                     symbol
                     (list $flux_worlds_with_null))
                  (discovery_node
                     symbol
                     (list
                        {the_discovery_node_info_mgr get_node_ids})))
               (help
                  "Fired when the player has received a new piece of magic from a Discovery node."))
            (pulse_magic_awarded
               (editor
                  (song
                     symbol
                     (list
                        {song_mgr get_song_list TRUE})))
               (help
                  "Fired when the player has received a new piece of magic from a Pulse song.")))
         (gesturemgr_player_skeleton_changes
            {$this
               set
               has_second_skeleton
               {gesture_mgr has_second_skeleton}}
            {$this
               set
               has_active_skeleton
               {gesture_mgr has_active_skeleton}}
            {$this
               set
               active_player_index
               {gesture_mgr get_active_player_index}})
         (gesturemgr_player_skeleton_swap
            {export
               ($this player_skeletons_swapped)})
         (rotate_debug_overlay
            {export
               ($this rotate_debug_overlay)})
         (conductor_mode_enter
            {export
               ($this conductor_mode_enter)})
         (conductor_mode_exit
            {export
               ($this conductor_mode_exit)})
         (pause_transition_out_complete
            {export
               ($this pause_transition_out_complete)})
         (configure_beatwheel_manip
            ($sampler)
            {export
               ($this configure_beatwheel_manip $sampler)})
         (configure_musicbox_manip
            ($sampler $midi_file)
            {export
               ($this configure_musicbox_manip $sampler $midi_file)})
         (configure_spacejam_manip
            ($sampler $xslots $yslots $beats_per_measure)
            {export
               ($this configure_spacejam_manip $sampler $xslots $yslots $beats_per_measure)})
         (configure_rope_manip
            ($sampler $midi_file $pan_anim $depth_anim)
            {export
               ($this configure_rope_manip $sampler $midi_file $pan_anim $depth_anim)})
         (engage_beatwheel_manipulator
            {export
               ($this engage_manipulator)}
            {export
               ($this engage_beatwheel_manipulator)})
         (engage_musicbox_manipulator
            {export
               ($this engage_manipulator)}
            {export
               ($this engage_musicbox_manipulator)})
         (engage_spacejam_manipulator
            {export
               ($this engage_manipulator)}
            {export
               ($this engage_spacejam_manipulator)})
         (engage_lathe_manipulator
            {export
               ($this engage_manipulator)}
            {export
               ($this engage_lathe_manipulator)})
         (engage_rope_manipulator
            {export
               ($this engage_manipulator)}
            {export
               ($this engage_rope_manipulator)})
         (disengage_manipulator
            {export
               ($this disengage_manipulator)})
         (discovery_manipulator_touched
            {export
               ($this discovery_manipulator_touched)})
         (enable_multiplayer
            ($enable)
            {$this set is_multiplayer $enable}
            {$this update_skeleton_assignment_mode}
            {if
               {! $enable}
               {pulse_mgr set num_players 1}})
         (set_game_state
            ($state)
            {do
               ($old_state
                  {$this get game_state})
               ($was_in_game
                  {$this is_active_game_state $old_state})
               ($is_in_game
                  {$this is_active_game_state $state})
               {if_else
                  {&&
                     $is_in_game
                     {! $was_in_game}}
                  {profile_mgr handle_gamesession_start}
                  {if
                     {&&
                        {! $is_in_game}
                        $was_in_game}
                     {profile_mgr handle_gamesession_stop}}}
               {if
                  {&&
                     $was_in_game
                     {! $is_in_game}}
                  {if_else
                     {{profile_mgr get active_profile}
                        get
                        is_anonymous}
                     {{profile_mgr get active_profile}
                        reset_progression_data}
                     {saveload_mgr restore_from_last_save}}}
               {$this set game_state $state}
               {$this update_skeleton_assignment_mode}})
         (is_active_game_state
            ($state)
            {&&
               {!= $state init}
               {!= $state shell}})
         (on_suspend
            {if
               {$this
                  is_active_game_state
                  {$this get game_state}}
               {profile_mgr handle_gamesession_stop}})
         (on_resume
            {if
               {$this
                  is_active_game_state
                  {$this get game_state}}
               {profile_mgr handle_gamesession_start}})
         (update_skeleton_assignment_mode
            {cond
               ([is_multiplayer]
                  {gesture_mgr set_skeleton_assignment_mode kSkeletonAssignmentMode_LeftRight})
               {gesture_mgr set_skeleton_assignment_mode kSkeletonAssignmentMode_SimpleFrontAndCenter}})
         (discovery_magic_awarded
            ($discovery_world $discovery_node)
            {export
               ($this discovery_magic_awarded $discovery_world $discovery_node)})
         (pulse_magic_awarded
            ($song)
            {export
               ($this pulse_magic_awarded $song)})
         (display_magic_award_ui
            {export
               ($this display_magic_award_ui)})
         (display_world_reveal_ui
            ($world)
            {export
               ($this display_world_reveal_ui $world)})
         (update_system_language
            {set
               [system_language]
               {system_language}}))
      (flux_pulse_passthrough
         (editor
            (beatmatch_slot
               int
               (list FLUX_TARGET_SLOTS)
               (help
                  "which slot we're currently beatmatching"))
            (authored_part
               int
               (list FLUX_TARGET_PARTS)
               (help
                  "which part is currently authored"))
            (slots_enabled
               bitfield
               (list FLUX_TARGET_SLOTS_ENABLED)
               (help
                  "which slots are available"))
            (slots
               (indent
                  (slot_drums
                     int
                     (list FLUX_TARGET_SLOTS_OPTIONAL)
                     (alias
                        "Drums")
                     (no_test))
                  (slot_bass
                     int
                     (list FLUX_TARGET_SLOTS_OPTIONAL)
                     (alias
                        "Bass")
                     (no_test))
                  (slot_guitar
                     int
                     (list FLUX_TARGET_SLOTS_OPTIONAL)
                     (alias
                        "Guitar/Synth")
                     (no_test))
                  (slot_vocals
                     int
                     (list FLUX_TARGET_SLOTS_OPTIONAL)
                     (alias
                        "Vocals")
                     (no_test))
                  (slot_misc
                     int
                     (list FLUX_TARGET_SLOTS_OPTIONAL)
                     (alias
                        "Misc")
                     (no_test))))
            (mixes
               (indent
                  (mix_drums
                     int
                     (list FLUX_TARGET_MIXES_OPTIONAL)
                     (alias
                        "Drums")
                     (no_test))
                  (mix_bass
                     int
                     (list FLUX_TARGET_MIXES_OPTIONAL)
                     (alias
                        "Bass")
                     (no_test))
                  (mix_guitar
                     int
                     (list FLUX_TARGET_MIXES_OPTIONAL)
                     (alias
                        "Guitar/Synth")
                     (no_test))
                  (mix_vocals
                     int
                     (list FLUX_TARGET_MIXES_OPTIONAL)
                     (alias
                        "Vocals")
                     (no_test))
                  (mix_misc
                     int
                     (list FLUX_TARGET_MIXES_OPTIONAL)
                     (alias
                        "Misc")
                     (no_test))))
            (cue_color_id
               int
               (list FLUX_TARGET_COLORS)
               (help
                  "the color id that was set by the last choice gesture"))
            (manipulator_type
               int
               (list MANIPULATOR_TYPES_OPTIONAL)
               (help
                  "current manipulator type"))
            (manipulator_state
               int
               (list PULSE_MANIPULATOR_STATES)
               (help
                  "current manipulator state"))
            (mini_manipulators
               (indent
                  (mini_manipulator_musicbox
                     int
                     (range 0 2)
                     (help
                        "location of the Music Box mini manipulator"))
                  (mini_manipulator_beatwheel
                     int
                     (range 0 2)
                     (help
                        "location of the Beat Wheel mini manipulator"))
                  (mini_manipulator_lathe
                     int
                     (range 0 2)
                     (help
                        "location of the FX Lathe mini manipulator"))
                  (mini_manipulator_rope
                     int
                     (range 0 2)
                     (help
                        "location of the Melody Rope mini manipulator"))
                  (mini_manipulator_spacejam
                     int
                     (range 0 2)
                     (help
                        "location of the Space Jam mini manipulator"))))
            (in_manipulator
               bool
               (help
                  "from the moment the manipulator intro starts, to the moment the outro ends"))
            (manipulator_visible
               bool
               (help
                  "is the manipulator entity itself visible (post-intro to pre-outro)"))
            (choice_part
               int
               (list FLUX_TARGET_PARTS_FULL)
               (help
                  "current part being chosen in the choice gesture"))
            (in_choice
               bool
               (help
                  "are we currently in a choice gesture"))
            (in_songbuilder
               bool
               (help
                  "are we currently in songbuilder"))
            (choice_player
               int
               (list
                  (0 1))
               (help
                  "if are we currently in a choice, which player the choice belongs to"))
            (in_shape
               bool
               (help
                  "are we currently in a shape"))
            (fade_out_amount
               float
               (range 0.0 1.0)
               (help
                  "how much is the discovery scene currently faded out, 0 if fully visible, 1 if fully faded")
               (default 0.0))
            (num_players
               int
               (list
                  (1 2))
               (default 1))
            (tug_of_war
               float
               (range 0.0 1.0)
               (default 0.5)
               (help
                  "Choice tug of war state. 0 = player 1 blowout, 0.5 = tied, 1 = player 2 blow out")))
         (events_in
            (hedron_rotated
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_begin
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_start_bonus
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_finish_won
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_finish_lost
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (path_gesture_complete)
            (z_push_spawn)
            (z_push_downbeat)
            (z_push_suck))
         (events_out
            (hedron_rotated
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_begin
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_start_bonus
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_finish_won
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (hedron_finish_lost
               (editor
                  (shape_name
                     symbol
                     (list HEDRON_SHAPE_NAMES)
                     (no_validate))))
            (path_gesture_complete)
            (z_push_spawn)
            (z_push_downbeat)
            (z_push_suck)
            (reset)
            (path_begin
               (help
                  "The cue was just hit to start the path gesture"))
            (path_success
               (help
                  "A path gesture was just 100% completed"))
            (path_failed
               (help
                  "A path gesture was begun but failed"))
            (TARGET_HIT)
            (TARGET_PASS)
            (choice_z_activate)
            (choice_z_engaged)
            (choice_hit
               (editor
                  (slot_chosen
                     int
                     (list FLUX_TARGET_SLOTS)
                     (no_test))))
            (choice_pass)
            (choice_mix_changed)
            (manipulator_activate
               (editor
                  (active_manipulator_entity
                     object
                     (class Entity)
                     (components
                        (ManipulatorInterfaceCom))
                     (help
                        "the manipulator to show"))
                  (active_duration_beats
                     float
                     (help
                        "duration of prepared/intro state in beats"))
                  (active_duration_secs
                     float
                     (help
                        "duration of prepared/intro state in seconds"))
                  (active_hedron
                     object
                     (class Entity)
                     (components
                        (PulseHedronCom))
                     (help
                        "the hedron to hide"))))
            (manipulator_deactivate
               (editor
                  (watch_manipulator_entity
                     object
                     (class Entity)
                     (components
                        (ManipulatorInterfaceCom))
                     (help
                        "the manipulator to hide"))
                  (outro_duration_beats
                     float
                     (help
                        "duration of outro state in beats (minus buffer for post-manipulator choice)"))
                  (outro_duration_secs
                     float
                     (help
                        "duration of outro state in seconds (minus buffer for post-manipulator choice)"))
                  (watch_duration_beats
                     float
                     (help
                        "duration of whole watch state in beats"))
                  (watch_duration_secs
                     float
                     (help
                        "duration of whole watch state in seconds"))))
            (manipulator_highlight_timer)
            (manipulator_unhighlight_timer)
            (update_multiplier)
            (suffix_begin
               (editor
                  (suffix_begin_player
                     int
                     (range 0 1)
                     (help
                        "Which player is executing the suffix (0-1)"))
                  (suffix_begin_hand
                     int
                     (list FLUX_TARGET_HAND_TYPES)
                     (help
                        "Which hand is being used"))
                  (suffix_begin_suffix_type
                     int
                     (list FLUX_TARGET_SUFFIXES)
                     (help
                        "What kind of suffix it is"))))
            (suffix_failed
               (editor
                  (suffix_failed_player
                     int
                     (range 0 1)
                     (help
                        "Which player is executing the suffix (0-1)"))
                  (suffix_failed_hand
                     int
                     (list FLUX_TARGET_HAND_TYPES)
                     (help
                        "Which hand is being used"))
                  (suffix_failed_suffix_type
                     int
                     (list FLUX_TARGET_SUFFIXES)
                     (help
                        "What kind of suffix it is"))))
            (suffix_success
               (editor
                  (suffix_success_player
                     int
                     (range 0 1)
                     (help
                        "Which player is executing the suffix (0-1)"))
                  (suffix_success_hand
                     int
                     (list FLUX_TARGET_HAND_TYPES)
                     (help
                        "Which hand is being used"))
                  (suffix_success_suffix_type
                     int
                     (list FLUX_TARGET_SUFFIXES)
                     (help
                        "What kind of suffix it is")))))
         (reset
            {$this set num_players 1}
            {$this set in_choice FALSE}
            {$this set in_songbuilder FALSE}
            {$this set in_shape FALSE}
            {$this set in_manipulator FALSE}
            {$this set manipulator_visible FALSE}
            {$this set manipulator_state kPulseManipulatorState_Disabled}
            {$this set manipulator_type kManipulator_None}
            {$this set mini_manipulator_musicbox 0}
            {$this set mini_manipulator_beatwheel 0}
            {$this set mini_manipulator_lathe 0}
            {$this set mini_manipulator_rope 0}
            {$this set mini_manipulator_spacejam 0}
            {$this set tug_of_war 0.5}
            {$this set fade_out_amount 0.7}
            {export
               ($this reset)}))
      (flux_manipulator_passthrough
         (editor
            (muted bool)
            ('Space Jam'
               (indent
                  (Outputs
                     (indent
                        (spacejam_x float)
                        (spacejam_y float)
                        (spacejam_slot_x int)
                        (spacejam_slot_y int)))
                  (Inputs
                     (indent
                        (spacejam_quantization
                           int
                           (list
                              (BEAT_QUANTIZATIONS_BASE)))
                        (spacejam_mode_root
                           symbol
                           (help
                              "What is the root of our current mode?")
                           (default C))
                        (spacejam_mode
                           symbol
                           (help
                              "What is our current mode?")
                           (default major))
                        (spacejam_starting_note
                           int
                           (default 60))))))
            (Lathe
               (indent
                  (Outputs
                     (indent
                        (lathe_width float)
                        (lathe_rotation float)))))
            (waveform
               float
               (range 0.0 1.0)
               (help
                  "Manipulator waveform, 0-1")
               (default 0.0))))))
(UIScreen
   (types
      (balcony
         (push_level_info
            ($level_sym $info_obj)
            {if_else
               {==
                  $level_sym
                  ""}
               {$info_obj
                  set
                  level_name
                  ""}
               {do
                  ($level
                     {find $syscfg levels $level_sym})
                  {$info_obj
                     set
                     level_name
                     {elem
                        {find $level name}
                        1}}
                  {$info_obj
                     set
                     level_pct
                     {random_float 0.0 100.0}}}})
         (events_in
            (push_level_info
               (editor
                  (level_sym symbol)
                  (info_obj
                     object
                     (class Entity)))))
         (is_game_screen TRUE)
         (enter
            #ifndef HX_TOOL
            {$this
               add_prop_sink
               (paused)
               on_game_paused}
            {$this set_paused FALSE}
            #endif)
         (exit
            #ifndef HX_TOOL
            {$this
               remove_prop_sink
               (paused)}
            #endif)
         (load
            #ifndef HX_TOOL
            {gesture_mgr tilt_camera_for_hands_over_head}
            #endif)
         (is_loaded
            #ifndef HX_TOOL
            {!
               {gesture_mgr camera_is_tilting}}
            #else
            TRUE
            #endif)
         (BUTTON_DOWN_MSG
            #ifndef HX_TOOL
            {switch
               $action
               (kAction_Start
                  {if
                     {!
                        {ui in_transition}}
                     {$this goto_pause_screen}})
               kDataUnhandled}
            #else
            kDataUnhandled
            #endif)
         (goto_pause_screen
            #ifndef HX_TOOL
            {ui
               goto
               "ui/pause/pause.uiscreen"}
            #endif)
         (on_game_paused
            #ifndef HX_TOOL
            {beat_provider
               pause_game_timelines
               [paused]}
            #endif))))
#define QUICKPLAY_SCREEN_SHARED
((on_players_shook_hands_changed
      {unless
         {ui
            in_transition
            ""}
         {if_else
            {$this
               get
               (PulseMultiplayerHandshakeCom have_players_shook_hands)}
            {$this set_coop_enabled TRUE}
            {$this set_coop_enabled FALSE}}})
   (set_coop_enabled
      ($enable)
      {pulse_mgr
         set
         num_players
         {if_else $enable 2 1}}
      {gesture_mgr set allow_left_right_mode_active_player_switch $enable}
      {song_info_pane update_song_info})
   (play_select_sfx
      {quickplay_sfx_emitter.flow set stop_on_exit FALSE}
      {quickplay_sfx_emitter.flow post_event play_swipe_choice_orig kTaskUISeconds})
   (play_scroll_sfx
      {unless
         {ui
            in_transition
            ""}
         {quickplay_sfx_emitter.flow set stop_on_exit FALSE}
         {quickplay_sfx_emitter.flow post_event play_scroll_hit kTaskUISeconds}})
   (play_mix_select_scroll_sfx
      {unless
         {ui
            in_transition
            ""}
         {quickplay_sfx_emitter.flow set stop_on_exit FALSE}
         {quickplay_sfx_emitter.flow post_event play_scroll_hit_mix_prev kTaskUISeconds}}))